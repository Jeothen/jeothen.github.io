[{"permalink":"//","layout":"default","title":"Jeothen’s Blog","content":"# Jeothen's Blog\n\n\n\n시간이 날 때마다 꾸준히 학습한 내용 작성을 목표\n\n","dir":"/","name":"README.md","path":"README.md","url":"/"},{"permalink":"/DataStructure/Binary_Tree/Binary_Tree/","layout":"default","title":null,"content":"","dir":"/DataStructure/Binary_Tree/Binary_Tree/","name":"Readme.md","path":"DataStructure/Binary_Tree/Binary_Tree/Binary_Search_Tree/Readme.md","url":"/DataStructure/Binary_Tree/Binary_Tree/"},{"permalink":"/DataStructure/Binary_Tree/Binary_Tree/Binary_Tree/","layout":"default","title":null,"content":"","dir":"/DataStructure/Binary_Tree/Binary_Tree/Binary_Tree/","name":"Readme.md","path":"DataStructure/Binary_Tree/Binary_Tree/Binary_Tree/Readme.md","url":"/DataStructure/Binary_Tree/Binary_Tree/Binary_Tree/"},{"sort":1,"permalink":"/Computer_Science/","layout":"default","title":"Computer Science","content":"<h1 id=\"computer-science\">Computer Science</h1>\n\n<ul>\n <li><a href=\"/Computer_Science/OS/\">Operating System</a>\n <ul>\n <li><a href=\"/Computer_Science/OS/Computer_Architecture.html\">Computer Architecture</a></li>\n <li><a href=\"/Computer_Science/OS/Processor.html\">Processor</a></li>\n <li><a href=\"/Computer_Science/OS/Kernel.html\">Kernel</a></li>\n <li><a href=\"/Computer_Science/OS/System_Call.html\">System Call</a></li>\n <li><a href=\"/Computer_Science/OS/Compiler_Interpreter.html\">Compile &amp; Interpreter</a></li>\n <li><a href=\"/Computer_Science/OS/Assembler.html\">Assembler</a></li>\n <li><a href=\"/Computer_Science/OS/Linker_Loader.html\">Linker &amp; Loader</a></li>\n <li><a href=\"/Computer_Science/OS/Process.html\">Process</a></li>\n <li><a href=\"/Computer_Science/OS/Thread.html\">Thread</a></li>\n <li><a href=\"/Computer_Science/OS/Interrupt_Polling_DMA.html\">Interrupt &amp; Polling &amp; DMA</a></li>\n <li><a href=\"/Computer_Science/OS/Shared_Memory.html\">Shared Memory</a></li>\n <li><a href=\"/Computer_Science/OS/IPC.html\">Inter Process Communication (IPC)</a></li>\n <li><a href=\"/Computer_Science/OS/RPC.html\">Remote Procedures Call (RPC)</a></li>\n <li><a href=\"/Computer_Science/OS/Multi_Thread.html\">Multi Thread</a></li>\n <li><a href=\"/Computer_Science/OS/Scheduling.html\">Scheduling</a></li>\n <li><a href=\"/Computer_Science/OS/Synchronization.html\">Synchronization</a></li>\n <li><a href=\"/Computer_Science/OS/Blocking.html\">Blocking</a></li>\n <li><a href=\"/Computer_Science/OS/Memory.html\">Memory</a></li>\n <li><a href=\"/Computer_Science/OS/Deadlock.html\">Deadlock</a></li>\n <li><a href=\"/Computer_Science/OS/Virtual%20Memory.html\">Virtual Memory</a></li>\n <li><a href=\"/Computer_Science/OS/Paging.html\">Paging</a></li>\n <li><a href=\"/Computer_Science/OS/File_System.html\">File System</a></li>\n <li><a href=\"/Computer_Science/OS/Floating_Point.html\">Floating Point</a></li>\n <li><a href=\"/Computer_Science/OS/Regex_Expression.html\">Regex Expression</a></li>\n <li><a href=\"/Computer_Science/OS/Virtual_Machine.html\">Virtual Machine</a></li>\n </ul>\n </li>\n <li><a href=\"/Computer_Science/Network/\">Network</a>\n <ul>\n <li><a href=\"/Computer_Science/Network/OSI.html\">OSI 7 Layers</a></li>\n <li><a href=\"/Computer_Science/Network/HTTP.html\">HTTP</a></li>\n <li><a href=\"/Computer_Science/Network/NAT.html\">NAT</a></li>\n <li><a href=\"/Computer_Science/Network/Class.html\">Network Class</a></li>\n <li><a href=\"/Computer_Science/Network/Subnet.html\">Subnet</a></li>\n <li><a href=\"/Computer_Science/Network/Casting.html\">Casting</a></li>\n <li><a href=\"/Computer_Science/Network/DNS.html\">DNS</a></li>\n <li><a href=\"/Computer_Science/Network/Forward_Redirect.html\">Forward &amp; Redirect</a></li>\n <li><a href=\"/Computer_Science/Network/URI.html\">URI &amp; URL &amp; URN</a></li>\n <li><a href=\"/Computer_Science/Network/Proxy.html\">Proxy</a></li>\n <li><a href=\"/Computer_Science/Network/Key.html\">Key</a></li>\n <li><a href=\"/Computer_Science/Network/Cookie_Session.html\">Cookie &amp; Session</a></li>\n <li><a href=\"/Computer_Science/Network/VPN.html\">VPN</a></li>\n <li><a href=\"/Computer_Science/Network/CDN.html\">CDN</a></li>\n <li><a href=\"/Computer_Science/Network/Hacking_.html\">Hacking</a></li>\n <li><a href=\"/Computer_Science/Network/Security_.html\">Security</a></li>\n </ul>\n </li>\n <li><a href=\"/Computer_Science/Database/\">Database</a>\n <ul>\n <li><a href=\"/Computer_Science/Database/SChema.html\">Schema</a></li>\n <li><a href=\"/Computer_Science/Database/Key.html\">Key</a></li>\n <li><a href=\"/Computer_Science/Database/Transaction.html\">Transaction</a></li>\n <li><a href=\"/Computer_Science/Database/Table.html\">Table</a></li>\n <li><a href=\"/Computer_Science/Database/View.html\">View</a></li>\n <li><a href=\"/Computer_Science/Database/Indexing.html\">Indexing</a></li>\n <li><a href=\"/Computer_Science/Database/Normalization.html\">Normalization</a></li>\n <li><a href=\"/Computer_Science/Database/Cursor.html\">Cursor</a></li>\n <li><a href=\"/Computer_Science/Database/Trigger.html\">Trigger</a></li>\n <li><a href=\"/Computer_Science/Database/Procedure.html\">Procedure</a></li>\n <li><a href=\"/Computer_Science/Database/ORMs.html\">ORMs</a></li>\n <li><a href=\"/Computer_Science/Database/Shared_Storage.html\">Shared Storage</a></li>\n <li><a href=\"/Computer_Science/Database/Data_Replication.html\">Data Replication</a></li>\n <li><a href=\"/Computer_Science/Database/N+1_Problem.html\">N+1 Problem</a></li>\n <li><a href=\"/Computer_Science/Database/CAP_Theorem.html\">CAP Theorem</a></li>\n <li><a href=\"/Computer_Science/Database/NOSQL/\">DBMS</a>\n <ul>\n <li><a href=\"/Computer_Science/Database/NOSQL/Mongo.html\">Mongo</a></li>\n <li><a href=\"/Computer_Science/Database/NOSQL/Redis.html\">Redis</a></li>\n <li><a href=\"/Computer_Science/Database/NOSQL/Cassandra.html\">Cassandra</a></li>\n <li><a href=\"/Computer_Science/Database/NOSQL/Couch.html\">Couch</a></li>\n <li><a href=\"/Computer_Science/Database/NOSQL/Dynamo.html\">Dynamo</a></li>\n <li><a href=\"/Computer_Science/Database/NOSQL/Rethink.html\">Rethink</a></li>\n </ul>\n </li>\n <li><a href=\"/Computer_Science/Database/RDBMS/\">RDBMS</a>\n <ul>\n <li><a href=\"/Computer_Science/Database/RDBMS/MySQL.html\">MySQL</a></li>\n <li><a href=\"/Computer_Science/Database/RDBMS/Oracle.html\">Oracle</a></li>\n <li><a href=\"/Computer_Science/Database/RDBMS/MS_SQL_Server.html\">MS SQL Server</a></li>\n <li><a href=\"/Computer_Science/Database/RDBMS/PostgreSQL.html\">PostgreSQL</a></li>\n <li><a href=\"/Computer_Science/Database/RDBMS/Pl_SQL.html\">Pl SQL</a></li>\n </ul>\n </li>\n </ul>\n </li>\n</ul>\n","dir":"/Computer_Science/","name":"README.md","path":"Computer_Science/README.md","url":"/Computer_Science/"},{"sort":1,"permalink":"/Computer_Science/OS/","layout":"default","title":"Operating System","content":"<h1 id=\"operating-system\">Operating System</h1>\n\n<ul>\n <li><a href=\"/Computer_Science/OS/Computer_Architecture.html\">Computer Architecture</a></li>\n <li><a href=\"/Computer_Science/OS/Processor.html\">Processor</a></li>\n <li><a href=\"/Computer_Science/OS/Kernel.html\">Kernel</a></li>\n <li><a href=\"/Computer_Science/OS/System_Call.html\">System Call</a></li>\n <li><a href=\"/Computer_Science/OS/Compiler_Interpreter.html\">Compile &amp; Interpreter</a></li>\n <li><a href=\"/Computer_Science/OS/Assembler.html\">Assembler</a></li>\n <li><a href=\"/Computer_Science/OS/Linker_Loader.html\">Linker &amp; Loader</a></li>\n <li><a href=\"/Computer_Science/OS/Process.html\">Process</a></li>\n <li><a href=\"/Computer_Science/OS/Thread.html\">Thread</a></li>\n <li><a href=\"/Computer_Science/OS/Interrupt_Polling_DMA.html\">Interrupt &amp; Polling &amp; DMA</a></li>\n <li><a href=\"/Computer_Science/OS/Shared_Memory.html\">Shared Memory</a></li>\n <li><a href=\"/Computer_Science/OS/IPC.html\">Inter Process Communication (IPC)</a></li>\n <li><a href=\"/Computer_Science/OS/RPC.html\">Remote Procedures Call (RPC)</a></li>\n <li><a href=\"/Computer_Science/OS/Multi_Thread.html\">Multi Thread</a></li>\n <li><a href=\"/Computer_Science/OS/Scheduling.html\">Scheduling</a></li>\n <li><a href=\"/Computer_Science/OS/Synchronization.html\">Synchronization</a></li>\n <li><a href=\"/Computer_Science/OS/Blocking.html\">Blocking</a></li>\n <li><a href=\"/Computer_Science/OS/Memory.html\">Memory</a></li>\n <li><a href=\"/Computer_Science/OS/Deadlock.html\">Deadlock</a></li>\n <li><a href=\"/Computer_Science/OS/Virtual%20Memory.html\">Virtual Memory</a></li>\n <li><a href=\"/Computer_Science/OS/Paging.html\">Paging</a></li>\n <li><a href=\"/Computer_Science/OS/File_System.html\">File System</a></li>\n <li><a href=\"/Computer_Science/OS/Floating_Point.html\">Floating Point</a></li>\n <li><a href=\"/Computer_Science/OS/Regex_Expression.html\">Regex Expression</a></li>\n <li><a href=\"/Computer_Science/OS/Virtual_Machine.html\">Virtual Machine</a></li>\n</ul>\n\n","dir":"/Computer_Science/OS/","name":"README.md","path":"Computer_Science/OS/README.md","url":"/Computer_Science/OS/"},{"sort":1,"layout":"default","title":"Computer Architecture","content":"<h1 id=\"computer-architecture\">Computer Architecture</h1>\n\n<ul>\n <li>컴퓨터 시스템의 구조는 크게 CPU, Memory, Disk, Input/Ouput으로 구성되며 각 모듈간 Bus를 통해 명령을 전달함</li>\n</ul>\n\n<p><strong>CPU</strong></p>\n\n<ul>\n <li>ALU (Arithmetic Logic Unit) : 산술 논리 연산장치로 CPU 내부에서 CPU로 들어온 데이터를 산술/논리 연산을 처리</li>\n <li>Contrul Unit : CPU의 부품으로서 Binary 디코더를 이용하여 명령을 다른 장치의 작동을 지시하는 제어 신호로 변환\n <ul>\n <li>대부분의 컴퓨터 Resource는 Control Unit이 관리하고 있으며, 입출력 장치 간 통신 및 CPU와 다른 장치 사이의 데이터 흐름을 제어</li>\n </ul>\n </li>\n <li>Register : CPU 내에 존재하여 가장 빠른 속도로 접근할 수 있는 Binary 데이터 저장장치로 현재 계산중인 값을 저장하는데 사용. 메인 메모리의 데이터를 Register로 이동한 후 연산을 수행하고 메인 메모리에 다시 저장하는 방식</li>\n <li>Clock Pulse : 동일한 System 내에 존재하는 장치와 회로의 동작을 동일한 주파수로 사용(동기화). 단위는 Hz로 1초당 수행하는 연산의 횟수를 의미\n <ul>\n <li>입력과 출력의 속도에 간극이 생기면, 정상적인 output을 발생시키지 못함</li>\n </ul>\n </li>\n</ul>\n\n<p><strong>BUS</strong></p>\n\n<ul>\n <li>System Bus : 하드웨어 간 데이터를 주고 받을 때 사용하는 통로로 데이터 버스, 주소 버스, 제어 버스로 구성됨 (단방향)</li>\n <li>I/O Bus : 시스템 버스에서 사우스브릿지 칩셋(I/O 컨트롤러)으로 전달한 명령을 입출력 장치로 전송하는 통로 (양방향)</li>\n <li>Memory Bus : 시스템 버스에서 노스브릿지 칩셋(메모리 컨트롤러)으로 전달한 명령을 메모리에 전송하는 통로 (양방향)</li>\n</ul>\n\n<p><strong>Cache</strong></p>\n\n<ul>\n <li>\n <p>데이터에 접근하는 데 많은 시간이 소요되는 경우, 필요한 데이터나 계산된 결과를 Cache에 저장하여 빠른 속도로 접근 가능</p>\n </li>\n <li>CPU 캐시 : Register와 Main Memory 사이에 존재하는 저장 공간. 데이터에 접근하는 속도가 빨라지기 때문에 CPU 처리속도가 증가</li>\n <li>디스크 캐시 : 디스크에 내장되어 있는 입출력 데이터를 저장하는 공간.</li>\n <li>Level1 Cache, Level2 Cache 등 다수의 캐시가 존재하며 숫자가 적을수록 CPU에 가깝고 속도가 빠르지만 용량은 적어짐</li>\n</ul>\n\n<p><strong>Memory</strong></p>\n\n<ul>\n <li>RAM(Random Access Memory) : 전원이 끊어지면 데이터가 소멸하는 휘발성 메모리로 일반적으로 PC의 주기억장치를 의미</li>\n <li>ROM(Read-Only Memory) : PC의 BIOS와 같이 전원이 끊어져도 기록이 남아있는 비휘발성 메모리. 일반적으로 한번 저장하면 새로운 값으로 대체할 수 없지만, 값이 대체되는 ROM도 있음 (반영구적 저장 장치)</li>\n</ul>\n\n<p><strong>DISK</strong></p>\n\n<ul>\n <li>HDD : 액추에이터 암을 이용하여 데이터의 위치를 알려주고, 엑추에이터 암 끝에 있는 Read/Write Head를 이용하여 회전 디스크 드라이버 플래터에 데이터를 읽고 작성\n <ul>\n <li>데이터를 읽고 쓰는데 기계적인 동작이 필요하므로 속도가 느리고 외부 충격에 의해 민감하여 대용량 데스크탑에 적절</li>\n </ul>\n </li>\n <li>SSD : 컨트롤러, 낸드플래시, D램 버퍼로 구성되어 있으며 기계적인 동작을 하는 부품이 없어 HDD보다 내구성이 좋고 속도가 빠름\n <ul>\n <li>컨트롤러 : 페이징으로 파일을 저장하여 사용하지 않는 셀에 빠르게 접근할 수 있게 함</li>\n <li>낸드플래시 : OR 플래시보다 Write/Delete 기능이 우수한 플래시 메모리로, 고도로 집적될수록 데이터 용량이 향상. 최근 3D 적층구조로 설계</li>\n <li>D램 버퍼 : 작업 부하가 많은 입출력의 캐시 역할을 수행하며 reading 성능을 높여줌</li>\n </ul>\n </li>\n</ul>\n\n<p><img src=\"/Computer_Science/OS/Img/Computer_Architecture.png\" alt=\"Computer_Structure\" /></p>\n\n<div style=\"text-align: right\"> https://slideplayer.com/slide/5893173/</div>\n\n","dir":"/Computer_Science/OS/","name":"Computer_Architecture.md","path":"Computer_Science/OS/Computer_Architecture.md","url":"/Computer_Science/OS/Computer_Architecture.html"},{"sort":1,"permalink":"/Computer_Science/Network/","layout":"default","title":"Network","content":"<h1 id=\"network\">Network</h1>\n\n<ul>\n <li><a href=\"/Computer_Science/Network/OSI.html\">OSI 7 Layers</a></li>\n <li><a href=\"/Computer_Science/Network/HTTP.html\">HTTP</a></li>\n <li><a href=\"/Computer_Science/Network/NAT.html\">NAT</a></li>\n <li><a href=\"/Computer_Science/Network/Class.html\">Network Class</a></li>\n <li><a href=\"/Computer_Science/Network/Subnet.html\">Subnet</a></li>\n <li><a href=\"/Computer_Science/Network/Casting.html\">Casting</a></li>\n <li><a href=\"/Computer_Science/Network/DNS.html\">DNS</a></li>\n <li><a href=\"/Computer_Science/Network/Forward_Redirect.html\">Forward &amp; Redirect</a></li>\n <li><a href=\"/Computer_Science/Network/URI.html\">URI &amp; URL &amp; URN</a></li>\n <li><a href=\"/Computer_Science/Network/Proxy.html\">Proxy</a></li>\n <li><a href=\"/Computer_Science/Network/Key.html\">Key</a></li>\n <li><a href=\"/Computer_Science/Network/Cookie_Session.html\">Cookie &amp; Session</a></li>\n <li><a href=\"/Computer_Science/Network/VPN.html\">VPN</a></li>\n <li><a href=\"/Computer_Science/Network/CDN.html\">CDN</a></li>\n <li><a href=\"/Computer_Science/Network/Hacking_.html\">Hacking</a></li>\n <li><a href=\"/Computer_Science/Network/Security_.html\">Security</a></li>\n</ul>\n\n","dir":"/Computer_Science/Network/","name":"README.md","path":"Computer_Science/Network/README.md","url":"/Computer_Science/Network/"},{"sort":1,"layout":"default","title":"OSI 7 Layers","content":"<h1 id=\"osi-7-layers\">OSI 7 Layers</h1>\n\n<p>상당히 요약된 내용으로 추후에 각 Layer를 Category로 하여 정리</p>\n\n<p><br /></p>\n\n<ul>\n <li>ISO에서 개발한 모델로, 네트워크 프로토콜 디자인과 통신을 계층으로 나누어 설명</li>\n <li>기능별로 계층을 나누었기 때문에 유지보수에 용이</li>\n</ul>\n\n<p>다중화 (Multiplexing) : 주로 Sender에서 동작하며, L7에서 L1으로 내려가면서 Header에 정보가 추가되는 방식</p>\n\n<p>DeMultiplexing : 주로 Receiver에서 동작하며, Header에 있는 Data를 추출</p>\n\n<p><br /></p>\n\n<p><img src=\"/Computer_Science/Network/Img/OSI.png\" alt=\"OSI\" /></p>\n\n<div style=\"text-align: right\"> Image ref : https://theautomization.com/osi-model/ </div>\n\n<p><br /></p>\n\n<p><br /></p>\n\n<h3 id=\"layer-1-physical-layer\">Layer 1. Physical Layer</h3>\n\n<p><strong>역할</strong></p>\n\n<ul>\n <li>데이터 프레임의 옥텟(8bit 배열)을 송수신</li>\n <li>반송파 감지, 무선매체 상태 (idle or busy) 확인 후 MAC 계층에 인폼</li>\n</ul>\n\n<p><strong>프로토콜</strong> : Coax, Fiber, Wireleess</p>\n\n<p><strong>장비</strong> : Hub, Repeater, Cable&amp;Connector</p>\n\n<p><strong>유선 Lan 통신</strong></p>\n\n<ul>\n <li>디지털 변조/복조 : Analog 신호와 Digital 신호 상호 변환\n <ul>\n <li>Transmitter : Analog -&gt; Digital</li>\n <li>Receiver : Digital -&gt; Analog</li>\n </ul>\n </li>\n <li>케이블이 연결된 Lan Port를 보면 좌/우측 하단 LED로 통신 상태 확인 가능</li>\n <li>좌측 LED : 주황색 - 연결됨 / 주황색(깜빡) - 데이터 전송중 / 꺼짐 - 연결 안 됨</li>\n <li>우측 LED : 녹색 - 1Gbps로 연결 / 주황색 : 100Mbps로 연결 / 꺼짐 - 10Mbps로 연결</li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>무선 Lan 통신</strong></p>\n\n<ul>\n <li>\n <p>IEEE 802.11 규격사용</p>\n </li>\n <li>\n <p>PLCP (물리 계층 수렴 처리) Layer</p>\n\n <ul>\n <li>\n <p>DataLink의 MAC 계층과 무선전송 프레임을 연결</p>\n </li>\n <li>\n <p>무선매체의 상태를 확인하고 DataLink Mac 계층에 인폼</p>\n </li>\n </ul>\n </li>\n <li>\n <p>PMD (물리매체 의존부) Layer</p>\n\n <ul>\n <li>PLCP 계층으로부터 넘겨받은 정보를 안테나를 통해 무선매체(atmosphere)에 전송</li>\n <li>데이터 변조, 인코딩/디코딩 등 신호 처리</li>\n </ul>\n </li>\n</ul>\n\n<p><br /></p>\n\n<ul>\n <li>FHSS (주파수 도약 확산 스펙트럼)\n <ul>\n <li>2.4GHz 대역에서 전송 신호를 만드는 기법</li>\n <li>시스템에 할당된 23개의 독립된 채널에서 약 79개의 주파수 내에서 작동</li>\n <li>Random Hopping Sequence로 주파수 채널을 도약해서 데이터 송수신\n <ul>\n <li>반송파 주파수가 일정하지 않아 주파수 도약이라고 함</li>\n </ul>\n </li>\n <li>채널에 간섭이 있는 경우, 다른 채널로 도약하므로 Single Logic 채널로 안정된 데이터 송수신</li>\n <li>보안이 요구되는 곳에서 사용</li>\n </ul>\n </li>\n <li>OFDM (직교 주파수 분할 다중화)\n <ul>\n <li>5GHz ISM 대역에서 전송 신호를 만드는 기법</li>\n <li>고속의 데이터열을 여러개의 채널로 병렬로 전송</li>\n <li>동적 채널할당 기법으로 주파슈 효율을 향상시킬 수 있음</li>\n <li>높은 전송속도가 요구되는 곳에서 사용</li>\n </ul>\n </li>\n</ul>\n\n<p><br /><br /></p>\n\n<h3 id=\"layer-2-datalink-layer\">Layer 2. DataLink Layer</h3>\n\n<p><strong>역할</strong></p>\n\n<ul>\n <li>물리계층에서 발생하는 오류를 감지하고 수정하며 신뢰성을 보장</li>\n <li>Flow Control : 메신지를 보낸 후, 응답을 받기 전까지 데이터 양을 제한</li>\n <li>Error Control : 손상된 패킷을 전송하지 못하도록 제어</li>\n</ul>\n\n<p><strong>프로토콜</strong> : Ethernet, SLIP, PPP, FDDI</p>\n\n<p><strong>장비</strong> : Bridge, Switch</p>\n\n<p><strong>Frame</strong></p>\n\n<ul>\n <li>DataLink Layer의 전송 단위</li>\n <li>이더넷 프레임의 경우 Data 크기가 46~1500바이트이며, 46보다 작은 경우 뒤에 Padding 적용\n <ul>\n <li>Preamble (7Byte) : 네트워크 장치가 수신기 클록을 쉽게 동기화 하여 비트 수준의 동기화 제공</li>\n <li>Start Frame delimiter (1byte) : Preamble의 끝을 나타내는 값으로, 이데넷 프레임의 시작을 나타냄</li>\n <li>Mac destinationa(6Byte) : 도착지 Mac 주소</li>\n <li>Mac Source(6Byte) : 출발지 Mac 주소</li>\n <li>802.1Q Tag(4Byte, Option) : 가상 Lan을 지원하는 네트워크 표준</li>\n <li>Type (2Byte) : 캡슐화 정의</li>\n <li>Data</li>\n <li>FCS (4Byte) : 오류 검출 부호에 추가된 통신 프로토콜</li>\n <li>Gap (12Byte): 패킷 간 간격</li>\n </ul>\n </li>\n <li>Frame의 크기는 고정 크기와 가변 크기로 나뉨\n <ul>\n <li>Fixed-size Frame : ATM, WAN에서 사용되며, 프레임 간 경계 불필요</li>\n <li>Variable-size Frame : LAN(Ethernet)에서 사용되며, 프레임 간 경계를 Stuffing으로 구분</li>\n </ul>\n </li>\n <li>전송할 수 있는 최대 크기인 MTU를 초과할 때는 Fragmentation/Segmentation 적용 필요</li>\n</ul>\n\n<p><br /></p>\n\n<ul>\n <li>MAC (미디어 엑세스 제어) 계층\n <ul>\n <li>물리적 영역이며, 매체 간 연결 방식을 제어. Physical Layer의 PLCP와 연결되어 있음</li>\n </ul>\n </li>\n <li>LLC (논리 로직 제어) 계층\n <ul>\n <li>논리적 영역이며, 프레임을 만듦. Network Layer와 연결되어 있음</li>\n </ul>\n </li>\n</ul>\n\n<p><br /><br /></p>\n\n<h3 id=\"layer-3-network-layer\">Layer 3. Network Layer</h3>\n\n<p><strong>역할</strong></p>\n\n<ul>\n <li>\n <p>다른 Network에 IP주소를 이용하여 패킷을 전송</p>\n </li>\n <li>여러개의 노드를 이용하여 경로를 찾아줌</li>\n <li>Routing : 네트워크 안에서 통신 데이터를 보낼 때 최적의 경로를 선택하거나 패킷을 전달하는 과정\n <ul>\n <li>데이터 링크 계층에서 인접 노드의 물리 주소를 헤더에 첨부하여 목적지까지 전송</li>\n <li>Shortest Path or Minimum time</li>\n </ul>\n </li>\n <li>Logical Addressing : 상위 계층에서 받은 데이터에 목적지의 논리 주소를 헤더에 추가</li>\n</ul>\n\n<p><strong>프로토콜</strong> : IP, IPSec, ICMP, IGMP</p>\n\n<p><strong>장비</strong> : 라우터, Multilayer 스위치</p>\n\n<p><br /></p>\n\n<ul>\n <li>IPSec (Internet Protocol Security)\n <ul>\n <li>각 IP패킷을 인증하고 암호화하는 IP Suite</li>\n </ul>\n </li>\n <li>ICMP (Internet Contol Message Protocol)\n <ul>\n <li>IP 패킷을 처리할 때 발생되는 문제를 알려주는 Protocol</li>\n <li>목적지의 통신 상태가 비정상적인 경우에 에러를 파악하기 위해 사용</li>\n <li>Unreachable, Timeout, Redirect 등 다양한 원인이 있음</li>\n <li>Windows에서 통신 유무를 하기 위한 Ping도 여기에 속함</li>\n </ul>\n </li>\n <li>IGMP (Internet Group Management Protocol)\n <ul>\n <li>서브넷 간 멀티 캐스트 패킷의 목적을 관리하기 위한 Protocol</li>\n <li>호스트가 Multicast Group에 가입하거나 탈퇴하는데 사용</li>\n <li>Multicast를 Group으로 관리하여 불필요한 트래픽을 줄일 수 있음</li>\n </ul>\n </li>\n</ul>\n\n<p><br /><br /></p>\n\n<h3 id=\"layer-4-transport-layer\">Layer 4. Transport Layer</h3>\n\n<p><strong>프로토콜</strong> : TCP, UDP, ECN, SCTP, DCCP</p>\n\n<p><strong>역할</strong></p>\n\n<ul>\n <li>애플리케이션 계층과 네트워크 계층 사이에서 프로세스 간 logical communication을 제공\n <ul>\n <li>Logical Communication : 프로세스 간 직접 연결된 것처럼 통신</li>\n </ul>\n </li>\n <li>end to end 통신을 다루는 Host Layers의 최하위 계층으로 신뢰성, 오류검출, 흐름제어 등을 수헹\n <ul>\n <li>상위 계층에서 데이터의 신뢰성, 효율성 등을 고려하지 않도록 함</li>\n </ul>\n </li>\n <li>source port, target port, sequence number, Ack Number 등의 데이터를 header에 붙여 세그먼트라는 패킷을 만듦</li>\n</ul>\n\n<p><strong>TCP/UDP</strong></p>\n\n<ul>\n <li>TCP : 연결지향, 신뢰성 있는(Ack Number)를 순차적 통신(sequence number)을 보장하며 연결시 3way handshaking, 해제시 4way handshaking으로 동작\n <ul>\n <li>Full Duplex, Point to Point 통신\n <ul>\n <li>Full Duplex : 전송이 양방향에서 동시에 발생할 수 있음</li>\n <li>Point to Point 통신 : 통신이 정확히 2개의 종단점을 가지고 있음</li>\n </ul>\n </li>\n <li>1 : 1 통신만 지원되며, 연결된 상태에서만 데이터 전송이 가능</li>\n </ul>\n </li>\n <li>UDP : 비연결 지향으로 발신자가 일방적으로 데이터를 전송\n <ul>\n <li>빠른 속도로 데이터를 전송하지만 신뢰성 부족</li>\n <li>데이터의 순서를 보장하지 않고 잘못된 path로 전송하며 데이터 유실 가능성도 있음\n <ul>\n <li>데이터를 정상적으로 보내지 못하는 경우, 재전송하지 않음</li>\n </ul>\n </li>\n <li>패킷의 오버헤드가 적어 네트워크 부하는 감소</li>\n </ul>\n </li>\n</ul>\n\n<p><strong>ECN(Explicit Congestion Notification)</strong></p>\n\n<ul>\n <li>패킷을 삭제하지 않고 네트워크 정체에 대한 알림을 받을 수 있음</li>\n <li>ECN 지원 엔드 포인트 간 사용할 수 있는 선택적 기능</li>\n <li>정체가 있는 경우, TCP/IP 통신에서는 패킷을 삭제하고 IP 헤더에 표시하여 정체를 알려줌</li>\n <li>수신자는 혼잡 표시를 발신자에게 보내 누락된 패킷을 감지한 것처럼 전송 속도를 줄임</li>\n</ul>\n\n<p><strong>SCTP(Stream Control Transmission Protocol)</strong></p>\n\n<ul>\n <li>TCP/UDP와 비슷한 역할을 하며, TCP의 연결 지향 프로토콜이며 혼잡 제어를 통해 신뢰성 있는 순차적 통신을 제공하며 UDP의 스트리밍 특징을 가지고 있는 프로토콜</li>\n <li>Multi Homing, Multi Streaming, 3Way/4Way Handshaking\n <ul>\n <li>Multi Hominig : 한 세션에서 다중 IP 주소를 이용하여 다중으로 접속을 유지하는 기술. path fail 시 idle 경로를 찾아 신뢰성 있는 데이터 전송</li>\n <li>Multi Streaming : 한 stream의 패킷 손실이 발생해도 다른 스트림에서도 데이터를 전송하기 때문에 연속적으로 전송 가능\n <ul>\n <li>FIFO로 구성되어 있기 때문에 여러 입력 포트에서 특정 출력 포트로 큐잉되는데, 패킷 손실 때 발생하는 Head of Blocking 문제 해결</li>\n </ul>\n </li>\n </ul>\n </li>\n</ul>\n\n<p><br /><br /></p>\n\n<h3 id=\"layer-5-session-layer\">Layer 5. Session Layer</h3>\n\n<p><strong>프로토콜</strong> : SSH, TLS</p>\n\n<p><strong>역할</strong></p>\n\n<ul>\n <li>세션의 설정, 관리 ,해제할 수 있음</li>\n <li>Multiplexing\n <ul>\n <li>전송 계층에 의해 제공되는 서비스로, 1개 이상의 메시지 스트림과 논리적인 연결을 할 수 있음\n <ul>\n <li>ex) 하나의 IP주소에서 동시에 여러개의 웹 사이트를 여는 것</li>\n </ul>\n </li>\n </ul>\n </li>\n <li>Dialogue 관리\n <ul>\n <li>토큰을 교환함으로써 Dialogue를 확인할 수 있음\n <ul>\n <li>토큰 : 데이터 토큰, 해제 토큰, 동기 토큰 등을 수행하는 권한</li>\n </ul>\n </li>\n </ul>\n </li>\n <li>에러 복구\n <ul>\n <li>Dialogue를 그룹화하고 에러가 발했을 때 중단된 대화 단위부터 재전송</li>\n </ul>\n </li>\n</ul>\n\n<p><br /><br /></p>\n\n<h3 id=\"layer-6-presentation-layer\">Layer 6. Presentation Layer</h3>\n\n<p><strong>프로토콜</strong> : SSL, TLS, ASCII, JPEG</p>\n\n<p><strong>역할</strong></p>\n\n<ul>\n <li>데이터를 표현할 수 있는 방식을 결정</li>\n <li>데이터를 암호/복호화, 압축 등 Application layer간 통신할 때 메시지가 동일한 의미로 전달될 수 있게 변환</li>\n</ul>\n\n<p><strong>SSH, SSL, TLS에 대해서는 따로 정리</strong></p>\n\n<p><br /><br /></p>\n\n<h3 id=\"layer-7-application-layer\">Layer 7. Application Layer</h3>\n\n<p><strong>프로토콜</strong> : HTTP, FTP, IRC, DNS, SMTP, POP3, IMAP 등</p>\n\n<p><strong>역할</strong></p>\n\n<ul>\n <li>OSI 최상위 계층으로, 응용 프로그램 단에서 사용자에게 인터페이스를 통해 통신 서비스를 제공</li>\n <li>프로세스 간 통신하기 위해 설계된 전송계층 프로토콜을 이용하여 연결</li>\n</ul>\n\n<p>HTTP (HyperText Transfer Protocol) : W3 상에서 정보를 주고받을 수 있는 프로토콜</p>\n\n<p>FTP (File Transfer Protocol) : TCP/IP 프로토콜을 이용하여 서버와 클라이언트 사이의 파일 전송</p>\n\n<p>IRC (Internet Relay Chat) : 텍스트 형태의 커뮤니케이션을 제공하는 프로토콜</p>\n\n<p>DNS (Domain Name System) : Url을 IP 주소로 변환하는 서비스</p>\n\n<p>SMTP (Simple Main Transfer Protocol) : 이메일을 전송할 때 사용하는 프로토콜</p>\n\n<p>POP3 (Post Office Protocol 3) : 이메일을 수신할 때 사용하는 프로토콜</p>\n\n<ul>\n <li>서버에서 클라이언트 PC로 메일을 다운로드 하는 방식</li>\n</ul>\n\n<p>IMAP (Internet Message Access Protocol) : 이메일을 수신할 때 사용하는 프로토콜</p>\n\n<ul>\n <li>이메일 서버와 동기화되기 때문에 다양한 장치에서 확인</li>\n</ul>\n\n<p><br /><br /></p>\n\n<h3 id=\"tcpip-인터넷-4계층\">TCP/IP 인터넷 4계층</h3>\n\n<ul>\n <li>\n <p>현재 수많은 프로그램의 통신 프로토콜로 TCP / IP이 사용되고 있기 때문에 OSI 7계층을 TCP/IP 4계층으로 표현하기도 하지만 수정이 필요한 표현임</p>\n\n <ul>\n <li>\n <p>TCP/IP 인터넷 4계층은 OSI 7계층의 하부 집합 중 하나 (네트워크 구조인 인터넷만을 기술)</p>\n </li>\n <li><strong>L1</strong> Network Access Layer (<strong>L1</strong> Physical <strong>+ L2</strong> Data Link)</li>\n <li><strong>L2</strong> Internet Layer (<strong>L3</strong> Network)</li>\n <li><strong>L3</strong> Transport Layer (<strong>L4</strong> Transport)</li>\n <li><strong>L4</strong> Application Layer (<strong>L5</strong> Session + <strong>L6</strong> Presentation + <strong>L7</strong> Application )</li>\n </ul>\n </li>\n</ul>\n","dir":"/Computer_Science/Network/","name":"OSI.md","path":"Computer_Science/Network/OSI.md","url":"/Computer_Science/Network/OSI.html"},{"sort":1,"permalink":"/Algorithm/ETC/","layout":"default","title":"ETC","content":"<h1 id=\"etc\">ETC</h1>\n\n<ul>\n <li>Categorize 하기에는 애매한 알고리즘들을 정리</li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>Algorithm List</strong></p>\n\n<ul>\n <li><a href=\"/Algorithm/ETC/Sliding_Windows.html\">Sliding Windows</a></li>\n <li><a href=\"/Algorithm/ETC/Binary_Search.html\">Binary Search</a></li>\n</ul>\n\n","dir":"/Algorithm/ETC/","name":"README.md","path":"Algorithm/ETC/README.md","url":"/Algorithm/ETC/"},{"sort":1,"layout":"default","title":"Sliding Windows","content":"<h1 id=\"sliding-windows\">Sliding Windows</h1>\n\n<p><strong>투포인터</strong></p>\n\n<ul>\n <li>배열에서 두개의 포인터(or cursor)를 이용하여 원하는 위치로 조작</li>\n <li>두 개의 포인터는 독립적으로 움직이기 때문에 특정 간격을 유지할 필요는 없음 (가변적인 부분배열)</li>\n <li>특정 값을 나타내는 구간합 같은 문제를 풀 때 용이하게 사용\n <ul>\n <li>Start/end pointer가 0에서 시작하며 커져야 할 때는 end를 오른쪽으로, 작아져야 할때는 start를 오른쪽으로 이동</li>\n </ul>\n </li>\n</ul>\n\n<p><strong>슬라이딩 윈드우</strong></p>\n\n<ul>\n <li>네트워크 전송 과정 중 메모리 버퍼에 있는 영역을 전송하고 동일한 크기의 다음 패킷을 전송하는 작업</li>\n <li>두 개의 포인터가 동일한 간격을 유지</li>\n</ul>\n\n<p>시간 복잡도는 배열의 크기 O(N)이며, 두 알고리즘 모두 일반화하기 어렵고 상황에 맞게 구현해야 됨</p>\n\n","dir":"/Algorithm/ETC/","name":"Sliding_Windows.md","path":"Algorithm/ETC/Sliding_Windows.md","url":"/Algorithm/ETC/Sliding_Windows.html"},{"sort":1,"layout":"default","title":"SOLID","content":"<h1 id=\"solid\">SOLID</h1>\n\n","dir":"/Study/Software_Development/OOP_Principle/","name":"SOLID.md","path":"Study/Software_Development/OOP_Principle/SOLID.md","url":"/Study/Software_Development/OOP_Principle/SOLID.html"},{"sort":1,"permalink":"/Study/Software_Development/OOP_Principle/","layout":"default","title":"OOP Principle","content":"<h1 id=\"oop-principle\">OOP Principle</h1>\n\n<ul>\n <li>Solid</li>\n <li>YAGNI</li>\n <li>KISS</li>\n <li>\n <p>DRY</p>\n </li>\n <li><a href=\"/Study/Software_Development/OOP_Principle/SOLID.html\">SOLID</a></li>\n <li><a href=\"/Study/Software_Development/OOP_Principle/Dry.html\">DRY</a></li>\n <li><a href=\"/Study/Software_Development/OOP_Principle/Kiss.html\">KISS</a></li>\n <li><a href=\"/Study/Software_Development/OOP_Principle/Yagni.html\">YAGNI</a></li>\n</ul>\n","dir":"/Study/Software_Development/OOP_Principle/","name":"README.md","path":"Study/Software_Development/OOP_Principle/README.md","url":"/Study/Software_Development/OOP_Principle/"},{"sort":1,"permalink":"/Study/","layout":"default","title":"Study","content":"<h1 id=\"study\">Study</h1>\n\n<ul>\n <li><a href=\"/Study/Monitoring/\">Monitoring</a>\n <ul>\n <li><a href=\"/Study/Monitoring/Infrastructure_Monitoring/\">Infrastructure Monitoring</a></li>\n <li><a href=\"/Study/Monitoring/Application_Monitoring/\">Application Monitoring</a></li>\n </ul>\n </li>\n <li><a href=\"/Study/Infrastructure/\">Infrastructure</a>\n <ul>\n <li><a href=\"/Study/Infrastructure/MSA.html\">MSA</a></li>\n <li><a href=\"/Study/Infrastructure/Provisioning/\">Provisioning</a>\n <ul>\n <li><a href=\"/Study/Infrastructure/Provisioning/Terraform.html\">Terraform</a></li>\n <li><a href=\"/Study/Infrastructure/Provisioning/CloudFormation.html\">CloudFormation</a></li>\n <li><a href=\"/Study/Infrastructure/Provisioning/Pulumi.html\">Pulumi</a></li>\n </ul>\n </li>\n <li><a href=\"/Study/Infrastructure/Docker/\">Docker</a>\n <ul>\n <li><a href=\"/Study/Infrastructure/Docker/What.html\">What is docker</a></li>\n </ul>\n </li>\n <li><a href=\"/Study/Infrastructure/Container_Orchestration/\">Container Orchestration</a>\n <ul>\n <li><a href=\"/Study/Infrastructure/Container_Orchestration/k8s.html\">Kubernetes</a></li>\n <li><a href=\"/Study/Infrastructure/Container_Orchestration/Docker_Swarm.html\">Docker Swarm</a></li>\n <li><a href=\"/Study/Infrastructure/Container_Orchestration/Mesos.html\">Mesos</a></li>\n <li><a href=\"/Study/Infrastructure/Container_Orchestration/Nomad.html\">Nomad</a></li>\n </ul>\n </li>\n <li><a href=\"/Study/Infrastructure/Configuration_Management/\">Configuration Management</a>\n <ul>\n <li><a href=\"/Study/Infrastructure/Configuration_Management/Ansible.html\">Ansible</a></li>\n <li><a href=\"/Study/Infrastructure/Configuration_Management/Chef.html\">Chef</a></li>\n <li><a href=\"/Study/Infrastructure/Configuration_Management/Puppet.html\">Puppet</a></li>\n <li><a href=\"/Study/Infrastructure/Configuration_Management/Salt.html\">Salt</a></li>\n </ul>\n </li>\n <li><a href=\"/Study/Infrastructure/CICD_Tool/\">CICD Tool</a>\n <ul>\n <li><a href=\"/Study/Infrastructure/CICD_Tool/Jenkins.html\">Jenkins</a></li>\n <li><a href=\"/Study/Infrastructure/CICD_Tool/Travis_CI.html\">TravisCI</a></li>\n <li><a href=\"/Study/Infrastructure/CICD_Tool/Azure_Devops.html\">Azure Devops</a></li>\n <li><a href=\"/Study/Infrastructure/CICD_Tool/Bamboo.html\">Bamboo</a></li>\n <li><a href=\"/Study/Infrastructure/CICD_Tool/TeamCity.html\">TeamCity</a></li>\n <li><a href=\"/Study/Infrastructure/CICD_Tool/Gitlab_CI.html\">Gitlab CI</a></li>\n <li><a href=\"/Study/Infrastructure/CICD_Tool/Github_Actions.html\">Github Actions</a></li>\n </ul>\n </li>\n </ul>\n </li>\n <li><a href=\"/Study/ETC/\">ETC</a>\n <ul>\n <li><a href=\"/Study/ETC/WordPress.html\">WordPress</a></li>\n </ul>\n </li>\n <li><a href=\"/Study/ELK/\">ELK</a>\n <ul>\n <li><a href=\"/Study/ELK/LogStash/\">Log Stash</a></li>\n <li><a href=\"/Study/ELK/Kibana/\">Kibana</a></li>\n <li><a href=\"/Study/ELK/Elastic_Search/\">Elastic Search</a></li>\n </ul>\n </li>\n <li><a href=\"/Study/Design_Pattern/\">Design Pattern</a>\n <ul>\n <li><a href=\"/Study/Design_Pattern/Structural/\">Structural Pattern</a>\n <ul>\n <li><a href=\"/Study/Design_Pattern/Structural/Adapter.html\">Adapter</a></li>\n <li><a href=\"/Study/Design_Pattern/Structural/Bridge.html\">Bridge</a></li>\n <li><a href=\"/Study/Design_Pattern/Structural/Composite.html\">Composite</a></li>\n <li><a href=\"/Study/Design_Pattern/Structural/Decorator.html\">Decorator</a></li>\n <li><a href=\"/Study/Design_Pattern/Structural/Facade.html\">Facade</a></li>\n <li><a href=\"/Study/Design_Pattern/Structural/Flyweight.html\">Flyweight</a></li>\n <li><a href=\"/Study/Design_Pattern/Structural/Proxy.html\">Proxy</a></li>\n </ul>\n </li>\n <li><a href=\"/Study/Design_Pattern/Creational/\">Creational Pattern</a>\n <ul>\n <li><a href=\"/Study/Design_Pattern/Creational/Abstract.html\">Abstract</a></li>\n <li><a href=\"/Study/Design_Pattern/Creational/Builder.html\">Builder</a></li>\n <li><a href=\"/Study/Design_Pattern/Creational/Factory_Methods.html\">Factory Methods</a></li>\n <li><a href=\"/Study/Design_Pattern/Creational/Prototype.html\">Prototype</a></li>\n <li><a href=\"/Study/Design_Pattern/Creational/Singleton.html\">Singleton</a></li>\n </ul>\n </li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/\">Behavioral Pattern</a>\n <ul>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Chain_Responsibility.html\">Chain of Responsibility</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Command.html\">Command</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Interpreter.html\">Interpreter</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Iterator.html\">Iterator</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Mediator.html\">Mediator</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Memento.html\">Memento</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Observer.html\">Observer</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/State.html\">State</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Strategy.html\">Strategy</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Template_Method.html\">Template Method</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Visitor.html\">Visitor</a></li>\n </ul>\n </li>\n </ul>\n </li>\n <li><a href=\"/Study/Software_Development/\">Software Development</a>\n <ul>\n <li><a href=\"/Study/Software_Development/OOP_Principle/\">OOP Principle</a>\n <ul>\n <li><a href=\"/Study/Software_Development/OOP_Principle/SOLID.html\">SOLID</a></li>\n <li><a href=\"/Study/Software_Development/OOP_Principle/Dry.html\">DRY</a></li>\n <li><a href=\"/Study/Software_Development/OOP_Principle/Kiss.html\">KISS</a></li>\n <li><a href=\"/Study/Software_Development/OOP_Principle/Yagni.html\">YAGNI</a></li>\n </ul>\n </li>\n <li><a href=\"/Study/Software_Development/Test_Driven_Development/\">Testing</a>\n <ul>\n <li><a href=\"/Study/Software_Development/Test_Driven_Development/Unit.html\">Unit Testing</a></li>\n <li><a href=\"/Study/Software_Development/Test_Driven_Development/Integration.html\">Integration Testing</a></li>\n <li><a href=\"/Study/Software_Development/Test_Driven_Development/Function.html\">Function Testing</a></li>\n </ul>\n </li>\n </ul>\n </li>\n <li><a href=\"/Study/Cloud/\">Cloud Providers</a>\n <ul>\n <li><a href=\"/Study/Cloud/Client_Side.html\">Client Side</a></li>\n <li><a href=\"/Study/Cloud/GCP/\">GCP</a></li>\n <li><a href=\"/Study/Cloud/Azure/\">Azure</a></li>\n <li><a href=\"/Study/Cloud/AWS/\">AWS</a></li>\n </ul>\n </li>\n <li><a href=\"/Study/Caching/\">Caching</a>\n <ul>\n <li><a href=\"/Study/Caching/Client_Side.html\">Client Side</a></li>\n <li><a href=\"/Study/Caching/Server_Side.html\">Server Side</a></li>\n </ul>\n </li>\n <li><a href=\"/Study/API/\">API</a>\n <ul>\n <li><a href=\"/Study/API/REST.html\">REST</a></li>\n <li><a href=\"/Study/API/JSON.html\">JSON</a></li>\n <li><a href=\"/Study/API/Authentication.html\">Authentication</a></li>\n <li><a href=\"/Study/API/SOAP.html\">SOAP</a></li>\n </ul>\n </li>\n</ul>\n","dir":"/Study/","name":"README.md","path":"Study/README.md","url":"/Study/"},{"sort":1,"layout":"default","title":"Maximum Flow","content":"<h1 id=\"maximum-flow\">Maximum Flow</h1>\n\n<ul>\n <li>There’s a cost on the edge. not only the weights</li>\n <li>The Flow of each edges must not exceed the capacity of each edges</li>\n <li>Excepts source and target node, Every node has the same input and output flow</li>\n <li>\n <p>If cost is negative value, It flows in the reverse way</p>\n </li>\n <li>there’s a many maximum flow algorithm</li>\n</ul>\n\n<p><strong>Ford-Fulkerson Algorithm</strong></p>\n\n<ul>\n <li>\n <p>If the flow is already flowing, reverse way flow is possible.</p>\n\n <ul>\n <li>It doesn’t actually applied, but it decreased by the reverse direction from the already flow</li>\n </ul>\n </li>\n <li>\n <p>Finding the augmenting path</p>\n </li>\n <li>\n <p>The path found must be a shortest path that has available capacity</p>\n\n <ul>\n <li>Found by DFS (Ford-Fulkerson), time complexity is always O(V+E)\n <ul>\n <li>there’s a two ways bottle-neck, Time complexity increases geometrically</li>\n </ul>\n </li>\n <li>Found by BFS (<strong>Edmonds-Karp Algorithm</strong>)\n <ul>\n <li>Maximum Time complexity is O(V*E^2)</li>\n </ul>\n </li>\n </ul>\n </li>\n <li>\n <p>Flow the smallest weight to all the edges that can go in the path.</p>\n </li>\n</ul>\n\n<hr />\n\n<ul>\n <li>\n <p>When passing through the edge only once, the capacity size is set to 1.</p>\n </li>\n <li>\n <p>but, when passing node at once, visit[array] is not sufficient all case.</p>\n\n <ul>\n <li>\n <p>If the the node has already visited, reverse flow is not considered.</p>\n </li>\n <li>\n <p>So, setting to edges, not nodes(visit array), can be considered reverse flow</p>\n </li>\n <li>\n <p>Creating Every node’s in / out and Flowing In to out.</p>\n </li>\n </ul>\n </li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#define MAX 100\n#define INF 100000000\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"n\">MAX</span><span class=\"p\">],</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"n\">MAX</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">];</span> \n<span class=\"n\">vector</span> <span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">];</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">maxFlow</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">fill</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">+</span> <span class=\"n\">MAX</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">queue</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">front</span><span class=\"p\">();</span>\n\t\t\t<span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"kt\">int</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t\t\t<span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">);</span>\n\t\t\t\t\t<span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">;</span> \n\t\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"k\">break</span><span class=\"p\">;</span> \n\t\t\t\t<span class=\"p\">}</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">end</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">flow</span> <span class=\"o\">=</span> <span class=\"n\">INF</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">start</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">flow</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">flow</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]][</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">start</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">flow</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">-=</span> <span class=\"n\">flow</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"n\">flow</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n\t<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">12</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">);</span>\n\t<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">11</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n\t<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n\t<span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">6</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">);</span>\n\t<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n\t<span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">);</span>\n\t<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n\t<span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">);</span>\n\t<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n\t<span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">9</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">);</span>\n\t<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n\t<span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">8</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">);</span>\n\t<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">);</span>\n\t<span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">][</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">9</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n\t<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">);</span>\n\t<span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">);</span>\n\t<span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">);</span>\n\t<span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">][</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">maxFlow</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">);</span>\n\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%d\"</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Graph/","name":"Maximum_Flow.md","path":"Algorithm/Graph/Maximum_Flow.md","url":"/Algorithm/Graph/Maximum_Flow.html"},{"sort":1,"permalink":"/Study/Monitoring/","layout":"default","title":"Monitoring","content":"<h1 id=\"monitoring\">Monitoring</h1>\n\n<ul>\n <li><a href=\"/Study/Monitoring/Infrastructure_Monitoring/\">Infrastructure Monitoring</a></li>\n <li><a href=\"/Study/Monitoring/Application_Monitoring/\">Application Monitoring</a></li>\n</ul>\n","dir":"/Study/Monitoring/","name":"README.md","path":"Study/Monitoring/README.md","url":"/Study/Monitoring/"},{"sort":1,"permalink":"/Study/Monitoring/Infrastructure_Monitoring/","layout":"default","title":"Infrastructure Monitoring","content":"<h1 id=\"infrastructure-monitoring\">Infrastructure Monitoring</h1>\n\n","dir":"/Study/Monitoring/Infrastructure_Monitoring/","name":"README.md","path":"Study/Monitoring/Infrastructure_Monitoring/README.md","url":"/Study/Monitoring/Infrastructure_Monitoring/"},{"sort":1,"permalink":"/Algorithm/Graph/","layout":"default","title":"Graph","content":"<h1 id=\"graph\">Graph</h1>\n\n<ul>\n <li>Node와 Edge로 구성되어 Graph 형태를 만드는 알고리즘</li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>Algorithm List</strong></p>\n\n<ul>\n <li><a href=\"/Algorithm/Graph/Maximum_Flow.html\">Maximum Flow</a></li>\n <li><a href=\"/Algorithm/Graph/Biparate_Matching.html\">Biparate Matching</a></li>\n <li><a href=\"/Algorithm/Graph/LCA.html\">LCA</a></li>\n <li><a href=\"/Algorithm/Graph/Strongly_Connected_Component.html\">Strongly Connected component</a></li>\n <li><a href=\"/Algorithm/Graph/Eulerian_Path.html\">Eulerian Path</a></li>\n <li><a href=\"/Algorithm/Graph/Minimum_Cut.html\">Minimum Cut</a></li>\n <li><a href=\"/Algorithm/Graph/Minimum_Cost_Maximum_Flow.html\">Maximum Cost and Minimum Flow</a></li>\n <li><a href=\"/Algorithm/Graph/Biconnected_Component.html\">Biconnected Component</a></li>\n</ul>\n\n","dir":"/Algorithm/Graph/","name":"README.md","path":"Algorithm/Graph/README.md","url":"/Algorithm/Graph/"},{"sort":1,"permalink":"/Study/Monitoring/Application_Monitoring/","layout":"default","title":"Application Monitoring","content":"<h1 id=\"application-monitoring\">Application Monitoring</h1>\n\n","dir":"/Study/Monitoring/Application_Monitoring/","name":"README.md","path":"Study/Monitoring/Application_Monitoring/README.md","url":"/Study/Monitoring/Application_Monitoring/"},{"sort":1,"permalink":"/Algorithm/Brute_Force/","layout":"default","title":"Brute Force","content":"<h1 id=\"brute-force\">Brute Force</h1>\n\n<ul>\n <li>암호학에서 특정 암호를 해독하기 위해 조합 가능한 문자열을 하나씩 대입하는 방법\n <ul>\n <li>문제를 해결하기 위해 가능한 모든 경우의 수를 빠른 컴퓨팅 속도를 이용하여 계산</li>\n </ul>\n </li>\n <li>암호학 외 분야에서도 많이 사용되는데, 원시적으로 푸는 방법\n <ul>\n <li>즉, 해가 존재할 것으로 판단되는 영역을 전체 탐색</li>\n </ul>\n </li>\n</ul>\n\n<p><strong>Algorithm List</strong></p>\n\n<ul>\n <li><a href=\"/Algorithm/Brute_Force/BFS.html\">BFS</a></li>\n <li><a href=\"/Algorithm/Brute_Force/DFS.html\">DFS</a></li>\n <li><a href=\"/Algorithm/Brute_Force/TSP.html\">TSP</a></li>\n</ul>\n\n","dir":"/Algorithm/Brute_Force/","name":"README.md","path":"Algorithm/Brute_Force/README.md","url":"/Algorithm/Brute_Force/"},{"sort":1,"layout":"default","title":"PRIM","content":"<h1 id=\"prim\">PRIM</h1>\n\n<ul>\n <li>MST의 대표적인 알고리즘으로 Node 기반으로 동작함</li>\n <li>최악의 시간 복잡도는 노드 갯수(V) 제곱인 O(\\(V^2\\))임</li>\n <li>E(edge count)는 항상 \\(V^2\\) 보다 작으므로, 우선순위 큐를 사용했을 때 시간 복잡도를 줄일 수 있다.\n <ul>\n <li>우선순위 큐에서 edge를 업데이트 하는데 O(\\(ElogV\\))이며, 방문하지 않은 노드를 우선순위 큐에 업데이트 하는데 O(\\(VlogV\\))이다\n <ul>\n <li>시간 복잡도는 (\\((E+V)logV) 이다.(\\)E » V인 경우, O(\\(ElogV\\)))</li>\n </ul>\n </li>\n </ul>\n </li>\n <li>크루스칼은 모든 edge를 우선순위 큐에 push하여 edge 기준으로 동작하지만, prim 알고리즘은 node를 방문할 때마다 해당 노드의 edge를 업데이트 함</li>\n <li>간선의 수가 많은 Dense Matrix인 경우 크루스칼보다 Prim 알고리즘을 적용하기 적합함</li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#include \"string.h\"\n#include &lt;queue&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"cp\">#define INF 1e9\n</span><span class=\"k\">typedef</span> <span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span><span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span><span class=\"kt\">int</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">pp</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">nodecount</span> <span class=\"o\">=</span> <span class=\"mi\">1001</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">nodecount</span><span class=\"p\">],</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">idx</span><span class=\"p\">;</span>\n<span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">pp</span><span class=\"o\">&gt;</span> <span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">nodecount</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">prim</span><span class=\"p\">(){</span>\n\t<span class=\"n\">priority_queue</span><span class=\"o\">&lt;</span><span class=\"n\">pp</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">pp</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">greater</span><span class=\"o\">&lt;</span><span class=\"n\">pp</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">pq</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span><span class=\"o\">&amp;</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"p\">])</span> <span class=\"n\">pq</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>  <span class=\"c1\">// start node edge upload</span>\n\t<span class=\"n\">fill_n</span><span class=\"p\">(</span><span class=\"n\">dist</span><span class=\"p\">,</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">dist</span><span class=\"p\">),</span><span class=\"n\">INF</span><span class=\"p\">);</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\n\t<span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">pq</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">()){</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">pq</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">().</span><span class=\"n\">first</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">pq</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">().</span><span class=\"n\">second</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span> <span class=\"c1\">// already visited</span>\n\t\t<span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">// start visited check</span>\n\t\t<span class=\"n\">pq</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span><span class=\"o\">&amp;</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\">// not visited</span>\n\t\t\t\t<span class=\"n\">pq</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"n\">ret</span> <span class=\"o\">+=</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n\t\t<span class=\"c1\">// if n count break;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n\n<span class=\"kt\">int</span> <span class=\"nf\">square_n</span><span class=\"p\">(){</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">graph</span><span class=\"p\">[</span><span class=\"n\">nodecount</span><span class=\"p\">][</span><span class=\"n\">nodecount</span><span class=\"p\">];</span>\n\t<span class=\"n\">fill_n</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">),</span><span class=\"n\">INF</span><span class=\"p\">);</span> <span class=\"c1\">// default : not arrived</span>\n\t<span class=\"c1\">// input graph a-&gt;b = c</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;=</span><span class=\"n\">nodecount</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"n\">graph</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>    \n\t<span class=\"kt\">int</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">nodecount</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">graph</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">];</span> <span class=\"c1\">// if not arrived, INF</span>\n\n\t<span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">// -1 is visited</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nodecount</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"c1\">// mst need to find minimum distance from node to node </span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">minimum</span> <span class=\"o\">=</span> <span class=\"n\">INF</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">nodecount</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">minimum</span> <span class=\"o\">&gt;</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\t\t\t\t\t<span class=\"n\">minimum</span> <span class=\"o\">=</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">];</span>\n\t\t\t\t\t<span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">j</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"p\">}</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"n\">ret</span> <span class=\"o\">+=</span> <span class=\"n\">minimum</span><span class=\"p\">;</span>  <span class=\"c1\">// plus minimum distance</span>\n\t\t<span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">// idx is visited (minimum distance index)</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">nodecount</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// update if  idx to j is smaller than original distance to j</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">graph</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">graph</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">];</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/MST/","name":"Prim.md","path":"Algorithm/MST/Prim.md","url":"/Algorithm/MST/Prim.html"},{"sort":1,"permalink":"/Algorithm/MST/","layout":"default","title":"Minimum Spanning Tree","content":"<h1 id=\"minimum-spanning-tree\">Minimum Spanning Tree</h1>\n\n<ul>\n <li>모든 노드를 연결하는 트리</li>\n <li>그래프에 n개의 노드가 있으면, 모든 노드는 n-1개의 edge로 연결됨</li>\n <li>모든 노드는 연결되어야 하며, n-1개의 edge로 연결되지 않으면 스패닝 트리가 아님</li>\n <li>방향성이 없는 edge로 구성됨</li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>Algorithm List</strong></p>\n\n<ul>\n <li><a href=\"/Algorithm/MST/Prim.html\">PRIM</a></li>\n <li><a href=\"/Algorithm/MST/Kruskal.html\">Kruskal</a></li>\n</ul>\n\n","dir":"/Algorithm/MST/","name":"README.md","path":"Algorithm/MST/README.md","url":"/Algorithm/MST/"},{"sort":1,"layout":"default","title":"Combination","content":"<h1 id=\"combination\">Combination</h1>\n\n<ul>\n <li>n개에서 k개를 뽑는 경우를 조합 (\\(n&lt;= k\\))\n <ul>\n <li>n개의 데이터에는 중복된 수가 존재하면 안 됨</li>\n </ul>\n </li>\n <li>\n <p>모든 경우의 수를 구하는 식은 아래와 같다.</p>\n\n\\[{n \\choose k} = {P(n,k) \\over k!} = {n! \\over k! \\times (n-k)!}\\]\n </li>\n <li>단순히 경우의 수가 아니라, 가능한 모든 경우의 수를 찾는 경우, 재귀를 통하여 전체 탐색이 필요</li>\n <li>\n <p>(1,2,4)에서 2가지를 선택하는 경우는 (1,2), (1,4), (2,4) 3가지가 존재. 동일한 수가 q개 있으면 \\(q!\\) 로 나눠줌</p>\n\n <ul>\n <li>\n\\[{_4C_2 \\over 2!} = 3\\]\n </li>\n </ul>\n </li>\n <li>재귀를 이용하는 방법, powerset을 이용하는 방법, 순열을 이용하는 방법이 있지만 순열을 이용하는 방법은 너무 느려서 사용을 안 하는 게 좋음</li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">_data</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">...</span> <span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">]</span>\n<span class=\"n\">t</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,...</span> <span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"c1\">// print</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">combination</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"n\">q</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">count2</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"c1\">// print loop</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"c1\">//  0</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">combination2</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span> \n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">Implement</span><span class=\"p\">(){</span>\n    <span class=\"n\">combination</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>  \n<span class=\"p\">}</span>\n\n</code></pre>  </div></div>\n\n<ul>\n <li>아래는 여러가지 경우를 구현하고 속도 비교</li>\n</ul>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;string.h&gt;\n#include &lt;time.h&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">t1</span><span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">],</span> <span class=\"n\">t2</span><span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">],</span> <span class=\"n\">t3</span><span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">count1</span><span class=\"p\">,</span> <span class=\"n\">count2</span><span class=\"p\">,</span> <span class=\"n\">count3</span><span class=\"p\">,</span> <span class=\"n\">count4</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">combination1</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">q</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"c1\">// Picked all n</span>\n        <span class=\"n\">count1</span><span class=\"o\">++</span><span class=\"p\">;</span>\n<span class=\"cm\">/*        for (int i = 0; i &lt; q; i++)\n            printf(\"%d \", t1[i]);\n        printf(\"\\n\");*/</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span> <span class=\"c1\">// n &gt;= k</span>\n    <span class=\"k\">else</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">t1</span><span class=\"p\">[</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>      <span class=\"c1\">// have to pick one out of n so parameter is n-1</span>\n        <span class=\"n\">combination1</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">);</span> <span class=\"c1\">// if data[n-1] is picked, so next is k-1</span>\n        <span class=\"n\">combination1</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">);</span>     <span class=\"c1\">// if data[n-1] is not picked, so next is k</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">combination2</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"n\">q</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"c1\">// k is filled to q</span>\n        <span class=\"n\">count2</span><span class=\"o\">++</span><span class=\"p\">;</span>\n<span class=\"cm\">/*        for (int i = 0; i &lt; q; i++)\n            printf(\"%d \", t2[i]);\n        cout &lt;&lt; endl;*/</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"c1\">//  0</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">t2</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">combination2</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"c1\">// insert t2[next_index]  by data[index] : index start from next_index</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// powerset</span>\n<span class=\"kt\">bool</span> <span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">];</span>\n<span class=\"kt\">void</span> <span class=\"nf\">combination3</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"n\">q</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"c1\">// visited count is q</span>\n        <span class=\"n\">count3</span><span class=\"o\">++</span><span class=\"p\">;</span>\n<span class=\"cm\">/*        for (int i = 0; i &lt; n; i++)\n        {\n            if (visited[i])\n                cout &lt;&lt; data1[i] &lt;&lt; \" \";\n        }\n        cout &lt;&lt; endl;*/</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n            <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span> <span class=\"c1\">// visited check</span>\n            <span class=\"n\">t3</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n            <span class=\"n\">combination3</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span> <span class=\"c1\">// uncheck</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// permutation</span>\n<span class=\"kt\">void</span> <span class=\"nf\">combination4</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span> <span class=\"n\">chk</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">k</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">chk</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">chk</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">chk</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span>\n    <span class=\"k\">do</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">count4</span><span class=\"o\">++</span><span class=\"p\">;</span>\n<span class=\"cm\">/*        for (int i = 0; i &lt; n; i++)\n        {\n            if (chk[i])\n                cout &lt;&lt; data1[i] &lt;&lt; \" \";\n        }\n        cout &lt;&lt; endl;*/</span>\n    <span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">next_permutation</span><span class=\"p\">(</span><span class=\"n\">chk</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">chk</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">()));</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">;</span>\n    <span class=\"n\">count1</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">count2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">count3</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">count4</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">clock_t</span> <span class=\"n\">start</span><span class=\"p\">;</span>\n    <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">clock</span><span class=\"p\">();</span>\n    <span class=\"n\">combination1</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">);</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Comb1 = \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">clock</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span> <span class=\"c1\">// 33175</span>\n    <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">clock</span><span class=\"p\">();</span>\n    <span class=\"n\">combination2</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Comb2 = \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">clock</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span> <span class=\"c1\">// 16497</span>\n    <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">clock</span><span class=\"p\">();</span>\n    <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">visited</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">visited</span><span class=\"p\">));</span>\n    <span class=\"n\">combination3</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Comb3 = \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">clock</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>  <span class=\"c1\">// 19655</span>\n    <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">clock</span><span class=\"p\">();</span>\n    <span class=\"n\">combination4</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">);</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Comb4 = \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">clock</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>  <span class=\"c1\">// 4944031</span>\n    <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">clock</span><span class=\"p\">();</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%d %d %d %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">count1</span><span class=\"p\">,</span> <span class=\"n\">count2</span><span class=\"p\">,</span> <span class=\"n\">count3</span><span class=\"p\">,</span> <span class=\"n\">count4</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h3 id=\"중복-조합-combination-with-repetition\">중복 조합 (Combination with repetition)</h3>\n\n<ul>\n <li>조합과 동일하나 중복을 허용하기 때문에 같은 숫자를 여러번 뽑는 것이 가능</li>\n <li>\n\\[_nH_k = _{n+k-1}C_{k-1}\\]\n </li>\n <li>(1,4)에서 3개를 뽑는 경우를 생각하면, (1,1,1), (1,1,4), (1,4,4),(4,4,4)\n <ul>\n <li>\n\\[_2H_3 = _4C_3 = 4\\]\n </li>\n </ul>\n </li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">_data</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">...</span> <span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">]</span>\n<span class=\"n\">t</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,...</span> <span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"c1\">// print</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">repeat_combination</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"n\">q</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">count</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"c1\">// print loop</span>\n      \t<span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">repeat_combination</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">);</span> \n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">Implement</span><span class=\"p\">(){</span>\n    <span class=\"n\">repeat_combination</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>  \n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>아래는 여러가지 경우를 구현하고 속도 비교</li>\n</ul>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;time.h&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"mi\">101</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">t1</span><span class=\"p\">[</span><span class=\"mi\">101</span><span class=\"p\">],</span> <span class=\"n\">t2</span><span class=\"p\">[</span><span class=\"mi\">101</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">count1</span><span class=\"p\">,</span> <span class=\"n\">count2</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">repeat_combination1</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">q</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"c1\">// Picked all n</span>\n        <span class=\"n\">count1</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"cm\">/*        for (int i = 0; i &lt; q; i++)\n                    printf(\"%d \", t1[i]);\n                printf(\"\\n\");*/</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">t1</span><span class=\"p\">[</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n        <span class=\"c1\">// have to pick one out of n so parameter is n-1</span>\n        <span class=\"n\">repeat_combination1</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">);</span> <span class=\"c1\">// if data[n-1] is picked and data[n] can be repeated, so next is k-1</span>\n        <span class=\"n\">repeat_combination1</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">);</span> <span class=\"c1\">// if data[n-1] is not picked, so next is k</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">repeat_combination2</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"n\">q</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"c1\">// k is filled to q</span>\n        <span class=\"n\">count2</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"cm\">/*        for (int i = 0; i &lt; q; i++)\n                    printf(\"%d \", t2[i]);\n                cout &lt;&lt; endl;*/</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">t2</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">repeat_combination2</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">);</span> <span class=\"c1\">// insert t2[next_index]  by data[index] : index start from next_index</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">;</span>\n    <span class=\"n\">count1</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">count2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">100</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 100H5</span>\n    <span class=\"kt\">clock_t</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">clock</span><span class=\"p\">();</span>\n    <span class=\"n\">repeat_combination1</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">);</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Comb1 = \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">clock</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span> <span class=\"c1\">// 662784</span>\n    <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">clock</span><span class=\"p\">();</span>\n    <span class=\"n\">repeat_combination2</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Comb2 = \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">clock</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span> <span class=\"c1\">// 321057</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%d %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">count1</span><span class=\"p\">,</span> <span class=\"n\">count2</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n","dir":"/Algorithm/Math/","name":"Combination.md","path":"Algorithm/Math/Combination.md","url":"/Algorithm/Math/Combination.html"},{"sort":1,"permalink":"/Study/Infrastructure/","layout":"default","title":"Infrastructure","content":"<h1 id=\"infrastructure\">Infrastructure</h1>\n\n<ul>\n <li><a href=\"/Study/Infrastructure/MSA.html\">MSA</a></li>\n <li><a href=\"/Study/Infrastructure/Provisioning/\">Provisioning</a>\n <ul>\n <li><a href=\"/Study/Infrastructure/Provisioning/Terraform.html\">Terraform</a></li>\n <li><a href=\"/Study/Infrastructure/Provisioning/CloudFormation.html\">CloudFormation</a></li>\n <li><a href=\"/Study/Infrastructure/Provisioning/Pulumi.html\">Pulumi</a></li>\n </ul>\n </li>\n <li><a href=\"/Study/Infrastructure/Docker/\">Docker</a>\n <ul>\n <li><a href=\"/Study/Infrastructure/Docker/What.html\">What is docker</a></li>\n </ul>\n </li>\n <li><a href=\"/Study/Infrastructure/Container_Orchestration/\">Container Orchestration</a>\n <ul>\n <li><a href=\"/Study/Infrastructure/Container_Orchestration/k8s.html\">Kubernetes</a></li>\n <li><a href=\"/Study/Infrastructure/Container_Orchestration/Docker_Swarm.html\">Docker Swarm</a></li>\n <li><a href=\"/Study/Infrastructure/Container_Orchestration/Mesos.html\">Mesos</a></li>\n <li><a href=\"/Study/Infrastructure/Container_Orchestration/Nomad.html\">Nomad</a></li>\n </ul>\n </li>\n <li><a href=\"/Study/Infrastructure/Configuration_Management/\">Configuration Management</a>\n <ul>\n <li><a href=\"/Study/Infrastructure/Configuration_Management/Ansible.html\">Ansible</a></li>\n <li><a href=\"/Study/Infrastructure/Configuration_Management/Chef.html\">Chef</a></li>\n <li><a href=\"/Study/Infrastructure/Configuration_Management/Puppet.html\">Puppet</a></li>\n <li><a href=\"/Study/Infrastructure/Configuration_Management/Salt.html\">Salt</a></li>\n </ul>\n </li>\n <li><a href=\"/Study/Infrastructure/CICD_Tool/\">CICD Tool</a>\n <ul>\n <li><a href=\"/Study/Infrastructure/CICD_Tool/Jenkins.html\">Jenkins</a></li>\n <li><a href=\"/Study/Infrastructure/CICD_Tool/Travis_CI.html\">TravisCI</a></li>\n <li><a href=\"/Study/Infrastructure/CICD_Tool/Azure_Devops.html\">Azure Devops</a></li>\n <li><a href=\"/Study/Infrastructure/CICD_Tool/Bamboo.html\">Bamboo</a></li>\n <li><a href=\"/Study/Infrastructure/CICD_Tool/TeamCity.html\">TeamCity</a></li>\n <li><a href=\"/Study/Infrastructure/CICD_Tool/Gitlab_CI.html\">Gitlab CI</a></li>\n <li><a href=\"/Study/Infrastructure/CICD_Tool/Github_Actions.html\">Github Actions</a></li>\n </ul>\n </li>\n</ul>\n\n","dir":"/Study/Infrastructure/","name":"README.md","path":"Study/Infrastructure/README.md","url":"/Study/Infrastructure/"},{"sort":1,"layout":"default","title":"Terraform","content":"<h1 id=\"terraform\">Terraform</h1>\n\n","dir":"/Study/Infrastructure/Provisioning/","name":"Terraform.md","path":"Study/Infrastructure/Provisioning/Terraform.md","url":"/Study/Infrastructure/Provisioning/Terraform.html"},{"sort":1,"permalink":"/Study/Infrastructure/Provisioning/","layout":"default","title":"Provisioning","content":"<h1 id=\"provisioning\">Provisioning</h1>\n\n<ul>\n <li><a href=\"/Study/Infrastructure/Provisioning/Terraform.html\">Terraform</a></li>\n <li><a href=\"/Study/Infrastructure/Provisioning/CloudFormation.html\">CloudFormation</a></li>\n <li><a href=\"/Study/Infrastructure/Provisioning/Pulumi.html\">Pulumi</a></li>\n</ul>\n\n","dir":"/Study/Infrastructure/Provisioning/","name":"README.md","path":"Study/Infrastructure/Provisioning/README.md","url":"/Study/Infrastructure/Provisioning/"},{"sort":1,"layout":"default","title":"MSA","content":"<h1 id=\"msa\">MSA</h1>\n\n","dir":"/Study/Infrastructure/","name":"MSA.md","path":"Study/Infrastructure/MSA.md","url":"/Study/Infrastructure/MSA.html"},{"sort":1,"layout":"default","title":"BFS","content":"<h1 id=\"bfs\">BFS</h1>\n\n<p><strong>Breath First Search</strong></p>\n\n<ul>\n <li>정점으로부터 가까운 노드를 방문하고 멀리 떨어진 노드를 방문하는 방법</li>\n <li>FIFO방식으로 동작하기 때문에 Queue를 이용함</li>\n <li>노드를 방문할 때마다 Queue에 넣고, 이미 방문한 노드는 skip한다</li>\n <li>Queue가 빌 때까지 while문을 돌면서 방문할 수 있는 모든 노드를 탐색</li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>인접 행렬</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">V</span> <span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">[</span><span class=\"n\">now</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">visit</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]){</span>\n\t\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>인접 행렬로 계산시 모든 노드를 탐색하기 때문에 시간 복잡도는 O(\\(V^2\\))이 됨\n <ul>\n <li>queue에 모든 노드를 넣기 때문에 O(V), 각 노드에서 모든 노드를 탐색할 때 O(V)</li>\n </ul>\n </li>\n</ul>\n\n<p><strong>인접리스트</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span> <span class=\"n\">graph</span><span class=\"p\">[</span><span class=\"n\">now</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">();</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">graph</span><span class=\"p\">[</span><span class=\"n\">now</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">visit</span><span class=\"p\">[</span><span class=\"n\">next</span><span class=\"p\">]){</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>인접 리스트로 계산시 시간 복잡도는 O(V+E)\n <ul>\n <li>queue에 모든 노드를 넣기 때문에 O(V), 각 노드에서 연결된 edge를 찾기 때문에 O(E)</li>\n </ul>\n </li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">BFS</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"p\">){</span>\n  <span class=\"n\">queue</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"n\">q</span><span class=\"p\">;</span>\n  <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"n\">visit</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n  <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">);</span>\n  <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">()){</span>\n    <span class=\"kt\">int</span> <span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">();</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">graph</span><span class=\"p\">[</span><span class=\"n\">now</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">();</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n      <span class=\"kt\">int</span> <span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">graph</span><span class=\"p\">[</span><span class=\"n\">now</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">];</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">visit</span><span class=\"p\">[</span><span class=\"n\">next</span><span class=\"p\">]){</span>\n        <span class=\"n\">visit</span><span class=\"p\">[</span><span class=\"n\">next</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n        <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">next</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Brute_Force/","name":"BFS.md","path":"Algorithm/Brute_Force/BFS.md","url":"/Algorithm/Brute_Force/BFS.html"},{"sort":1,"layout":"default","title":"What is docker","content":"<h1 id=\"what-is-docker\">What is docker</h1>\n\n<p>sd</p>\n","dir":"/Study/Infrastructure/Docker/","name":"What.md","path":"Study/Infrastructure/Docker/What.md","url":"/Study/Infrastructure/Docker/What.html"},{"sort":1,"permalink":"/Algorithm/Math/","layout":"default","title":"Math","content":"<h1 id=\"math\">Math</h1>\n\n<ul>\n <li>Mathmatic과 관련성 있는 알고리즘들</li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>Algorithm List</strong></p>\n\n<ul>\n <li><a href=\"/Algorithm/Math/Combination.html\">Combination</a></li>\n <li><a href=\"/Algorithm/Math/Permutation.html\">Permutaion</a></li>\n <li><a href=\"/Algorithm/Math/PowerSet.html\">PowerSet</a></li>\n <li><a href=\"/Algorithm/Math/Eratosthenes.html\">Eratosthenes</a></li>\n <li><a href=\"/Algorithm/Math/Euclidean.html\">Euclidean</a></li>\n <li><a href=\"/Algorithm/Math/Sudoku.html\">Sudoku</a></li>\n <li><a href=\"/Algorithm/Math/Geometry.html\">Geometry</a></li>\n <li><a href=\"/Algorithm/Math/Grid_Compress.html\">Grid Compression</a></li>\n</ul>\n\n","dir":"/Algorithm/Math/","name":"README.md","path":"Algorithm/Math/README.md","url":"/Algorithm/Math/"},{"sort":1,"permalink":"/Study/Infrastructure/Docker/","layout":"default","title":"Docker","content":"<h1 id=\"docker\">Docker</h1>\n\n<ul>\n <li><a href=\"/Study/Infrastructure/Docker/What.html\">What is docker</a></li>\n</ul>\n\n","dir":"/Study/Infrastructure/Docker/","name":"README.md","path":"Study/Infrastructure/Docker/README.md","url":"/Study/Infrastructure/Docker/"},{"sort":1,"permalink":"/Algorithm/","layout":"default","title":"Algorithm","content":"<h1 id=\"algorithm\">Algorithm</h1>\n\n<ul>\n <li><a href=\"/Algorithm/ETC/\">ETC</a>\n <ul>\n <li><a href=\"/Algorithm/ETC/Sliding_Windows.html\">Sliding Windows</a></li>\n <li><a href=\"/Algorithm/ETC/Binary_Search.html\">Binary Search</a></li>\n </ul>\n </li>\n <li><a href=\"/Algorithm/Graph/\">Graph</a>\n <ul>\n <li><a href=\"/Algorithm/Graph/Maximum_Flow.html\">Maximum Flow</a></li>\n <li><a href=\"/Algorithm/Graph/Biparate_Matching.html\">Biparate Matching</a></li>\n <li><a href=\"/Algorithm/Graph/LCA.html\">LCA</a></li>\n <li><a href=\"/Algorithm/Graph/Strongly_Connected_Component.html\">Strongly Connected component</a></li>\n <li><a href=\"/Algorithm/Graph/Eulerian_Path.html\">Eulerian Path</a></li>\n <li><a href=\"/Algorithm/Graph/Minimum_Cut.html\">Minimum Cut</a></li>\n <li><a href=\"/Algorithm/Graph/Minimum_Cost_Maximum_Flow.html\">Maximum Cost and Minimum Flow</a></li>\n <li><a href=\"/Algorithm/Graph/Biconnected_Component.html\">Biconnected Component</a></li>\n </ul>\n </li>\n <li><a href=\"/Algorithm/Brute_Force/\">Brute Force</a>\n <ul>\n <li><a href=\"/Algorithm/Brute_Force/BFS.html\">BFS</a></li>\n <li><a href=\"/Algorithm/Brute_Force/DFS.html\">DFS</a></li>\n <li><a href=\"/Algorithm/Brute_Force/TSP.html\">TSP</a></li>\n </ul>\n </li>\n <li><a href=\"/Algorithm/MST/\">Minimum Spanning Tree</a>\n <ul>\n <li><a href=\"/Algorithm/MST/Prim.html\">PRIM</a></li>\n <li><a href=\"/Algorithm/MST/Kruskal.html\">Kruskal</a></li>\n </ul>\n </li>\n <li><a href=\"/Algorithm/Math/\">Math</a>\n <ul>\n <li><a href=\"/Algorithm/Math/Combination.html\">Combination</a></li>\n <li><a href=\"/Algorithm/Math/Permutation.html\">Permutaion</a></li>\n <li><a href=\"/Algorithm/Math/PowerSet.html\">PowerSet</a></li>\n <li><a href=\"/Algorithm/Math/Eratosthenes.html\">Eratosthenes</a></li>\n <li><a href=\"/Algorithm/Math/Euclidean.html\">Euclidean</a></li>\n <li><a href=\"/Algorithm/Math/Sudoku.html\">Sudoku</a></li>\n <li><a href=\"/Algorithm/Math/Geometry.html\">Geometry</a></li>\n <li><a href=\"/Algorithm/Math/Grid_Compress.html\">Grid Compression</a></li>\n </ul>\n </li>\n <li><a href=\"/Algorithm/Shortest_Path/\">Shortest Paths</a>\n <ul>\n <li><a href=\"/Algorithm/Shortest_Path/A_Star.html\">A*</a></li>\n <li><a href=\"/Algorithm/Shortest_Path/Dijkstra.html\">Dijkstra</a></li>\n <li><a href=\"/Algorithm/Shortest_Path/Bellman_Ford.html\">Bellman Ford</a></li>\n <li><a href=\"/Algorithm/Shortest_Path/Floyd_Warshall.html\">Floyd Warshall</a></li>\n <li><a href=\"/Algorithm/Shortest_Path/DAG.html\">Directed Acycle Graph</a></li>\n </ul>\n </li>\n <li><a href=\"/Algorithm/Sort/\">Sort</a>\n <ul>\n <li><a href=\"/Algorithm/Sort/Bubble.html\">Bubble Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Quick.html\">Quick Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Merge.html\">Merge Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Counting.html\">Counting Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Heap.html\">Heap Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Insertion.html\">Insertion Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Selection.html\">Selection Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Sequential.html\">Sequential Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Intro.html\">Intro Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Bucket.html\">Bucket Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Radix.html\">Radix Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Shell.html\">Shell Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Topological.html\">Topological Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Tim.html\">Tim Sort</a></li>\n </ul>\n </li>\n <li><a href=\"/Algorithm/String/\">String</a>\n <ul>\n <li><a href=\"/Algorithm/String/Palindrome.html\">Palindrome</a></li>\n <li><a href=\"/Algorithm/String/Suffix_Array.html\">Suffix Array</a></li>\n <li><a href=\"/Algorithm/String/LCP.html\">LCP</a></li>\n <li><a href=\"/Algorithm/String/Rabin_Karp.html\">Rabin Karp</a></li>\n <li><a href=\"/Algorithm/String/KMP.html\">KMP</a></li>\n <li><a href=\"/Algorithm/String/Boyer_Moore.html\">Boyer Moore</a></li>\n </ul>\n </li>\n <li><a href=\"/Algorithm/DP/\">Dynamic Programming</a>\n <ul>\n <li><a href=\"/Algorithm/DP/Prefix_Sum.html\">Prefix Sum</a></li>\n <li><a href=\"/Algorithm/DP/Kanpsack.html\">Knapsack</a></li>\n <li><a href=\"/Algorithm/DP/LIS.html\">LIS (Longest Increasing Subsequence)</a></li>\n <li><a href=\"/Algorithm/DP/LCS.html\">LCS</a></li>\n <li><a href=\"/Algorithm/DP/Edit_Distance.html\">Edit Distance</a></li>\n <li><a href=\"/Algorithm/DP/Matrix_Chain_Multiplication.html\">Matrix Chain Multiplication</a></li>\n </ul>\n </li>\n</ul>\n","dir":"/Algorithm/","name":"README.md","path":"Algorithm/README.md","url":"/Algorithm/"},{"sort":1,"layout":"default","title":"A*","content":"<h1 id=\"a\">A*</h1>\n\n<ul>\n <li>source / target 노드가 단일 노드로 명확하게 주어 졌을 때 사용</li>\n <li>huristic 관련 내용은 추후 정리</li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Shortest_Path/","name":"A_Star.md","path":"Algorithm/Shortest_Path/A_Star.md","url":"/Algorithm/Shortest_Path/A_Star.html"},{"sort":1,"layout":"default","title":"Kubernetes","content":"# Kubernetes\n\n","dir":"/Study/Infrastructure/Container_Orchestration/","name":"k8s.md","path":"Study/Infrastructure/Container_Orchestration/k8s.md","url":"/Study/Infrastructure/Container_Orchestration/k8s.html"},{"sort":1,"permalink":"/Study/Infrastructure/Container_Orchestration/","layout":"default","title":"Container Orchestration","content":"<h1 id=\"container-orchestration\">Container Orchestration</h1>\n\n<ul>\n <li><a href=\"/Study/Infrastructure/Container_Orchestration/k8s.html\">Kubernetes</a></li>\n <li><a href=\"/Study/Infrastructure/Container_Orchestration/Docker_Swarm.html\">Docker Swarm</a></li>\n <li><a href=\"/Study/Infrastructure/Container_Orchestration/Mesos.html\">Mesos</a></li>\n <li><a href=\"/Study/Infrastructure/Container_Orchestration/Nomad.html\">Nomad</a></li>\n</ul>\n\n","dir":"/Study/Infrastructure/Container_Orchestration/","name":"README.md","path":"Study/Infrastructure/Container_Orchestration/README.md","url":"/Study/Infrastructure/Container_Orchestration/"},{"sort":1,"layout":"default","title":"Unit Testing","content":"<h1 id=\"unit-testing\">Unit Testing</h1>\n\n<p>Description</p>\n\n<p>sd</p>\n","dir":"/Study/Software_Development/Test_Driven_Development/","name":"Unit.md","path":"Study/Software_Development/Test_Driven_Development/Unit.md","url":"/Study/Software_Development/Test_Driven_Development/Unit.html"},{"sort":1,"permalink":"/Study/Infrastructure/Configuration_Management/","layout":"default","title":"Configuration Management","content":"<h1 id=\"configuration-management\">Configuration Management</h1>\n\n<ul>\n <li><a href=\"/Study/Infrastructure/Configuration_Management/Ansible.html\">Ansible</a></li>\n <li><a href=\"/Study/Infrastructure/Configuration_Management/Chef.html\">Chef</a></li>\n <li><a href=\"/Study/Infrastructure/Configuration_Management/Puppet.html\">Puppet</a></li>\n <li><a href=\"/Study/Infrastructure/Configuration_Management/Salt.html\">Salt</a></li>\n</ul>\n\n","dir":"/Study/Infrastructure/Configuration_Management/","name":"README.md","path":"Study/Infrastructure/Configuration_Management/README.md","url":"/Study/Infrastructure/Configuration_Management/"},{"sort":1,"permalink":"/Algorithm/Shortest_Path/","layout":"default","title":"Shortest Paths","content":"<h1 id=\"shortest-paths\">Shortest Paths</h1>\n\n<ul>\n <li>\n <p>최단 경로 문제는 한 노드에서 다른 노드로 갈 때, 최소의 가중치를 갖는 경로를 찾는 알고리즘이다.</p>\n </li>\n <li>\n <p>방향성 / 가중치 / cycle을 갖는 그래프의 최단경로 알고리즘 종류</p>\n\n <ul>\n <li>단일 source / 단일 target : <a href=\"https://jeothen.github.io/Algorithm/Shortest_Path/A_Star.html\">A*</a></li>\n <li>단일 source / 다수 target : <a href=\"https://jeothen.github.io/Algorithm/Shortest_Path/Dijkstra.html\">dijkstra</a>, <a href=\"https://jeothen.github.io/Algorithm/Shortest_Path/Bellman_Ford.html\">bellman-ford</a></li>\n <li>\n <p>모든 source / 다수 target : <a href=\"https://jeothen.github.io/Algorithm/Shortest_Path/Floyd_Warshall.html\">Floyd-warshall</a></p>\n </li>\n <li>cycle이 아닌 경우 : <a href=\"https://jeothen.github.io/Algorithm/Shortest_Path/DAG.html\">DAG</a></li>\n </ul>\n </li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>Algorithm List</strong></p>\n\n<ul>\n <li><a href=\"/Algorithm/Shortest_Path/A_Star.html\">A*</a></li>\n <li><a href=\"/Algorithm/Shortest_Path/Dijkstra.html\">Dijkstra</a></li>\n <li><a href=\"/Algorithm/Shortest_Path/Bellman_Ford.html\">Bellman Ford</a></li>\n <li><a href=\"/Algorithm/Shortest_Path/Floyd_Warshall.html\">Floyd Warshall</a></li>\n <li><a href=\"/Algorithm/Shortest_Path/DAG.html\">Directed Acycle Graph</a></li>\n</ul>\n\n","dir":"/Algorithm/Shortest_Path/","name":"README.md","path":"Algorithm/Shortest_Path/README.md","url":"/Algorithm/Shortest_Path/"},{"sort":1,"layout":"default","title":"Bubble Sort","content":"<h1 id=\"bubble-sort\">Bubble Sort</h1>\n\n<ul>\n <li>During 2 loops, swap is applied to all indices within each loop</li>\n <li>\n <p>The two loops must move in opposite directions to move all indices from end to end.</p>\n </li>\n <li>So , time complexity is O(N^2)</li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n\n<span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"nf\">bubblesort</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">length</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">){</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span> <span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">){</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"n\">arr</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(){</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">};</span>\n\t<span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n\t<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">bubblesort</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n\t\t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">res</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Sort/","name":"Bubble.md","path":"Algorithm/Sort/Bubble.md","url":"/Algorithm/Sort/Bubble.html"},{"sort":1,"layout":"default","title":"Ansible","content":"<h1 id=\"ansible\">Ansible</h1>\n\n","dir":"/Study/Infrastructure/Configuration_Management/","name":"Ansible.md","path":"Study/Infrastructure/Configuration_Management/Ansible.md","url":"/Study/Infrastructure/Configuration_Management/Ansible.html"},{"sort":1,"permalink":"/Study/Infrastructure/CICD_Tool/","layout":"default","title":"CICD Tool","content":"<h1 id=\"cicd-tool\">CICD Tool</h1>\n\n<ul>\n <li><a href=\"/Study/Infrastructure/CICD_Tool/Jenkins.html\">Jenkins</a></li>\n <li><a href=\"/Study/Infrastructure/CICD_Tool/Travis_CI.html\">TravisCI</a></li>\n <li><a href=\"/Study/Infrastructure/CICD_Tool/Azure_Devops.html\">Azure Devops</a></li>\n <li><a href=\"/Study/Infrastructure/CICD_Tool/Bamboo.html\">Bamboo</a></li>\n <li><a href=\"/Study/Infrastructure/CICD_Tool/TeamCity.html\">TeamCity</a></li>\n <li><a href=\"/Study/Infrastructure/CICD_Tool/Gitlab_CI.html\">Gitlab CI</a></li>\n <li><a href=\"/Study/Infrastructure/CICD_Tool/Github_Actions.html\">Github Actions</a></li>\n</ul>\n\n","dir":"/Study/Infrastructure/CICD_Tool/","name":"README.md","path":"Study/Infrastructure/CICD_Tool/README.md","url":"/Study/Infrastructure/CICD_Tool/"},{"sort":1,"layout":"default","title":"Jenkins","content":"<h1 id=\"jenkins\">Jenkins</h1>\n\n","dir":"/Study/Infrastructure/CICD_Tool/","name":"Jenkins.md","path":"Study/Infrastructure/CICD_Tool/Jenkins.md","url":"/Study/Infrastructure/CICD_Tool/Jenkins.html"},{"sort":1,"layout":"default","title":"WordPress","content":"<h1 id=\"wordpress\">WordPress</h1>\n\n","dir":"/Study/ETC/","name":"WordPress.md","path":"Study/ETC/WordPress.md","url":"/Study/ETC/WordPress.html"},{"sort":1,"permalink":"/Study/ETC/","layout":"default","title":"ETC","content":"<h1 id=\"etc\">ETC</h1>\n\n<ul>\n <li><a href=\"/Study/ETC/WordPress.html\">WordPress</a></li>\n</ul>\n","dir":"/Study/ETC/","name":"README.md","path":"Study/ETC/README.md","url":"/Study/ETC/"},{"sort":1,"permalink":"/Study/ELK/","layout":"default","title":"ELK","content":"<h1 id=\"elk\">ELK</h1>\n\n<ul>\n <li><a href=\"/Study/ELK/LogStash/\">Log Stash</a></li>\n <li><a href=\"/Study/ELK/Kibana/\">Kibana</a></li>\n <li><a href=\"/Study/ELK/Elastic_Search/\">Elastic Search</a></li>\n</ul>\n\n","dir":"/Study/ELK/","name":"README.md","path":"Study/ELK/README.md","url":"/Study/ELK/"},{"sort":1,"permalink":"/Study/Software_Development/Test_Driven_Development/","layout":"default","title":"Testing","content":"<h1 id=\"testing\">Testing</h1>\n\n<ul>\n <li><a href=\"/Study/Software_Development/Test_Driven_Development/Unit.html\">Unit Testing</a></li>\n <li><a href=\"/Study/Software_Development/Test_Driven_Development/Integration.html\">Integration Testing</a></li>\n <li><a href=\"/Study/Software_Development/Test_Driven_Development/Function.html\">Function Testing</a></li>\n</ul>\n\n","dir":"/Study/Software_Development/Test_Driven_Development/","name":"README.md","path":"Study/Software_Development/Test_Driven_Development/README.md","url":"/Study/Software_Development/Test_Driven_Development/"},{"sort":1,"permalink":"/Algorithm/Sort/","layout":"default","title":"Sort","content":"<h1 id=\"sort\">Sort</h1>\n\n<ul>\n <li>행렬을 정렬하는 알고리즘들 집합</li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>Algorithm List</strong></p>\n\n<ul>\n <li><a href=\"/Algorithm/Sort/Bubble.html\">Bubble Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Quick.html\">Quick Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Merge.html\">Merge Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Counting.html\">Counting Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Heap.html\">Heap Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Insertion.html\">Insertion Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Selection.html\">Selection Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Sequential.html\">Sequential Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Intro.html\">Intro Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Bucket.html\">Bucket Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Radix.html\">Radix Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Shell.html\">Shell Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Topological.html\">Topological Sort</a></li>\n <li><a href=\"/Algorithm/Sort/Tim.html\">Tim Sort</a></li>\n</ul>\n\n","dir":"/Algorithm/Sort/","name":"README.md","path":"Algorithm/Sort/README.md","url":"/Algorithm/Sort/"},{"sort":1,"permalink":"/Study/ELK/LogStash/","layout":"default","title":"Log Stash","content":"<h1 id=\"log-stash\">Log Stash</h1>\n\n","dir":"/Study/ELK/LogStash/","name":"README.md","path":"Study/ELK/LogStash/README.md","url":"/Study/ELK/LogStash/"},{"sort":1,"permalink":"/Study/ELK/Kibana/","layout":"default","title":"Kibana","content":"<h1 id=\"kibana\">Kibana</h1>\n\n","dir":"/Study/ELK/Kibana/","name":"README.md","path":"Study/ELK/Kibana/README.md","url":"/Study/ELK/Kibana/"},{"sort":1,"permalink":"/Study/ELK/Elastic_Search/","layout":"default","title":"Elastic Search","content":"<h1 id=\"elastic-search\">Elastic Search</h1>\n\n","dir":"/Study/ELK/Elastic_Search/","name":"README.md","path":"Study/ELK/Elastic_Search/README.md","url":"/Study/ELK/Elastic_Search/"},{"sort":1,"permalink":"/Study/Design_Pattern/Structural/","layout":"default","title":"Structural Pattern","content":"<h1 id=\"structural-pattern\">Structural Pattern</h1>\n\n<ul>\n <li><a href=\"/Study/Design_Pattern/Structural/Adapter.html\">Adapter</a></li>\n <li><a href=\"/Study/Design_Pattern/Structural/Bridge.html\">Bridge</a></li>\n <li><a href=\"/Study/Design_Pattern/Structural/Composite.html\">Composite</a></li>\n <li><a href=\"/Study/Design_Pattern/Structural/Decorator.html\">Decorator</a></li>\n <li><a href=\"/Study/Design_Pattern/Structural/Facade.html\">Facade</a></li>\n <li><a href=\"/Study/Design_Pattern/Structural/Flyweight.html\">Flyweight</a></li>\n <li><a href=\"/Study/Design_Pattern/Structural/Proxy.html\">Proxy</a></li>\n</ul>\n\n","dir":"/Study/Design_Pattern/Structural/","name":"README.md","path":"Study/Design_Pattern/Structural/README.md","url":"/Study/Design_Pattern/Structural/"},{"sort":1,"layout":"default","title":"Adapter","content":"<h1 id=\"adapter\">Adapter</h1>\n\n","dir":"/Study/Design_Pattern/Structural/","name":"Adapter.md","path":"Study/Design_Pattern/Structural/Adapter.md","url":"/Study/Design_Pattern/Structural/Adapter.html"},{"sort":1,"permalink":"/Study/Design_Pattern/","layout":"default","title":"Design Pattern","content":"<h1 id=\"design-pattern\">Design Pattern</h1>\n\n<ul>\n <li><a href=\"/Study/Design_Pattern/Structural/\">Structural Pattern</a>\n <ul>\n <li><a href=\"/Study/Design_Pattern/Structural/Adapter.html\">Adapter</a></li>\n <li><a href=\"/Study/Design_Pattern/Structural/Bridge.html\">Bridge</a></li>\n <li><a href=\"/Study/Design_Pattern/Structural/Composite.html\">Composite</a></li>\n <li><a href=\"/Study/Design_Pattern/Structural/Decorator.html\">Decorator</a></li>\n <li><a href=\"/Study/Design_Pattern/Structural/Facade.html\">Facade</a></li>\n <li><a href=\"/Study/Design_Pattern/Structural/Flyweight.html\">Flyweight</a></li>\n <li><a href=\"/Study/Design_Pattern/Structural/Proxy.html\">Proxy</a></li>\n </ul>\n </li>\n <li><a href=\"/Study/Design_Pattern/Creational/\">Creational Pattern</a>\n <ul>\n <li><a href=\"/Study/Design_Pattern/Creational/Abstract.html\">Abstract</a></li>\n <li><a href=\"/Study/Design_Pattern/Creational/Builder.html\">Builder</a></li>\n <li><a href=\"/Study/Design_Pattern/Creational/Factory_Methods.html\">Factory Methods</a></li>\n <li><a href=\"/Study/Design_Pattern/Creational/Prototype.html\">Prototype</a></li>\n <li><a href=\"/Study/Design_Pattern/Creational/Singleton.html\">Singleton</a></li>\n </ul>\n </li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/\">Behavioral Pattern</a>\n <ul>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Chain_Responsibility.html\">Chain of Responsibility</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Command.html\">Command</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Interpreter.html\">Interpreter</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Iterator.html\">Iterator</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Mediator.html\">Mediator</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Memento.html\">Memento</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Observer.html\">Observer</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/State.html\">State</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Strategy.html\">Strategy</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Template_Method.html\">Template Method</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Visitor.html\">Visitor</a></li>\n </ul>\n </li>\n</ul>\n\n","dir":"/Study/Design_Pattern/","name":"README.md","path":"Study/Design_Pattern/README.md","url":"/Study/Design_Pattern/"},{"sort":1,"permalink":"/Study/Design_Pattern/Creational/","layout":"default","title":"Creational Pattern","content":"<h1 id=\"creational-pattern\">Creational Pattern</h1>\n\n<ul>\n <li><a href=\"/Study/Design_Pattern/Creational/Abstract.html\">Abstract</a></li>\n <li><a href=\"/Study/Design_Pattern/Creational/Builder.html\">Builder</a></li>\n <li><a href=\"/Study/Design_Pattern/Creational/Factory_Methods.html\">Factory Methods</a></li>\n <li><a href=\"/Study/Design_Pattern/Creational/Prototype.html\">Prototype</a></li>\n <li><a href=\"/Study/Design_Pattern/Creational/Singleton.html\">Singleton</a></li>\n</ul>\n\n","dir":"/Study/Design_Pattern/Creational/","name":"README.md","path":"Study/Design_Pattern/Creational/README.md","url":"/Study/Design_Pattern/Creational/"},{"sort":1,"layout":"default","title":"Abstract","content":"<h1 id=\"abstract\">Abstract</h1>\n\n","dir":"/Study/Design_Pattern/Creational/","name":"Abstract.md","path":"Study/Design_Pattern/Creational/Abstract.md","url":"/Study/Design_Pattern/Creational/Abstract.html"},{"sort":1,"permalink":"/Study/Design_Pattern/Behavioral/","layout":"default","title":"Behavioral Pattern","content":"<h1 id=\"behavioral-pattern\">Behavioral Pattern</h1>\n\n<ul>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Chain_Responsibility.html\">Chain of Responsibility</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Command.html\">Command</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Interpreter.html\">Interpreter</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Iterator.html\">Iterator</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Mediator.html\">Mediator</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Memento.html\">Memento</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Observer.html\">Observer</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/State.html\">State</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Strategy.html\">Strategy</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Template_Method.html\">Template Method</a></li>\n <li><a href=\"/Study/Design_Pattern/Behavioral/Visitor.html\">Visitor</a></li>\n</ul>\n\n","dir":"/Study/Design_Pattern/Behavioral/","name":"README.md","path":"Study/Design_Pattern/Behavioral/README.md","url":"/Study/Design_Pattern/Behavioral/"},{"sort":1,"layout":"default","title":"Palindrome","content":"<h1 id=\"palindrome\">Palindrome</h1>\n\n<ul>\n <li>문자열을 앞으로 읽으나 뒤로 읽으나 동일한 문자열을 회문(Palindrome)이라고 함\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">abcdcba</code> 같은 문자열을 보면 왼쪽에서 오른쪽으로 읽은 값과, 오른쪽에서 왼쪽으로 읽은 값이 동일</li>\n </ul>\n </li>\n <li>문자열이 Palindrome인지 확인하는데 시간복잡도는 \\(O(N)\\) 이 발생</li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">bool</span> <span class=\"nf\">is_palindrome</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">txt</span><span class=\"p\">){</span>\n    <span class=\"kt\">int</span> <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">txt</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n    <span class=\"kt\">int</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">length</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">((</span><span class=\"n\">right</span><span class=\"o\">-</span><span class=\"n\">left</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">){</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">txt</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">txt</span><span class=\"p\">[</span><span class=\"n\">right</span><span class=\"p\">])</span> <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n        <span class=\"n\">left</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"n\">right</span><span class=\"o\">--</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h3 id=\"manachers-algorithm\">Manacher’s Algorithm</h3>\n\n<ul>\n <li>문자열의 특정 문자를 기준으로 좌우가 동일한 가장 길이가 긴 Palindrome을 찾는 알고리즘\n <ul>\n <li>특정 문자를 기준으로 Palindrome을 찾기 때문에 홀수개의 부분 문자열만 확인</li>\n </ul>\n </li>\n <li>홀수개의 부분 문자열만 찾는 이슈를 해결하기 위해 짝수개를 찾을 때는 문자 사이에 특수 문자를 대입하여 문자열 생성\n <ul>\n <li>예를 들어 <code class=\"language-plaintext highlighter-rouge\">zabbay</code> 라는 문자열이 있는 경우, <code class=\"language-plaintext highlighter-rouge\">#</code> 을 추가했을 때</li>\n <li><code class=\"language-plaintext highlighter-rouge\">#z#a#b#b#a#y#</code> 이라는 문자열을 생성하면 홀수개의 문자열이 됨\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">#</code>을 기준으로 palindrome을 찾으면 짝수개의 부분 문자열의 palindrome을 확인할 수 있음</li>\n <li>문자를 기준으로 할 때는 홀수개의 palindrome을 확인</li>\n <li>가장 앞과 뒤에 특수 문자를 추가하지 않으면 마지막과 첫번째에 문자를 포함하는 palindrome을 위해 중간의 값 반영분을 추가해야 됨\n <ul>\n <li>ex) <code class=\"language-plaintext highlighter-rouge\">abba</code> 라는 문자열인 경우, <code class=\"language-plaintext highlighter-rouge\">a#b#b#a</code> 라는 문자열은 중간의 <code class=\"language-plaintext highlighter-rouge\">#</code> 에서 palindrome을 계산시 3 (실제로는 4)</li>\n <li>ex) <code class=\"language-plaintext highlighter-rouge\">abcba</code> 라는 문자열인 경우, <code class=\"language-plaintext highlighter-rouge\">a#b#c#b#a</code>라는 문자열은 중간의 <code class=\"language-plaintext highlighter-rouge\">c</code>에서 palindrome을 계산시 4 (실제로는 5)</li>\n </ul>\n </li>\n </ul>\n </li>\n </ul>\n </li>\n <li>아래 Code에서 <code class=\"language-plaintext highlighter-rouge\">init</code> 함수를 통해 문자열에 특수문자 추가</li>\n</ul>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">string</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">str</span><span class=\"p\">){</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"n\">str</span> <span class=\"o\">+=</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">substr</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"c1\">// first - last is not #</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&gt;=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">str</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">str</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"sc\">'#'</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">str</span> <span class=\"o\">+=</span> <span class=\"sc\">'#'</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">str</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>\n <p>Manacher 함수</p>\n\n <ul>\n <li>\n <p>m은 부분 문자열의 중앙 index이고, r은 부분 문자열의 가장 오른쪽 index, dp[i]는 i번째 palindrome의 반경</p>\n\n <ul>\n <li>r은 중심 m을 기준으로 하는 반경으로, <code class=\"language-plaintext highlighter-rouge\">r=m+dp[m]</code> 으로 대체 가능</li>\n </ul>\n </li>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">i&lt;=r</code> 을 만족하는 경우는 i가 반경 r에 포함되는 경우를 의미</p>\n\n <ul>\n <li>포함되지 않으면 <code class=\"language-plaintext highlighter-rouge\">dp[i] = 0</code></li>\n <li>회문에서 중심 <code class=\"language-plaintext highlighter-rouge\">m</code> 을 기준으로 i의 대칭은 <code class=\"language-plaintext highlighter-rouge\">m - (i-m) = 2*m-i</code> 이므로, 이전에 계산된 대칭점과 동일한 반경에서 비교를 시작할 수 있음\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">dp[2*m-i]</code></li>\n <li>반경은 <code class=\"language-plaintext highlighter-rouge\">r-m</code> 이고, 회문을 만족하는 <code class=\"language-plaintext highlighter-rouge\">dp[2*m-i]</code> 를 제외한 나머지 부분 <code class=\"language-plaintext highlighter-rouge\">r-i</code> 에 대해서도 회문을 만족</li>\n <li>두가지 경우 회문을 만족하기 때문에, minimum 값에서 비교를 시작해야 됨. <code class=\"language-plaintext highlighter-rouge\">dp[i] = min(r-i, dp[2*m-i])</code></li>\n </ul>\n </li>\n <li><code class=\"language-plaintext highlighter-rouge\">i + dp[i] &gt; r</code> 은 이전에 발생했던 회문의 반경 <code class=\"language-plaintext highlighter-rouge\">r</code> 보다 큰 경우, 중앙의 위치 및 r 값을 Update</li>\n <li>예를 들어 아래와 같은 문자가 있는 경우\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">#</code> 을 제외하고 문자만 적었을 때, m을 기준으로 반경은 7이고 <code class=\"language-plaintext highlighter-rouge\">cbcdcbc</code> 가 회문을 만족</li>\n <li><code class=\"language-plaintext highlighter-rouge\">dp[2*m-i]</code> 는 <code class=\"language-plaintext highlighter-rouge\">dcbcd</code> 라는 회문을 만족하기 때문에 a에서 시작해야 되고, \\(r-i\\) = 1 이기 떄문에 반경+1 이후부터 비교 시작</li>\n </ul>\n </li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th> </th>\n <th> </th>\n <th> </th>\n <th> </th>\n <th> </th>\n <th>r</th>\n <th>\\(2*m-i\\)</th>\n <th> </th>\n <th>\\(m\\)</th>\n <th> </th>\n <th>i</th>\n <th>r</th>\n <th>\\(dp[2*m-i]\\)</th>\n <th> </th>\n <th> </th>\n <th> </th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td> </td>\n <td> </td>\n <td>a</td>\n <td>d</td>\n <td><strong>d</strong></td>\n <td><strong>c</strong></td>\n <td><strong>b</strong></td>\n <td><strong>c</strong></td>\n <td><strong>d</strong></td>\n <td>c</td>\n <td>b</td>\n <td>c</td>\n <td>a</td>\n <td>a</td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>Radius</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td>2</td>\n <td> </td>\n <td>3</td>\n <td> </td>\n <td>?</td>\n <td> </td>\n <td>2</td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n </tbody>\n </table>\n\n <ul>\n <li>대칭점의 회문이 중앙 회문에 포함되는 경우에는 \\(r-i\\) 는 k 이후부터 비교를 시작하고, <code class=\"language-plaintext highlighter-rouge\">dp[2*m-i]</code> 는 b부터 비교를 시작</li>\n <li>매칭이 안 된 작은 값부터 비교를 시작해야 되기 때문에, b 이후부터 시작해야되는데 <code class=\"language-plaintext highlighter-rouge\">dp[i] = min(r-i, dp[2*m-i])</code>. b 이후부터 비교</li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th> </th>\n <th> </th>\n <th>r</th>\n <th> </th>\n <th> </th>\n <th>\\(2*m-i\\)</th>\n <th> </th>\n <th> </th>\n <th>\\(m\\)</th>\n <th> </th>\n <th> </th>\n <th>i</th>\n <th>\\(dp[2*m-i]\\)</th>\n <th> </th>\n <th>r</th>\n <th> </th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td> </td>\n <td> </td>\n <td>k</td>\n <td>a</td>\n <td><strong>b</strong></td>\n <td><strong>c</strong></td>\n <td><strong>b</strong></td>\n <td>c</td>\n <td>d</td>\n <td>c</td>\n <td>b</td>\n <td>c</td>\n <td>b</td>\n <td>a</td>\n <td>k</td>\n <td> </td>\n </tr>\n <tr>\n <td>radius</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td>1</td>\n <td> </td>\n <td> </td>\n <td>6</td>\n <td> </td>\n <td> </td>\n <td>?</td>\n <td>1</td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n </tbody>\n </table>\n </li>\n </ul>\n </li>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\"> i + dp[i] </code> 가 기존의 반경보다 값이 큰 경우, 중앙 위치와 반경을 업데이트</p>\n <ul>\n <li>비교의 중심이 되는 위치를 우측으로 지속적으로 이동</li>\n </ul>\n </li>\n</ul>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAXN</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"nf\">manacher</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">str</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n    <span class=\"kt\">int</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">r</span><span class=\"p\">)</span>\n            <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">]);</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">r</span><span class=\"p\">)</span>\n            <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>아래와 같이 변수 r을 <code class=\"language-plaintext highlighter-rouge\">m+dp[m]</code> 로 대체 가능 (중심점 + 반경)\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">m = i </code>와 <code class=\"language-plaintext highlighter-rouge\">r = i + dp[i]</code> 를 동시에 대입하였으니, <code class=\"language-plaintext highlighter-rouge\">r = m + dp[m]</code> 로 사용 가능</li>\n </ul>\n </li>\n <li>위의 function에서 <code class=\"language-plaintext highlighter-rouge\">if (i &lt;= r) dp[i] = min(r-i, dp[2*m-i]</code> / <code class=\"language-plaintext highlighter-rouge\">else dp[i] = 0</code>\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">if (i&lt;=r)</code> 이 아닌데 <code class=\"language-plaintext highlighter-rouge\">min(r-i, dp[2*m-i]</code> 를 적용한 경우 처음 나오는 문자에서 0보다 작은 값이 나올 수 있음\n <ul>\n <li>이전에 발생한 회문의 반경 r에 i가 포함되지 않는 경우, i가 r보다 큰 값이 발생</li>\n <li>코드 간결하게 작성하기 위해 <code class=\"language-plaintext highlighter-rouge\">dp[i] = max(0, min(r-i, dp[2*m-i]))</code> 로 변경</li>\n </ul>\n </li>\n <li><code class=\"language-plaintext highlighter-rouge\">r = p+dp[p]</code> 로 적용했기 때문에, <code class=\"language-plaintext highlighter-rouge\">dp[i] = max(0, min(m+dp[m]-i, dp[2*m-i]))</code> 로 적용</li>\n </ul>\n </li>\n</ul>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAXN</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"nf\">manacher</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">str</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n    <span class=\"kt\">int</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">]));</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">m</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">])</span>\n            <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAXN</span> <span class=\"o\">=</span> <span class=\"mi\">200001</span><span class=\"p\">;</span>\n\n<span class=\"n\">string</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">str</span><span class=\"p\">){</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"n\">str</span> <span class=\"o\">+=</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">substr</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"c1\">// first - last is not #</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&gt;=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">str</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">str</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"o\">&lt;&lt;</span><span class=\"mi\">1</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"sc\">'#'</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">str</span> <span class=\"o\">+=</span> <span class=\"sc\">'#'</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">str</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAXN</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"nf\">manacher</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">str</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n    <span class=\"kt\">int</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">p</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">]));</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">p</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">])</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/String/","name":"Palindrome.md","path":"Algorithm/String/Palindrome.md","url":"/Algorithm/String/Palindrome.html"},{"sort":1,"permalink":"/Algorithm/String/","layout":"default","title":"String","content":"<h1 id=\"string\">String</h1>\n\n<ul>\n <li>문자열 관련 알고리즘 정리</li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>Algorithm List</strong></p>\n\n<ul>\n <li><a href=\"/Algorithm/String/Palindrome.html\">Palindrome</a></li>\n <li><a href=\"/Algorithm/String/Suffix_Array.html\">Suffix Array</a></li>\n <li><a href=\"/Algorithm/String/LCP.html\">LCP</a></li>\n <li><a href=\"/Algorithm/String/Rabin_Karp.html\">Rabin Karp</a></li>\n <li><a href=\"/Algorithm/String/KMP.html\">KMP</a></li>\n <li><a href=\"/Algorithm/String/Boyer_Moore.html\">Boyer Moore</a></li>\n</ul>\n\n","dir":"/Algorithm/String/","name":"README.md","path":"Algorithm/String/README.md","url":"/Algorithm/String/"},{"sort":1,"layout":"default","title":"Chain of Responsibility","content":"<h1 id=\"chain-of-responsibility\">Chain of Responsibility</h1>\n\n","dir":"/Study/Design_Pattern/Behavioral/","name":"Chain_Responsibility.md","path":"Study/Design_Pattern/Behavioral/Chain_Responsibility.md","url":"/Study/Design_Pattern/Behavioral/Chain_Responsibility.html"},{"sort":1,"permalink":"/Study/Software_Development/","layout":"default","title":"Software Development","content":"<h1 id=\"software-development\">Software Development</h1>\n\n<ul>\n <li><a href=\"/Study/Software_Development/OOP_Principle/\">OOP Principle</a>\n <ul>\n <li><a href=\"/Study/Software_Development/OOP_Principle/SOLID.html\">SOLID</a></li>\n <li><a href=\"/Study/Software_Development/OOP_Principle/Dry.html\">DRY</a></li>\n <li><a href=\"/Study/Software_Development/OOP_Principle/Kiss.html\">KISS</a></li>\n <li><a href=\"/Study/Software_Development/OOP_Principle/Yagni.html\">YAGNI</a></li>\n </ul>\n </li>\n <li><a href=\"/Study/Software_Development/Test_Driven_Development/\">Testing</a>\n <ul>\n <li><a href=\"/Study/Software_Development/Test_Driven_Development/Unit.html\">Unit Testing</a></li>\n <li><a href=\"/Study/Software_Development/Test_Driven_Development/Integration.html\">Integration Testing</a></li>\n <li><a href=\"/Study/Software_Development/Test_Driven_Development/Function.html\">Function Testing</a></li>\n </ul>\n </li>\n</ul>\n","dir":"/Study/Software_Development/","name":"README.md","path":"Study/Software_Development/README.md","url":"/Study/Software_Development/"},{"sort":1,"permalink":"/Study/Cloud/","layout":"default","title":"Cloud Providers","content":"<h1 id=\"cloud-providers\">Cloud Providers</h1>\n\n<ul>\n <li><a href=\"/Study/Cloud/Client_Side.html\">Client Side</a></li>\n <li><a href=\"/Study/Cloud/GCP/\">GCP</a></li>\n <li><a href=\"/Study/Cloud/Azure/\">Azure</a></li>\n <li><a href=\"/Study/Cloud/AWS/\">AWS</a></li>\n</ul>\n\n","dir":"/Study/Cloud/","name":"README.md","path":"Study/Cloud/README.md","url":"/Study/Cloud/"},{"sort":1,"permalink":"/Study/Cloud/GCP/","layout":"default","title":"GCP","content":"<h1 id=\"gcp\">GCP</h1>\n\n","dir":"/Study/Cloud/GCP/","name":"README.md","path":"Study/Cloud/GCP/README.md","url":"/Study/Cloud/GCP/"},{"sort":1,"permalink":"/Study/Cloud/Azure/","layout":"default","title":"Azure","content":"<h1 id=\"azure\">Azure</h1>\n\n","dir":"/Study/Cloud/Azure/","name":"README.md","path":"Study/Cloud/Azure/README.md","url":"/Study/Cloud/Azure/"},{"sort":1,"permalink":"/Study/Cloud/AWS/","layout":"default","title":"AWS","content":"<h1 id=\"aws\">AWS</h1>\n\n","dir":"/Study/Cloud/AWS/","name":"README.md","path":"Study/Cloud/AWS/README.md","url":"/Study/Cloud/AWS/"},{"sort":1,"layout":"default","title":"Prefix Sum","content":"<h1 id=\"prefix-sum\">Prefix Sum</h1>\n\n<ul>\n <li>\n <p>DP로 동작하며 특정 구간의 합을 계산할 때 용이하게 사용할 수 있음</p>\n </li>\n <li>\n <p>Array에 저장되는 값은 인덱스 0부터의 합이므로, 끝구간과 시작 구간에 저장된 값을 빼면 특정 구간에서의 부분합을 계산할 수 있음</p>\n </li>\n <li>\n <p>2차원 행렬에서도 특정 구간의 사각행렬 내 합을 계산할 수 있음</p>\n\n <ul>\n <li>(start_x,start_y)에서 (end_x,end_y) 구간의 합이 필요한 경우</li>\n </ul>\n\n <p><code class=\"language-plaintext highlighter-rouge\">dp[end_x,end_y] + dp[start_x,start_y] - (dp[starx,end_y] + dp[end_x,start_y]</code></p>\n </li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">10001</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">psum</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">prefix_sum</span><span class=\"p\">(){</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"c1\">// scanf or cin</span>\n\t\t<span class=\"n\">psum</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">psum</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">val</span><span class=\"p\">;</span>  <span class=\"c1\">// psum[3] = summary from 0 to 2</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;=</span><span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n\t\t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">psum</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">psum</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span> \n\t\t<span class=\"c1\">// i == 1, 0 to n</span>\n\t\t<span class=\"c1\">// i == 2, 1 to n</span>\n\t\t<span class=\"c1\">// i == n, n-1 to n</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/DP/","name":"Prefix_Sum.md","path":"Algorithm/DP/Prefix_Sum.md","url":"/Algorithm/DP/Prefix_Sum.html"},{"sort":1,"permalink":"/Study/Caching/","layout":"default","title":"Caching","content":"<h1 id=\"caching\">Caching</h1>\n\n<ul>\n <li><a href=\"/Study/Caching/Client_Side.html\">Client Side</a></li>\n <li><a href=\"/Study/Caching/Server_Side.html\">Server Side</a></li>\n</ul>\n\n","dir":"/Study/Caching/","name":"README.md","path":"Study/Caching/README.md","url":"/Study/Caching/"},{"sort":1,"layout":"default","title":"Client Side","content":"<h1 id=\"client-side\">Client Side</h1>\n\n","dir":"/Study/Caching/","name":"Client_Side.md","path":"Study/Caching/Client_Side.md","url":"/Study/Caching/Client_Side.html"},{"sort":1,"layout":"default","title":"REST","content":"<h1 id=\"rest\">REST</h1>\n\n","dir":"/Study/API/","name":"REST.md","path":"Study/API/REST.md","url":"/Study/API/REST.html"},{"sort":1,"permalink":"/Study/API/","layout":"default","title":"API","content":"<h1 id=\"api\">API</h1>\n\n<ul>\n <li><a href=\"/Study/API/REST.html\">REST</a></li>\n <li><a href=\"/Study/API/JSON.html\">JSON</a></li>\n <li><a href=\"/Study/API/Authentication.html\">Authentication</a></li>\n <li><a href=\"/Study/API/SOAP.html\">SOAP</a></li>\n</ul>\n\n","dir":"/Study/API/","name":"README.md","path":"Study/API/README.md","url":"/Study/API/"},{"sort":1,"layout":"default","title":"Mongo","content":"<h1 id=\"mongo\">Mongo</h1>\n\n","dir":"/Computer_Science/Database/NOSQL/","name":"Mongo.md","path":"Computer_Science/Database/NOSQL/Mongo.md","url":"/Computer_Science/Database/NOSQL/Mongo.html"},{"sort":1,"permalink":"/Computer_Science/Database/NOSQL/","layout":"default","title":"DBMS","content":"<h1 id=\"dbms\">DBMS</h1>\n\n<ul>\n <li><a href=\"/Computer_Science/Database/NOSQL/Mongo.html\">Mongo</a></li>\n <li><a href=\"/Computer_Science/Database/NOSQL/Redis.html\">Redis</a></li>\n <li><a href=\"/Computer_Science/Database/NOSQL/Cassandra.html\">Cassandra</a></li>\n <li><a href=\"/Computer_Science/Database/NOSQL/Couch.html\">Couch</a></li>\n <li><a href=\"/Computer_Science/Database/NOSQL/Dynamo.html\">Dynamo</a></li>\n <li><a href=\"/Computer_Science/Database/NOSQL/Rethink.html\">Rethink</a></li>\n</ul>\n\n","dir":"/Computer_Science/Database/NOSQL/","name":"README.md","path":"Computer_Science/Database/NOSQL/README.md","url":"/Computer_Science/Database/NOSQL/"},{"sort":1,"permalink":"/Algorithm/DP/","layout":"default","title":"Dynamic Programming","content":"<h1 id=\"dynamic-programming\">Dynamic Programming</h1>\n\n<ul>\n <li>복잡한 문제를 간단한 여러 문제로 나누어 푸는 기법(분할 정복)이지만, 동일한 문제를 단 한 번만 푸는 방법이 추가됨\n <ul>\n <li>작은 문제의 중복이 발생하지 않음</li>\n </ul>\n </li>\n <li>작은 문제의 답을 저장공간에 저장(Memorization)하여 중복 계산 과정을 없앰으로써 최적화</li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>Algorithm List</strong></p>\n\n<ul>\n <li><a href=\"/Algorithm/DP/Prefix_Sum.html\">Prefix Sum</a></li>\n <li><a href=\"/Algorithm/DP/Kanpsack.html\">Knapsack</a></li>\n <li><a href=\"/Algorithm/DP/LIS.html\">LIS (Longest Increasing Subsequence)</a></li>\n <li><a href=\"/Algorithm/DP/LCS.html\">LCS</a></li>\n <li><a href=\"/Algorithm/DP/Edit_Distance.html\">Edit Distance</a></li>\n <li><a href=\"/Algorithm/DP/Matrix_Chain_Multiplication.html\">Matrix Chain Multiplication</a></li>\n</ul>\n\n","dir":"/Algorithm/DP/","name":"README.md","path":"Algorithm/DP/README.md","url":"/Algorithm/DP/"},{"sort":1,"layout":"default","title":"Trie","content":"<h1 id=\"trie\">Trie</h1>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">struct</span> <span class=\"nc\">Trie</span> <span class=\"p\">{</span>\n\t<span class=\"n\">Trie</span><span class=\"o\">*</span> <span class=\"n\">next</span><span class=\"p\">[</span><span class=\"mi\">27</span><span class=\"p\">];</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">cnt</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">Trie</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">cnt</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">27</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t\t<span class=\"n\">next</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">nullptr</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"o\">~</span><span class=\"n\">Trie</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">27</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">next</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"k\">delete</span> <span class=\"n\">next</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"kt\">void</span> <span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">key</span> <span class=\"o\">==</span> <span class=\"sc\">'\\0'</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n\n\t\t<span class=\"kt\">int</span> <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">key</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">next</span><span class=\"p\">[</span><span class=\"n\">curr</span><span class=\"p\">])</span> <span class=\"n\">next</span><span class=\"p\">[</span><span class=\"n\">curr</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Trie</span><span class=\"p\">();</span>\n\t\t<span class=\"n\">next</span><span class=\"p\">[</span><span class=\"n\">curr</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">cnt</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">next</span><span class=\"p\">[</span><span class=\"n\">curr</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">key</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"kt\">int</span> <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">chk</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">press</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">key</span> <span class=\"o\">==</span> <span class=\"sc\">'\\0'</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">press</span><span class=\"p\">;</span>\n\n\t\t<span class=\"kt\">int</span> <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">key</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">chk</span> <span class=\"o\">!=</span> <span class=\"n\">next</span><span class=\"p\">[</span><span class=\"n\">curr</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">cnt</span><span class=\"p\">)</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"n\">next</span><span class=\"p\">[</span><span class=\"n\">curr</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">key</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">next</span><span class=\"p\">[</span><span class=\"n\">curr</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">cnt</span><span class=\"p\">,</span> <span class=\"n\">press</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">else</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"n\">next</span><span class=\"p\">[</span><span class=\"n\">curr</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">key</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">chk</span><span class=\"p\">,</span> <span class=\"n\">press</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"cp\">#include &lt;stdio.h&gt;\n#pragma warning(disable:4996)\n#define MAX_E 1000000\n</span><span class=\"k\">struct</span> <span class=\"nc\">Trie</span> <span class=\"p\">{</span>\n\t<span class=\"n\">Trie</span><span class=\"o\">*</span> <span class=\"n\">next</span><span class=\"p\">[</span><span class=\"mi\">127</span><span class=\"p\">];</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">count</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">Trie</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">127</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t\t<span class=\"n\">next</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"o\">~</span><span class=\"n\">Trie</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">127</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">next</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"k\">delete</span> <span class=\"n\">next</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"n\">Trie</span><span class=\"o\">*</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"n\">key</span><span class=\"p\">[],</span> <span class=\"kt\">int</span> <span class=\"n\">inde</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"n\">Trie</span><span class=\"o\">*</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">length</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">key</span><span class=\"p\">[</span><span class=\"n\">length</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"sc\">'\\0'</span><span class=\"p\">;</span> <span class=\"n\">length</span><span class=\"o\">++</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">length</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">' '</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n\t\t<span class=\"kt\">char</span> <span class=\"n\">ind</span> <span class=\"o\">=</span> <span class=\"n\">key</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">[</span><span class=\"n\">ind</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">[</span><span class=\"n\">ind</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Trie</span><span class=\"p\">();</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">[</span><span class=\"n\">ind</span><span class=\"p\">];</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">inde</span><span class=\"p\">;</span>\n\t<span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n</code></pre>  </div></div>\n\n","dir":"/DataStructure/Tree/","name":"Trie.md","path":"DataStructure/Tree/Trie.md","url":"/DataStructure/Tree/Trie.html"},{"sort":1,"permalink":"/DataStructure/Tree/","layout":"default","title":"Tree","content":"<h1 id=\"tree\">Tree</h1>\n\n<ul>\n <li><a href=\"/DataStructure/Tree/Trie.html\">Trie</a></li>\n <li><a href=\"/DataStructure/Tree/Radix_Tree.html\">Radix Tree</a></li>\n <li><a href=\"/DataStructure/Tree/B-Tree.html\">B-Tree</a></li>\n <li><a href=\"/DataStructure/Tree/B+Tree.html\">B+ Tree</a></li>\n</ul>\n\n","dir":"/DataStructure/Tree/","name":"README.md","path":"DataStructure/Tree/README.md","url":"/DataStructure/Tree/"},{"sort":1,"permalink":"/DataStructure/","layout":"default","title":"Data Structure","content":"<h1 id=\"data-structure\">Data Structure</h1>\n\n<ul>\n <li><a href=\"/DataStructure/Tree/\">Tree</a>\n <ul>\n <li><a href=\"/DataStructure/Tree/Trie.html\">Trie</a></li>\n <li><a href=\"/DataStructure/Tree/Radix_Tree.html\">Radix Tree</a></li>\n <li><a href=\"/DataStructure/Tree/B-Tree.html\">B-Tree</a></li>\n <li><a href=\"/DataStructure/Tree/B+Tree.html\">B+ Tree</a></li>\n </ul>\n </li>\n <li><a href=\"/DataStructure/Container/\">Container</a>\n <ul>\n <li><a href=\"/DataStructure/Container/Linked_List.html\">Linked List</a></li>\n <li><a href=\"/DataStructure/Container/Queue.html\">Queue</a></li>\n <li><a href=\"/DataStructure/Container/Stack.html\">Stack</a></li>\n <li><a href=\"/DataStructure/Container/Vector_Pair.html\">Vector &amp; Pair</a></li>\n <li><a href=\"/DataStructure/Container/Deque.html\">Deque</a></li>\n <li><a href=\"/DataStructure/Container/Heap.html\">Heap</a></li>\n <li><a href=\"/DataStructure/Container/Union_Find.html\">Union Find</a></li>\n <li><a href=\"/DataStructure/Container/Hash.html\">Hash</a></li>\n </ul>\n </li>\n <li><a href=\"/DataStructure/Binary_Tree/\">Binary Tree</a>\n <ul>\n <li><a href=\"/DataStructure/Binary_Tree/Binary%20Tree.html\">Binary Tree</a></li>\n <li><a href=\"/DataStructure/Binary_Tree/Binary_Search_Tree.html\">Binary Search Tree</a></li>\n <li><a href=\"/DataStructure/Binary_Tree/Segment_Tree.html\">Segment Tree</a></li>\n <li><a href=\"/DataStructure/Binary_Tree/AVL_Tree.html\">AVL Tree</a></li>\n <li><a href=\"/DataStructure/Binary_Tree/Red_Black_Tree.html\">Red Black Tree</a></li>\n <li><a href=\"/DataStructure/Binary_Tree/Binary_Tree/\">/DataStructure/Binary_Tree/Binary_Tree/</a>\n <ul>\n <li><a href=\"/DataStructure/Binary_Tree/Binary_Tree/Binary_Tree/\">/DataStructure/Binary_Tree/Binary_Tree/Binary_Tree/</a></li>\n </ul>\n </li>\n </ul>\n </li>\n</ul>\n","dir":"/DataStructure/","name":"README.md","path":"DataStructure/README.md","url":"/DataStructure/"},{"sort":1,"permalink":"/DataStructure/Container/","layout":"default","title":"Container","content":"<h1 id=\"container\">Container</h1>\n\n<p><img src=\"/DataStructure/Container/Img/Containers.png\" alt=\"Containers\" /></p>\n\n<div style=\"text-align: right\"> Image ref : https://stackoverflow.com/questions/471432/in-which-scenario-do-i-use-a-particular-stl-container </div>\n\n<p><strong>LIST</strong></p>\n\n<ul>\n <li><a href=\"/DataStructure/Container/Linked_List.html\">Linked List</a></li>\n <li><a href=\"/DataStructure/Container/Queue.html\">Queue</a></li>\n <li><a href=\"/DataStructure/Container/Stack.html\">Stack</a></li>\n <li><a href=\"/DataStructure/Container/Vector_Pair.html\">Vector &amp; Pair</a></li>\n <li><a href=\"/DataStructure/Container/Deque.html\">Deque</a></li>\n <li><a href=\"/DataStructure/Container/Heap.html\">Heap</a></li>\n <li><a href=\"/DataStructure/Container/Union_Find.html\">Union Find</a></li>\n <li><a href=\"/DataStructure/Container/Hash.html\">Hash</a></li>\n</ul>\n\n","dir":"/DataStructure/Container/","name":"README.md","path":"DataStructure/Container/README.md","url":"/DataStructure/Container/"},{"sort":1,"layout":"default","title":"MySQL","content":"<h1 id=\"mysql\">MySQL</h1>\n\n","dir":"/Computer_Science/Database/RDBMS/","name":"MySQL.md","path":"Computer_Science/Database/RDBMS/MySQL.md","url":"/Computer_Science/Database/RDBMS/MySQL.html"},{"sort":1,"permalink":"/DataStructure/Binary_Tree/","layout":"default","title":"Binary Tree","content":"<h1 id=\"binary-tree\">Binary Tree</h1>\n\n<ul>\n <li><a href=\"/DataStructure/Binary_Tree/Binary%20Tree.html\">Binary Tree</a></li>\n <li><a href=\"/DataStructure/Binary_Tree/Binary_Search_Tree.html\">Binary Search Tree</a></li>\n <li><a href=\"/DataStructure/Binary_Tree/Segment_Tree.html\">Segment Tree</a></li>\n <li><a href=\"/DataStructure/Binary_Tree/AVL_Tree.html\">AVL Tree</a></li>\n <li><a href=\"/DataStructure/Binary_Tree/Red_Black_Tree.html\">Red Black Tree</a></li>\n <li><a href=\"/DataStructure/Binary_Tree/Binary_Tree/\">/DataStructure/Binary_Tree/Binary_Tree/</a>\n <ul>\n <li><a href=\"/DataStructure/Binary_Tree/Binary_Tree/Binary_Tree/\">/DataStructure/Binary_Tree/Binary_Tree/Binary_Tree/</a></li>\n </ul>\n </li>\n</ul>\n\n","dir":"/DataStructure/Binary_Tree/","name":"README.md","path":"DataStructure/Binary_Tree/README.md","url":"/DataStructure/Binary_Tree/"},{"sort":1,"layout":"default","title":"Linked List","content":"<h1 id=\"linked-list\">Linked List</h1>\n\n<h3 id=\"단순-링크드리스트-singly-linked-list\">단순 링크드리스트 (Singly Linked List)</h3>\n\n<ul>\n <li>head와 tail은 NULL 값으로 유지한 채 처음과 끝을 알려주는 Pointer로 사용</li>\n <li>새로운 노드가 추가되거나 삭제될 때, pre/next Pointer가 가리키는 위치를 변경해서 연결</li>\n <li>Stack / Queue 등에서 사용되는 Linked List</li>\n</ul>\n\n<p><img src=\"/DataStructure/Container/Img/Singly.png\" alt=\"Singly\" /></p>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">struct</span> <span class=\"nc\">node</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n    <span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">next</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"nc\">T</span><span class=\"p\">&gt;</span>\n<span class=\"k\">class</span> <span class=\"nc\">linked_list</span><span class=\"p\">{</span>\n    <span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">tail</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">_size</span><span class=\"p\">;</span>\n<span class=\"k\">public</span> <span class=\"o\">:</span>\n    <span class=\"n\">linked_list</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">));</span>\n        <span class=\"n\">tail</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">));</span>\n        <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">tail</span><span class=\"p\">;</span>\n        <span class=\"n\">_size</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"o\">~</span><span class=\"n\">linked_list</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">clear</span><span class=\"p\">();</span>\n        <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">);</span>\n        <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">tail</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">void</span> <span class=\"n\">addFront</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">value</span><span class=\"p\">){</span>\n        <span class=\"n\">node</span><span class=\"o\">*</span> <span class=\"n\">newnode</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">));</span>\n        <span class=\"n\">newnode</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"p\">;</span>\n        <span class=\"n\">newnode</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n        <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">newnode</span><span class=\"p\">;</span>\n        <span class=\"n\">_size</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">void</span> <span class=\"n\">addBack</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">value</span><span class=\"p\">){</span>\n        <span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">newnode</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">));</span>\n        <span class=\"n\">newnode</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"p\">;</span>\n        <span class=\"n\">newnode</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">tail</span><span class=\"p\">;</span>\n        <span class=\"n\">node</span><span class=\"o\">*</span> <span class=\"n\">back</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span> \n        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">back</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">!=</span> <span class=\"n\">tail</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">back</span> <span class=\"o\">=</span> <span class=\"n\">back</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span> <span class=\"c1\">// singly..</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">back</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">newnode</span><span class=\"p\">;</span>\n        <span class=\"n\">_size</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">int</span> <span class=\"n\">search_first_index</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">value</span><span class=\"p\">){</span>\n        <span class=\"kt\">int</span> <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">node</span><span class=\"o\">*</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">!=</span> <span class=\"n\">tail</span><span class=\"p\">){</span>\n            <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n            <span class=\"n\">idx</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">idx</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>    \n    <span class=\"kt\">void</span> <span class=\"n\">remove_first_node</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">value</span><span class=\"p\">){</span>\n        <span class=\"n\">node</span><span class=\"o\">*</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">!=</span> <span class=\"n\">tail</span><span class=\"p\">){</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"n\">value</span><span class=\"p\">){</span>\n                <span class=\"n\">node</span><span class=\"o\">*</span> <span class=\"n\">delnode</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n                <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">delnode</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n                <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">delnode</span><span class=\"p\">);</span>\n                <span class=\"n\">_size</span><span class=\"o\">--</span><span class=\"p\">;</span>\n                <span class=\"k\">return</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"There's no component \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">value</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">void</span> <span class=\"n\">printall</span><span class=\"p\">(){</span>\n        <span class=\"n\">node</span><span class=\"o\">*</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">tmp</span> <span class=\"o\">!=</span> <span class=\"n\">tail</span><span class=\"p\">){</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span><span class=\"p\">;</span>\n            <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">empty</span><span class=\"p\">(){</span><span class=\"k\">return</span> <span class=\"o\">!</span><span class=\"n\">_size</span><span class=\"p\">;}</span>\n    <span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"n\">_size</span><span class=\"p\">;}</span>\n    <span class=\"kt\">void</span> <span class=\"n\">clear</span><span class=\"p\">(){</span>\n        <span class=\"n\">node</span><span class=\"o\">*</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">empty</span><span class=\"p\">()){</span>\n            <span class=\"n\">node</span><span class=\"o\">*</span> <span class=\"n\">delnode</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"p\">;</span>\n            <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">delnode</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n            <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">delnode</span><span class=\"p\">);</span>\n            <span class=\"n\">_size</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">tail</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre>  </div></div>\n\n<h3 id=\"원형-링크드리스트-circular-linked-list\">원형 링크드리스트 (Circular Linked List)</h3>\n\n<ul>\n <li>단순 링크드리스트에서 Head / Tail의 data에 값 추가</li>\n <li>아래 예시는 Tail만 기입했지만, Head도 추가하여 리스트 최상단에 Data 추가할 수 있음</li>\n</ul>\n\n<p><img src=\"/DataStructure/Container/Img/Circular.png\" alt=\"Circular\" /></p>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n</code></pre>  </div></div>\n\n<h3 id=\"이중-링크드리스트-doubly-linked-list\">이중 링크드리스트 (Doubly Linked List)</h3>\n\n<ul>\n <li>asd</li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code></code></pre>  </div></div>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//--------------------------------------------------------------------------------------------</span>\n\n<span class=\"cp\">#include &lt;stdio.h&gt;\n#include &lt;malloc.h&gt;\n</span>\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"nc\">node</span> <span class=\"p\">{</span>\n    <span class=\"k\">struct</span> <span class=\"nc\">node</span> <span class=\"o\">*</span><span class=\"n\">pre</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"nc\">node</span> <span class=\"o\">*</span><span class=\"n\">next</span><span class=\"p\">;</span>\n<span class=\"p\">}</span><span class=\"n\">node</span><span class=\"p\">;</span>\n<span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">head</span><span class=\"p\">;</span>\n<span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">t</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">createnodes</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">start</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">));</span>\n    <span class=\"n\">t</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">t</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">));</span>\n        <span class=\"n\">t</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"o\">-&gt;</span><span class=\"n\">pre</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n        <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n        <span class=\"n\">t</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">t</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">insertnode</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">insert</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">));</span>\n    <span class=\"n\">insert</span><span class=\"o\">-&gt;</span><span class=\"n\">pre</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n        <span class=\"n\">insert</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">insert</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n        <span class=\"n\">t</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"o\">-&gt;</span><span class=\"n\">pre</span> <span class=\"o\">=</span> <span class=\"n\">insert</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">t</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">insert</span><span class=\"p\">;</span>\n    <span class=\"n\">insert</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// t번째 node를 제거</span>\n<span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"nf\">deletenode</span><span class=\"p\">(</span><span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">t</span><span class=\"p\">){</span>\n    <span class=\"n\">node</span> <span class=\"o\">*</span><span class=\"n\">d</span><span class=\"p\">;</span>\n    <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">t</span><span class=\"o\">-&gt;</span><span class=\"n\">pre</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n        <span class=\"n\">t</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"o\">-&gt;</span><span class=\"n\">pre</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">-&gt;</span><span class=\"n\">pre</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span>\n        <span class=\"n\">t</span><span class=\"o\">-&gt;</span><span class=\"n\">pre</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">-&gt;</span><span class=\"n\">pre</span><span class=\"p\">;</span>\n    <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 더미 노드를 이용한 이중 링크드 리스트</span>\n<span class=\"c1\">//--------------------------------------------------------------------------------------------</span>\n<span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n</span> \n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n \n<span class=\"k\">class</span> <span class=\"nc\">NODE</span> <span class=\"p\">{</span>\n    <span class=\"k\">friend</span> <span class=\"k\">class</span> <span class=\"nc\">LIST</span><span class=\"p\">;</span>\n\n<span class=\"nl\">private:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n    <span class=\"n\">NODE</span> <span class=\"o\">*</span><span class=\"n\">left</span><span class=\"p\">;</span>\n    <span class=\"n\">NODE</span> <span class=\"o\">*</span><span class=\"n\">right</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n \n<span class=\"k\">class</span> <span class=\"nc\">LIST</span> <span class=\"p\">{</span>\n<span class=\"nl\">private:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">sz</span><span class=\"p\">;</span>\n    <span class=\"n\">NODE</span> <span class=\"o\">*</span><span class=\"n\">head</span><span class=\"p\">;</span>\n    <span class=\"n\">NODE</span> <span class=\"o\">*</span><span class=\"n\">tail</span><span class=\"p\">;</span>\n\n<span class=\"nl\">public:</span>\n    <span class=\"n\">LIST</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"c1\">//cout &lt;&lt; \"\\n\\n생성자 호출\\n\\n\" &lt;&lt; endl;</span>\n        <span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">NODE</span> <span class=\"o\">*</span><span class=\"n\">dummyHead</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">NODE</span><span class=\"p\">;</span>\n        <span class=\"n\">NODE</span> <span class=\"o\">*</span><span class=\"n\">dummyTail</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">NODE</span><span class=\"p\">;</span>\n\n        <span class=\"n\">dummyHead</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">dummyHead</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n        <span class=\"n\">dummyTail</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">dummyTail</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n\n        <span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">dummyHead</span><span class=\"p\">;</span>\n        <span class=\"n\">tail</span> <span class=\"o\">=</span> <span class=\"n\">dummyTail</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"o\">~</span><span class=\"n\">LIST</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">init</span><span class=\"p\">();</span>\n        <span class=\"k\">delete</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n        <span class=\"k\">delete</span> <span class=\"n\">tail</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"n\">init</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">NODE</span> <span class=\"o\">*</span><span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">NODE</span> <span class=\"o\">*</span><span class=\"n\">delNode</span> <span class=\"o\">=</span> <span class=\"n\">pos</span><span class=\"p\">;</span>\n            <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">pos</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"p\">;</span>\n\n            <span class=\"k\">delete</span> <span class=\"n\">delNode</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">delete</span> <span class=\"n\">tail</span><span class=\"p\">;</span> <span class=\"c1\">// 마지막 tail이 삭제되지 않았다.</span>\n\n        <span class=\"c1\">// 더미노드 새로 생성(생성자와 동일)</span>\n        <span class=\"n\">NODE</span> <span class=\"o\">*</span><span class=\"n\">dummyHead</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">NODE</span><span class=\"p\">;</span>\n        <span class=\"n\">NODE</span> <span class=\"o\">*</span><span class=\"n\">dummyTail</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">NODE</span><span class=\"p\">;</span>\n\n        <span class=\"n\">dummyHead</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">dummyHead</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n        <span class=\"n\">dummyTail</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">dummyTail</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n\n        <span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">dummyHead</span><span class=\"p\">;</span>\n        <span class=\"n\">tail</span> <span class=\"o\">=</span> <span class=\"n\">dummyTail</span><span class=\"p\">;</span>\n        <span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">void</span> <span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"c1\">// 리스트가 형성되어 있지 않았을 때</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">NODE</span> <span class=\"o\">*</span><span class=\"n\">newNode</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">NODE</span><span class=\"p\">;</span>\n            <span class=\"n\">newNode</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n\n            <span class=\"n\">newNode</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n            <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">newNode</span><span class=\"p\">;</span>\n\n            <span class=\"n\">newNode</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">tail</span><span class=\"p\">;</span>\n            <span class=\"n\">tail</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">newNode</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">else</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">NODE</span> <span class=\"o\">*</span><span class=\"n\">newNode</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">NODE</span><span class=\"p\">;</span>\n            <span class=\"n\">newNode</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n\n            <span class=\"n\">newNode</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">tail</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"p\">;</span>\n            <span class=\"n\">tail</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">newNode</span><span class=\"p\">;</span>\n\n            <span class=\"n\">newNode</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">tail</span><span class=\"p\">;</span>\n            <span class=\"n\">tail</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">newNode</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">sz</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">void</span> <span class=\"n\">del</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">NODE</span> <span class=\"o\">*</span><span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n        <span class=\"kt\">bool</span> <span class=\"n\">isFind</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"n\">pos</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">pos</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"p\">;</span>\n                <span class=\"n\">pos</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">pos</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"p\">;</span>\n                <span class=\"k\">delete</span> <span class=\"n\">pos</span><span class=\"p\">;</span>\n                <span class=\"n\">isFind</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">pos</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isFind</span><span class=\"p\">)</span>\n            <span class=\"n\">sz</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"삭제할 데이터가 없습니다.\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"n\">all</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">NODE</span> <span class=\"o\">*</span><span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">pos</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"c1\">// 더미노드는 출력하지 않는다.</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">pos</span> <span class=\"o\">==</span> <span class=\"n\">head</span> <span class=\"o\">||</span> <span class=\"n\">pos</span> <span class=\"o\">==</span> <span class=\"n\">tail</span><span class=\"p\">))</span>\n                <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">pos</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span><span class=\"p\">;</span>\n\n            <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">pos</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">sz</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">LIST</span> <span class=\"n\">list</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"p\">;</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"1 :: 초기화</span><span class=\"se\">\\n</span><span class=\"s\">2 :: 추가</span><span class=\"se\">\\n</span><span class=\"s\">3 :: 삭제</span><span class=\"se\">\\n</span><span class=\"s\">4 :: 전체출력</span><span class=\"se\">\\n</span><span class=\"s\">5 :: 총 개수</span><span class=\"se\">\\n</span><span class=\"s\">6 :: 종료</span><span class=\"se\">\\n</span><span class=\"s\">입력 :: \"</span><span class=\"p\">;</span>\n        <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">num</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">list</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">();</span>\n\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"값 :: \"</span><span class=\"p\">;</span>\n            <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n            <span class=\"n\">list</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"값 :: \"</span><span class=\"p\">;</span>\n            <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n            <span class=\"n\">list</span><span class=\"p\">.</span><span class=\"n\">del</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n            <span class=\"n\">list</span><span class=\"p\">.</span><span class=\"n\">all</span><span class=\"p\">();</span>\n\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">list</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n</code></pre>  </div></div>\n\n","dir":"/DataStructure/Container/","name":"Linked_List.md","path":"DataStructure/Container/Linked_List.md","url":"/DataStructure/Container/Linked_List.html"},{"sort":1,"permalink":"/Computer_Science/Database/RDBMS/","layout":"default","title":"RDBMS","content":"<h1 id=\"rdbms\">RDBMS</h1>\n\n<ul>\n <li><a href=\"/Computer_Science/Database/RDBMS/MySQL.html\">MySQL</a></li>\n <li><a href=\"/Computer_Science/Database/RDBMS/Oracle.html\">Oracle</a></li>\n <li><a href=\"/Computer_Science/Database/RDBMS/MS_SQL_Server.html\">MS SQL Server</a></li>\n <li><a href=\"/Computer_Science/Database/RDBMS/PostgreSQL.html\">PostgreSQL</a></li>\n <li><a href=\"/Computer_Science/Database/RDBMS/Pl_SQL.html\">Pl SQL</a></li>\n</ul>\n\n","dir":"/Computer_Science/Database/RDBMS/","name":"README.md","path":"Computer_Science/Database/RDBMS/README.md","url":"/Computer_Science/Database/RDBMS/"},{"sort":1,"permalink":"/Computer_Science/Database/","layout":"default","title":"Database","content":"<h1 id=\"database\">Database</h1>\n\n<ul>\n <li><a href=\"/Computer_Science/Database/SChema.html\">Schema</a></li>\n <li><a href=\"/Computer_Science/Database/Key.html\">Key</a></li>\n <li><a href=\"/Computer_Science/Database/Transaction.html\">Transaction</a></li>\n <li><a href=\"/Computer_Science/Database/Table.html\">Table</a></li>\n <li><a href=\"/Computer_Science/Database/View.html\">View</a></li>\n <li><a href=\"/Computer_Science/Database/Indexing.html\">Indexing</a></li>\n <li><a href=\"/Computer_Science/Database/Normalization.html\">Normalization</a></li>\n <li><a href=\"/Computer_Science/Database/Cursor.html\">Cursor</a></li>\n <li><a href=\"/Computer_Science/Database/Trigger.html\">Trigger</a></li>\n <li><a href=\"/Computer_Science/Database/Procedure.html\">Procedure</a></li>\n <li><a href=\"/Computer_Science/Database/ORMs.html\">ORMs</a></li>\n <li><a href=\"/Computer_Science/Database/Shared_Storage.html\">Shared Storage</a></li>\n <li><a href=\"/Computer_Science/Database/Data_Replication.html\">Data Replication</a></li>\n <li><a href=\"/Computer_Science/Database/N+1_Problem.html\">N+1 Problem</a></li>\n <li><a href=\"/Computer_Science/Database/CAP_Theorem.html\">CAP Theorem</a></li>\n <li><a href=\"/Computer_Science/Database/NOSQL/\">DBMS</a>\n <ul>\n <li><a href=\"/Computer_Science/Database/NOSQL/Mongo.html\">Mongo</a></li>\n <li><a href=\"/Computer_Science/Database/NOSQL/Redis.html\">Redis</a></li>\n <li><a href=\"/Computer_Science/Database/NOSQL/Cassandra.html\">Cassandra</a></li>\n <li><a href=\"/Computer_Science/Database/NOSQL/Couch.html\">Couch</a></li>\n <li><a href=\"/Computer_Science/Database/NOSQL/Dynamo.html\">Dynamo</a></li>\n <li><a href=\"/Computer_Science/Database/NOSQL/Rethink.html\">Rethink</a></li>\n </ul>\n </li>\n <li><a href=\"/Computer_Science/Database/RDBMS/\">RDBMS</a>\n <ul>\n <li><a href=\"/Computer_Science/Database/RDBMS/MySQL.html\">MySQL</a></li>\n <li><a href=\"/Computer_Science/Database/RDBMS/Oracle.html\">Oracle</a></li>\n <li><a href=\"/Computer_Science/Database/RDBMS/MS_SQL_Server.html\">MS SQL Server</a></li>\n <li><a href=\"/Computer_Science/Database/RDBMS/PostgreSQL.html\">PostgreSQL</a></li>\n <li><a href=\"/Computer_Science/Database/RDBMS/Pl_SQL.html\">Pl SQL</a></li>\n </ul>\n </li>\n</ul>\n","dir":"/Computer_Science/Database/","name":"README.md","path":"Computer_Science/Database/README.md","url":"/Computer_Science/Database/"},{"sort":1,"layout":"default","title":"Schema","content":"<h1 id=\"schema\">Schema</h1>\n\n<h3 id=\"acid\">ACID</h3>\n","dir":"/Computer_Science/Database/","name":"SChema.md","path":"Computer_Science/Database/SChema.md","url":"/Computer_Science/Database/SChema.html"},{"sort":1,"layout":"default","title":"Binary Tree","content":"<h1 id=\"binary-tree\">Binary Tree</h1>\n\n<p>https://yoongrammer.tistory.com/69</p>\n\n<ul>\n <li>각 노드가 최대 2개의 자식 노드를 갖는 트리</li>\n <li>루트 노드 1에서 시작하고 아래 규칙을 만족\n <ul>\n <li>왼쪽 노드는 부모 노드 * 2</li>\n <li>오른쪽 노드는 부모 노드 * 2 + 1</li>\n <li>부모 노드 = 자식 노드 / 2</li>\n </ul>\n </li>\n <li></li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code></code></pre>  </div></div>\n\n","dir":"/DataStructure/Binary_Tree/","name":"Binary Tree.md","path":"DataStructure/Binary_Tree/Binary Tree.md","url":"/DataStructure/Binary_Tree/Binary%20Tree.html"},{"sort":2,"layout":"default","title":"Permutaion","content":"<h1 id=\"permutaion\">Permutaion</h1>\n\n<ul>\n <li>서로 다른 n개의 원소에서 r개를 채택하여 순서대로 정렬한 것</li>\n <li>(1,2,4,5)의 원소에서 2개를 순서대로 나열하는 방법은 (1,2), (1,4), (1,5), (2,1), (2,4), (2,5), (4,1), (4,2), (4,5), (5,1), (5,2), (5,4) 12개임</li>\n <li>즉, \\(_nP_r = {n! \\over (n-r)!}\\) 을 만족하는 것을 알 수 있음</li>\n <li>단순히 경우의 수가 아니라, 가능한 모든 경우의 수를 찾는 경우, 재귀를 통하여 전체 탐색이 필요</li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">_data</span><span class=\"p\">[];</span>\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">count1</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">swap</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">;</span> <span class=\"o\">*</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">;</span> <span class=\"o\">*</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">permutation1</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"n\">q</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">count1</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"c1\">// print loop</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">k</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]);</span> <span class=\"c1\">// order swap</span>\n            <span class=\"n\">permutation1</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"c1\">// recursion // pick i, so next is k+1</span>\n            <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]);</span> <span class=\"c1\">// recover</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">implement</span><span class=\"p\">(){</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">permutation1</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>직접 구현 / powerset / 알고리즘을 사용했으나, 직접 구현한 경우가 가장 속도가 빨랐음\n <ul>\n <li>powerset으로 구현하면 매우 비효율적</li>\n </ul>\n </li>\n</ul>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;time.h&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">t1</span><span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">],</span> <span class=\"n\">t2</span><span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">count1</span><span class=\"p\">,</span> <span class=\"n\">count2</span><span class=\"p\">,</span> <span class=\"n\">count3</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">swap</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">;</span>\n    <span class=\"o\">*</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">;</span>\n    <span class=\"o\">*</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">permutation1</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n<span class=\"p\">{</span> <span class=\"c1\">// q is just number of print count</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"n\">q</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">count1</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"cm\">/*        for (int i = 0; i &lt; q; i++)\n                {\n                    printf(\"%d \", t1[i]);\n                }\n                printf(\"\\n\");*/</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">k</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">t1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">t1</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]);</span>      <span class=\"c1\">// order swap</span>\n            <span class=\"n\">permutation1</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"c1\">// recursion // pick i, so next is k+1</span>\n            <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">t1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">t1</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]);</span>      <span class=\"c1\">// recover</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// powerset</span>\n<span class=\"kt\">bool</span> <span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">];</span>\n<span class=\"kt\">void</span> <span class=\"nf\">permutation2</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"n\">q</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">count2</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"cm\">/*        for (int i = 0; i &lt; q; i++)\n                {\n                    printf(\"%d \", t2[i]);\n                }\n                printf(\"\\n\");*/</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n            <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n            <span class=\"n\">t2</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n            <span class=\"n\">permutation2</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">permutation3</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">vc</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">vc</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">vc</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span>\n    <span class=\"k\">do</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">count3</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"cm\">/*        for (int i = 0; i &lt; k; i++)\n                {\n                    cout &lt;&lt; vc[i] &lt;&lt; \" \";\n                }\n                cout &lt;&lt; endl;*/</span>\n        <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"n\">vc</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">vc</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span> <span class=\"c1\">// stl library doesn't support nPr, so this line needed</span>\n    <span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">next_permutation</span><span class=\"p\">(</span><span class=\"n\">vc</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">vc</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">()));</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">12</span><span class=\"p\">;</span>\n    <span class=\"n\">count1</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">count2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">count3</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">t1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">t2</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">clock_t</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">clock</span><span class=\"p\">();</span>\n    <span class=\"n\">permutation1</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Perm1 = \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">clock</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">clock</span><span class=\"p\">();</span> <span class=\"c1\">// 25</span>\n    <span class=\"n\">permutation2</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Perm2 = \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">clock</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">clock</span><span class=\"p\">();</span> <span class=\"c1\">// 31082093</span>\n    <span class=\"n\">permutation3</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Perm3 = \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">clock</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span> <span class=\"c1\">// 917</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%d %d %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">count1</span><span class=\"p\">,</span> <span class=\"n\">count2</span><span class=\"p\">,</span> <span class=\"n\">count3</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h3 id=\"중복-순열-recursive-with-repetition\">중복 순열 (Recursive with repetition)</h3>\n\n<ul>\n <li>서로 다른 n개의 원소에서 중복을 포함하여 r개를 채택하여 순서대로 정렬한 것</li>\n <li>\\(_n \\Pi _r = n^r\\) 임을 직관적으로 확인할 수 있다.\n <ul>\n <li>첫번째 자리에 n개가 올 수 있고, 두번째 자리… 마지막 자리도 마찬가지로 n개가 올 수 있음</li>\n </ul>\n </li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">_data</span><span class=\"p\">[],</span> <span class=\"n\">t</span><span class=\"p\">[];</span>\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">count1</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">repeat_permutation</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"n\">q</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> \n        <span class=\"n\">count1</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"c1\">// print loop</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"n\">repeat_permutation</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"c1\">// enable duplication</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">implement</span><span class=\"p\">(){</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">repeat_permutation</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Math/","name":"Permutation.md","path":"Algorithm/Math/Permutation.md","url":"/Algorithm/Math/Permutation.html"},{"sort":2,"layout":"default","title":"DFS","content":"<h1 id=\"dfs\">DFS</h1>\n\n<p><strong>Depth First Search</strong></p>\n\n<ul>\n <li>하나의 정점을 최대한 깊이 탐색하고, 더 이상 탐색할 수 없을 때 다음 경로를 탐색하는 기법</li>\n <li>LIFO방식으로 동작하기 때문에 Stack를 이용함</li>\n <li>Stack에 이전 경로에 대한 값을 넣어서 구하는 방식과 재귀로 문제를 해결하는 방법이 있음\n <ul>\n <li>Stack을 이용하는 경우, BFS와 비슷한 방법으로 Stack이 빌 때까지 while문으로 모든 노드를 탐색</li>\n <li>재귀로 접근하는 경우, Parameter에 이전 값에 대한 정보를 추가 (전역으로 설정할 경우, 재귀 전후로 변경점에 대한 내용 추가 필요)</li>\n </ul>\n </li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>인접 행렬</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">V</span> <span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">[</span><span class=\"n\">now</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">visit</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]){</span>\n\t\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>인접 행렬로 계산시 모든 노드를 탐색하기 때문에 시간 복잡도는 O(\\(V^2\\))이 됨\n <ul>\n <li>Stack(or recursive)에 모든 노드를 넣기 때문에 O(V), 각 노드에서 모든 노드를 탐색할 때 O(V)</li>\n </ul>\n </li>\n</ul>\n\n<p><strong>인접리스트</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span> <span class=\"n\">graph</span><span class=\"p\">[</span><span class=\"n\">now</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">();</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">graph</span><span class=\"p\">[</span><span class=\"n\">now</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">visit</span><span class=\"p\">[</span><span class=\"n\">next</span><span class=\"p\">]){</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>인접 리스트로 계산시 시간 복잡도는 O(V+E)\n <ul>\n <li>Stack(or recursive)에 모든 노드를 넣기 때문에 O(V), 각 노드에서 연결된 edge를 찾기 때문에 O(E)</li>\n </ul>\n </li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">DFS</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"kt\">bool</span> <span class=\"n\">visited</span><span class=\"p\">[]){</span>\n  <span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">graph</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">();</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n    <span class=\"kt\">int</span> <span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">graph</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"n\">next</span><span class=\"p\">]){</span>\n      <span class=\"n\">DFS</span><span class=\"p\">(</span><span class=\"n\">next</span><span class=\"p\">,</span><span class=\"n\">visited</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Brute_Force/","name":"DFS.md","path":"Algorithm/Brute_Force/DFS.md","url":"/Algorithm/Brute_Force/DFS.html"},{"sort":2,"layout":"default","title":"Knapsack","content":"<h3 id=\"knapsack\">Knapsack</h3>\n\n<ul>\n <li>배낭에 담을 수 있는 무게의 최대값이 정해져있고, 각 물건의 무게와 가치가 주어질 때 배낭에 담을 수 있는 최대 가치를 구하는 문제</li>\n <li>2차원 배열을 생성 - y : 가방의 갯수 / x : 모든 배낭에 넣을 수 있는 최대 무게 (Max Weight)</li>\n <li>x축에서 현재 가방의 무게보다 클 때 넣을 수 있는 최대 양을 기입</li>\n</ul>\n\n<p>In Case</p>\n\n<table>\n <thead>\n <tr>\n <th> </th>\n <th>1</th>\n <th>2</th>\n <th>3</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>Weight</td>\n <td>3</td>\n <td>2</td>\n <td>6</td>\n </tr>\n <tr>\n <td>Value</td>\n <td>30</td>\n <td><strong><span style=\"color:red\">15</span></strong></td>\n <td><strong><span style=\"color:blue\">20</span></strong></td>\n </tr>\n </tbody>\n</table>\n\n<ul>\n <li>BAG COUNT = 3, MAX_Weight = 10</li>\n</ul>\n\n<p>DP</p>\n\n<table>\n <thead>\n <tr>\n <th>i / j</th>\n <th>0</th>\n <th>1</th>\n <th>2</th>\n <th>3</th>\n <th> </th>\n <th>4</th>\n <th>5</th>\n <th> </th>\n <th>6</th>\n <th>7</th>\n <th>8</th>\n <th>9</th>\n <th>10</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>1</td>\n <td>0</td>\n <td>0</td>\n <td>0</td>\n <td><strong><span style=\"color:red\">15</span></strong></td>\n <td> </td>\n <td>30</td>\n <td>30</td>\n <td> </td>\n <td>30</td>\n <td>30</td>\n <td>30</td>\n <td>30</td>\n <td>30</td>\n </tr>\n <tr>\n <td>2</td>\n <td>0</td>\n <td>0</td>\n <td>15</td>\n <td><strong><span style=\"color:blue\">30</span></strong></td>\n <td> </td>\n <td>30</td>\n <td><strong><span style=\"color:red\">45</span></strong></td>\n <td> </td>\n <td>45</td>\n <td>45</td>\n <td>45</td>\n <td>45</td>\n <td>30</td>\n </tr>\n <tr>\n <td>3</td>\n <td>0</td>\n <td>0</td>\n <td>15</td>\n <td>30</td>\n <td> </td>\n <td>30</td>\n <td>45</td>\n <td> </td>\n <td>45</td>\n <td>45</td>\n <td>45</td>\n <td><strong><span style=\"color:blue\">50</span></strong></td>\n <td>50</td>\n </tr>\n </tbody>\n</table>\n\n<p>점화식</p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">j</span> <span class=\"p\">)</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">])</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span>\n  \n<span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">BAG_CNT</span><span class=\"p\">][</span><span class=\"n\">MAX_WEIGHT</span><span class=\"p\">]</span>\n</code></pre>  </div></div>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#define MAX_CNT 10\n#define MAX_WEIGHT 1000\n</span>\n<span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX_CNT</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">MAX_WEIGHT</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">kanpsack</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"n\">C</span><span class=\"p\">,</span><span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"n\">W</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\t\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;=</span><span class=\"n\">MAX_CNT</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">&lt;=</span><span class=\"n\">MAX_WEIGHT</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"n\">W</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">+</span> <span class=\"n\">C</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t\t\t<span class=\"k\">else</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">];</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">MAX_CNT</span><span class=\"p\">][</span><span class=\"n\">MAX_WEIGHT</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">C</span><span class=\"p\">[</span><span class=\"n\">MAX_CNT</span><span class=\"p\">],</span> <span class=\"n\">W</span><span class=\"p\">[</span><span class=\"n\">MAX_CNT</span><span class=\"p\">];</span> <span class=\"c1\">// capacity, weight</span>\n\n\t<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">kanpsack</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">,</span><span class=\"n\">W</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h3 id=\"coin-change\">Coin Change</h3>\n\n<ul>\n <li>Kanpsack 알고리즘을 이용한 알고리즘</li>\n <li>\n <p>동전의 종류의 금액이 주어졌을 때, 특정 금액을 만들기 위한 동전의 최소 갯수를 구하는 문제</p>\n </li>\n <li>\n <p>예로들어, target : 9원 / source : 2원,3원,5원인 경우</p>\n\n <p>Rules of coin change</p>\n </li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1. first step\n2원 + 7원\n3원 + 6원\n5원 + 4원\n\n2. second step (recursive or 2차원 loop)\n[7,6,4]원을 만드는 데 필요한 최소 갯수\n</code></pre>  </div></div>\n\n<ul>\n <li>1차원 배열로 표현\n <ul>\n <li>4원인 경우 (4-2 / 4-3 / 4-5) 를 수행하여 유효한 값인 경우, 그 배열의 값을 더한다.\n <ul>\n <li>즉, 6원인 경우 (6-2 / 6-3 / 6-5) 를 수행하여 유효한 최솟값 + 1을 가져옴</li>\n </ul>\n </li>\n </ul>\n </li>\n</ul>\n\n<table>\n <thead>\n <tr>\n <th>1원</th>\n <th>2원</th>\n <th>3원</th>\n <th>4원</th>\n <th>5원</th>\n <th style=\"text-align: left\">6원</th>\n <th>7원</th>\n <th>8원</th>\n <th>9원</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>-1</td>\n <td>1</td>\n <td>1</td>\n <td>2=1+1</td>\n <td>1</td>\n <td style=\"text-align: left\">1+1=2</td>\n <td>1+1</td>\n <td>1+1</td>\n <td>2+1</td>\n </tr>\n </tbody>\n</table>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">INF</span> <span class=\"o\">=</span> <span class=\"mi\">100'000'000</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">coin_change</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">coins</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"n\">dp</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">coin_cnt</span> <span class=\"o\">=</span> <span class=\"n\">coins</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;=</span><span class=\"n\">value</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"kt\">int</span> <span class=\"n\">minimum</span> <span class=\"o\">=</span> <span class=\"n\">INF</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">coin_cnt</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>            \n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"n\">coins</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                <span class=\"n\">minimum</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">minimum</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"n\">coins</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]]);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">minimum</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">value</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">coins</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">};</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">coin_change</span><span class=\"p\">(</span><span class=\"n\">coins</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">);</span> <span class=\"c1\">// res = 9</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/DP/","name":"Kanpsack.md","path":"Algorithm/DP/Kanpsack.md","url":"/Algorithm/DP/Kanpsack.html"},{"sort":2,"layout":"default","title":"Binary Search","content":"<h1 id=\"binary-search\">Binary Search</h1>\n\n<ul>\n <li>정렬된 array에서 특정 값의 위치를 알아내는 방법</li>\n <li>low 값과 high값을 이용하여 mid 값을 계산하며, 값의 범위를 줄여나감</li>\n <li>길이가 N인 행렬인 경우 log(N)번을 수행하면 원하는 위치를 찾을 수 있기 때문에 시간 복잡도는 O(\\(logN\\))</li>\n</ul>\n\n<p><strong>Lower Bound</strong></p>\n\n<ul>\n <li>target value보다 크거나 같은 값이 나오는 처음 위치</li>\n <li>target value가 여러개 존재하면 target value의 첫번째 index</li>\n</ul>\n\n<p><strong>Upper Bound</strong></p>\n\n<ul>\n <li>target value보다 큰 값이 나오는 처음 위치</li>\n <li>target value가 여러개 존재하면 target value보다 큰 값이 나오는 첫번째 index</li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">lowerBound</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"n\">vc</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">low</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">high</span> <span class=\"o\">=</span> <span class=\"n\">vc</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">low</span> <span class=\"o\">&lt;</span> <span class=\"n\">high</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">low</span> <span class=\"o\">+</span> <span class=\"n\">high</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">value</span> <span class=\"o\">&lt;=</span> <span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">])</span> <span class=\"n\">high</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"n\">low</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">low</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">upperBound</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"n\">vc</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">low</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">high</span> <span class=\"o\">=</span> <span class=\"n\">vc</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">low</span> <span class=\"o\">&lt;</span> <span class=\"n\">high</span><span class=\"p\">)</span> \n    <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">low</span> <span class=\"o\">+</span> <span class=\"n\">high</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">value</span> <span class=\"o\">&gt;=</span> <span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">])</span> <span class=\"n\">low</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span> <span class=\"n\">high</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">low</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">test</span><span class=\"p\">(){</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">vc</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">27</span><span class=\"p\">};</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">lowerBound</span><span class=\"p\">(</span><span class=\"n\">vc</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>  <span class=\"c1\">// 3</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">lowerBound</span><span class=\"p\">(</span><span class=\"n\">vc</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>  <span class=\"c1\">// 3</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">lowerBound</span><span class=\"p\">(</span><span class=\"n\">vc</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>  <span class=\"c1\">// 6</span>\n \n  \t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">upperBound</span><span class=\"p\">(</span><span class=\"n\">vc</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>  <span class=\"c1\">// 3</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">upperBound</span><span class=\"p\">(</span><span class=\"n\">vc</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>  <span class=\"c1\">// 6</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">upperBound</span><span class=\"p\">(</span><span class=\"n\">vc</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>  <span class=\"c1\">// 6</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/ETC/","name":"Binary_Search.md","path":"Algorithm/ETC/Binary_Search.md","url":"/Algorithm/ETC/Binary_Search.html"},{"sort":2,"layout":"default","title":"Biparate Matching","content":"<h1 id=\"biparate-matching\">Biparate Matching</h1>\n\n<ul>\n <li>정점의 갯수가 같은 2개의 그룹을 1:1로 매칭</li>\n <li>B 그룹에서 매칭되어 있지 않거나 다른 A 정점과 매칭시킬 수 있을 때, 재귀를 통해 최대로 연결\n <ul>\n <li>B그룹에 매칭이 안 된 노드를 선택\n <ul>\n <li>Visited -1 초기화</li>\n </ul>\n </li>\n <li>노드와 연결된 A그룹 정점에서 연결이 안되어 있거나 (A[a] == -1), (A[a]가 방문이 안되고 재귀에서 다른 node와 매칭 시켰을 때) 1:1 매칭</li>\n </ul>\n </li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;string.h&gt;\n#define MAX_NODE 1001\n</span><span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span><span class=\"n\">M</span><span class=\"p\">;</span>\n\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"n\">MAX_NODE</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">MAX_NODE</span><span class=\"p\">],</span> <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">MAX_NODE</span><span class=\"p\">];</span>\n<span class=\"kt\">bool</span> <span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"n\">MAX_NODE</span><span class=\"p\">];</span>\n\n<span class=\"kt\">bool</span> <span class=\"nf\">dfs</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">])</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">])))</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n            <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> \n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">biparate_matching</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">));</span>\n    <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">));</span>\n    <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\">// not visit</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">visited</span><span class=\"p\">,</span> <span class=\"nb\">false</span><span class=\"p\">,</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">visited</span><span class=\"p\">));</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span> <span class=\"n\">res</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"c1\">// success matching</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">biparate_matching</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Graph/","name":"Biparate_Matching.md","path":"Algorithm/Graph/Biparate_Matching.md","url":"/Algorithm/Graph/Biparate_Matching.html"},{"sort":2,"layout":"default","title":"Kruskal","content":"<h1 id=\"kruskal\">Kruskal</h1>\n\n<ul>\n <li>\n <p>프림 알고리즘은 node를 기준으로 연결하지만, 크루스칼 알고리즘은 edge를 기준으로 연결</p>\n </li>\n <li>\n <p>edge를 기준으로 하기 때문에 union-find로 edge를 연결함</p>\n </li>\n <li>\n <p>시간 복잡도는 edge로 우선순위 큐를 구성할 때 O(\\(ElogE\\))이다.</p>\n </li>\n <li>\n <p>간선의 수가 적은 Sparse Matrix인 경우, Prim 알고리즘보다 크루스칼이 적합함</p>\n </li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"cp\">#define nodecount 1001\n</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">node</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n<span class=\"n\">vector</span> <span class=\"o\">&lt;</span><span class=\"n\">node</span><span class=\"o\">&gt;</span> <span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">nodecount</span><span class=\"p\">];</span>\n<span class=\"n\">priority_queue</span><span class=\"o\">&lt;</span><span class=\"n\">node</span><span class=\"p\">,</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">node</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"n\">greater</span><span class=\"o\">&lt;</span><span class=\"n\">node</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">pq</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">parent</span><span class=\"p\">[</span><span class=\"n\">nodecount</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">cnt</span><span class=\"p\">,</span> <span class=\"n\">edgecount</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n\t<span class=\"k\">return</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">kruskal</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">edgecount</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">node</span> <span class=\"n\">e</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">pq</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"kt\">int</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">pq</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">pq</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">().</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"n\">pq</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">().</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">tgt</span> <span class=\"o\">=</span> <span class=\"n\">pq</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">().</span><span class=\"n\">e</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">pq</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">),</span> <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">tgt</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p1</span> <span class=\"o\">!=</span> <span class=\"n\">p2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"c1\">// union</span>\n\t\t\t<span class=\"n\">ret</span> <span class=\"o\">+=</span> <span class=\"n\">value</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">cnt</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">parent</span><span class=\"p\">[</span><span class=\"n\">p1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">p2</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">cnt</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"cycle\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">cnt</span> <span class=\"o\">!=</span> <span class=\"n\">nodecount</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"all node not connected\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/MST/","name":"Kruskal.md","path":"Algorithm/MST/Kruskal.md","url":"/Algorithm/MST/Kruskal.html"},{"sort":2,"layout":"default","title":"Dijkstra","content":"<h1 id=\"dijkstra\">Dijkstra</h1>\n\n<ul>\n <li>source node에서 target node까지 최단 거리를 계산하는 알고리즘</li>\n <li>시간 복잡도는 O((V+E)logV) - pibonachi heap을 사용하여 priority queue가 작동\n <ul>\n <li>시작점에서 방문하지 않은 노드 중 가장 짧은 거리를 계산하는데 O(VlogV)의 시간 복잡도가 필요함 (node : V)</li>\n <li>인접 노드의 최단거리 업데이트 시 O(ElogV)의 시간 복잡도가 필요 ( edge : E)</li>\n </ul>\n </li>\n <li>Dijkstra 알고리즘은 음의 가중치에는 적용할 수 없다.</li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"cp\">#define node 20001  // max node\n</span>\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">INF</span> <span class=\"o\">=</span> <span class=\"mf\">1e9</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"p\">;</span>\n<span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">];</span>  <span class=\"c1\">// node to node and value</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">];</span>\n<span class=\"kt\">bool</span> <span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">];</span>\n\n<span class=\"n\">priority_queue</span><span class=\"o\">&lt;</span><span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span> <span class=\"n\">greater</span><span class=\"o\">&lt;</span><span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pq</span><span class=\"p\">;</span> <span class=\"c1\">// calculate from minimum distance</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">dijkstra</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">pq</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">});</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">pq</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">pq</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">().</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">pq</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">().</span><span class=\"n\">second</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"n\">now</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">pq</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;::</span><span class=\"n\">size_type</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">now</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"kt\">int</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">now</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">now</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">second</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"n\">next</span><span class=\"p\">])</span>  <span class=\"c1\">// not visited</span>\n\t\t\t<span class=\"p\">{</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">next</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">d</span> <span class=\"o\">+</span> <span class=\"n\">value</span><span class=\"p\">)</span> \n\t\t\t\t<span class=\"p\">{</span>\n\t\t\t\t\t<span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">next</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">d</span> <span class=\"o\">+</span> <span class=\"n\">value</span><span class=\"p\">;</span>  <span class=\"c1\">// updated least distance</span>\n\t\t\t\t\t<span class=\"n\">pq</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">({</span><span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">next</span><span class=\"p\">],</span> <span class=\"n\">next</span><span class=\"p\">});</span>  \n\t\t\t\t<span class=\"p\">}</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">init</span><span class=\"p\">(){</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">nodecount</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">nodecount</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">INF</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"n\">dijkstra</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Shortest_Path/","name":"Dijkstra.md","path":"Algorithm/Shortest_Path/Dijkstra.md","url":"/Algorithm/Shortest_Path/Dijkstra.html"},{"sort":2,"layout":"default","title":"Quick Sort","content":"<h1 id=\"quick-sort\">Quick Sort</h1>\n\n<ul>\n <li>sort of divide and conquer algorithm.</li>\n <li>After setting the value of the middle position to pivot, index moves from left to greater than pivot.</li>\n <li>After that, index moves from right to less than pivot.</li>\n <li>Then <code class=\"language-plaintext highlighter-rouge\">array[right] &lt; pivot &lt; arr[left]</code> is established, so change the positions of left and right.</li>\n <li>If the moving right is greater than the initial start point, qsort cannot be applied to the values in between, so recursion is performed again.</li>\n <li>Like that, If the moving left is smaller than the initil end point, qsort can not be applied to the values in between, so recursin is performed again.</li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">quicksort</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">end</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">pivot</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[(</span><span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"n\">right</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">];</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">left</span> <span class=\"o\">&lt;</span> <span class=\"n\">right</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">pivot</span><span class=\"p\">)</span> <span class=\"n\">left</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">right</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">pivot</span><span class=\"p\">)</span> <span class=\"n\">right</span><span class=\"o\">--</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">left</span> <span class=\"o\">&lt;=</span> <span class=\"n\">right</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"p\">],</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">right</span><span class=\"p\">]);</span>\n\t\t\t<span class=\"o\">++</span><span class=\"n\">left</span><span class=\"p\">;</span>\n\t\t\t<span class=\"o\">--</span><span class=\"n\">right</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">start</span> <span class=\"o\">&lt;</span> <span class=\"n\">right</span><span class=\"p\">)</span> <span class=\"n\">quicksort</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">left</span> <span class=\"o\">&lt;</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"n\">quicksort</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"kt\">int</span> <span class=\"nf\">cmp</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">b</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">cmp2</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">b</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">b</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"c1\">//\treturn strcmp((char*)a,(char*)b);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(){</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">242</span><span class=\"p\">,</span> <span class=\"mi\">63</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">};</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">arr2</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">242</span><span class=\"p\">,</span> <span class=\"mi\">63</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">};</span>\n\t<span class=\"n\">qsort</span><span class=\"p\">(</span><span class=\"n\">arr2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">),</span> <span class=\"n\">cmp</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">arr2</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n\t<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">9</span><span class=\"p\">;</span>\n\t<span class=\"kt\">char</span> <span class=\"n\">arr3</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">][</span><span class=\"mi\">10</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">\"aa\"</span><span class=\"p\">,</span> <span class=\"s\">\"Ab\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bc\"</span><span class=\"p\">,</span> <span class=\"s\">\"ss\"</span><span class=\"p\">,</span> <span class=\"s\">\"es\"</span><span class=\"p\">,</span> <span class=\"s\">\"ds\"</span><span class=\"p\">,</span> <span class=\"s\">\"cas\"</span><span class=\"p\">,</span> <span class=\"s\">\"ca\"</span><span class=\"p\">,</span> <span class=\"s\">\"csa\"</span><span class=\"p\">};</span>\n\t<span class=\"n\">heapsort</span><span class=\"p\">(</span><span class=\"n\">arr3</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">arr3</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"n\">cmp2</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">arr3</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n\n\n\t<span class=\"n\">quicksort</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n\t\t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\t\n<span class=\"p\">}</span>\n\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Sort/","name":"Quick.md","path":"Algorithm/Sort/Quick.md","url":"/Algorithm/Sort/Quick.html"},{"sort":2,"layout":"default","title":"Suffix Array","content":"<h1 id=\"suffix-array\">Suffix Array</h1>\n\n<ul>\n <li>문자열에 존재하는 모든 접미사를 정렬</li>\n <li>ABAABA라는 배열이 있다고 가정하면\n <ul>\n <li>A / BA / ABA / AABA / BAABA / ABAABA 라는 6개의 접미사를 생성할 수 있음</li>\n <li>이 6개의 배열을 정렬하여 인덱스 배열을 만듦</li>\n </ul>\n </li>\n</ul>\n\n<table>\n <thead>\n <tr>\n <th> </th>\n <th>A</th>\n <th>AABA</th>\n <th>ABA</th>\n <th>ABAABA</th>\n <th>BA</th>\n <th>BAABA</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>SA</td>\n <td>5</td>\n <td>2</td>\n <td>3</td>\n <td>0</td>\n <td>4</td>\n <td>1</td>\n </tr>\n </tbody>\n</table>\n\n<ul>\n <li>접미사를 구현하는 방법에는 Naive / Manber-Mayers 알고리즘 2가지가 있음\n <ul>\n <li>Naive 알고리즘의 시간 복잡도는 O(\\(N^2log(N)\\)) 이므로 사용하는데 효과적이지 않음\n <ul>\n <li>정말 단순하게 모든 접미사를 구하고 정렬하는 방식</li>\n </ul>\n </li>\n <li>Manber-Mayers 알고리즘의 시간 복잡도는 O(\\(N(logN)^2\\))이므로 Suffix Array를 구할 때는 Manber-Mayers를 적용</li>\n </ul>\n </li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>Manber-Myers Algorithm</strong></p>\n\n<ul>\n <li>정렬할 때 Rank를 사용하고, 기수정렬 컨셉을 적용\n <ul>\n <li>반복문을 통해서 2의 거듭제곱 단위로 비교할 문자열을 지정하는데 O(\\(logN\\))</li>\n <li>비교할 문자열이 지정된 상태에서 배열 정렬할 때 O(\\(NlogN\\))</li>\n </ul>\n </li>\n <li>그룹이 같은 경우, 2의 거듭제곱에 있는 문자열을 비교하여 그룹이 같을 때 동일 그룹으로 지정\n <ul>\n <li>2의 거듭재곱에 있는 문자열도 동일한 경우, 같은 그룹으로 엮은 후 다음 2의 거듭제곱에서 비교</li>\n </ul>\n </li>\n <li>그룹이 다른 경우, 새로운 그룹 번호로 지정</li>\n <li>그룹 비교를 하면서 그룹에 변경할 내용을 반영해야되기 때문에, new group이라는 임시 값을 만들어서 비교</li>\n <li>new group의 default값이 0이므로, <code class=\"language-plaintext highlighter-rouge\">ng[SA[0]] = 1;</code> 같은 양수 값을 넣어줌\n <ul>\n <li>0으로 사용시 동일 rank(group)으로 인식</li>\n </ul>\n </li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">getsfx</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"o\">&amp;</span><span class=\"n\">str</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">G</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"n\">SA</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">ng</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">SA</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span><span class=\"c1\">// - 'a';</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">diff</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">diff</span> <span class=\"o\">&lt;&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">auto</span> <span class=\"n\">cmp</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"p\">){</span>\n            <span class=\"k\">return</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">?</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"n\">diff</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"n\">diff</span><span class=\"p\">];</span>\n        <span class=\"p\">};</span>\n        <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">SA</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">SA</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"n\">cmp</span><span class=\"p\">);</span> <span class=\"c1\">// align suffix array</span>\n        <span class=\"n\">ng</span><span class=\"p\">[</span><span class=\"n\">SA</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">// bigger than 0 (default ng is 0)</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">ng</span><span class=\"p\">[</span><span class=\"n\">SA</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">ng</span><span class=\"p\">[</span><span class=\"n\">SA</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">+</span> <span class=\"n\">cmp</span><span class=\"p\">(</span><span class=\"n\">SA</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">SA</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]);</span> <span class=\"c1\">// if rank is differ, assign next rank</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">ng</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">SA</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p><strong>추가로 확인이 필요한 내용</strong></p>\n\n<ul>\n <li>Radix Sort 대신 Counting Sort를 사용하는 경우, 시간 복잡도가 O(\\(N(logN)^2\\))애서 O(\\(NlogN\\)) 으로 줄어듦\n <ul>\n <li>Sort Altorithm들 정리 후 작성</li>\n </ul>\n </li>\n <li>그리고 O(N)으로 구현하는 방법도 있다고 함\n <ul>\n <li>O(\\(NlogN\\) )을 정리한 후 정리</li>\n </ul>\n </li>\n</ul>\n","dir":"/Algorithm/String/","name":"Suffix_Array.md","path":"Algorithm/String/Suffix_Array.md","url":"/Algorithm/String/Suffix_Array.html"},{"sort":2,"layout":"default","title":"Key","content":"<h1 id=\"key\">Key</h1>\n\n<ul>\n <li>asdas</li>\n</ul>\n","dir":"/Computer_Science/Database/","name":"Key.md","path":"Computer_Science/Database/Key.md","url":"/Computer_Science/Database/Key.html"},{"sort":2,"layout":"default","title":"Redis","content":"<h1 id=\"redis\">Redis</h1>\n\n","dir":"/Computer_Science/Database/NOSQL/","name":"Redis.md","path":"Computer_Science/Database/NOSQL/Redis.md","url":"/Computer_Science/Database/NOSQL/Redis.html"},{"sort":2,"layout":"default","title":"Oracle","content":"<h1 id=\"oracle\">Oracle</h1>\n\n","dir":"/Computer_Science/Database/RDBMS/","name":"Oracle.md","path":"Computer_Science/Database/RDBMS/Oracle.md","url":"/Computer_Science/Database/RDBMS/Oracle.html"},{"sort":2,"layout":"default","title":"HTTP","content":"<h3 id=\"http\">HTTP</h3>\n\n<ul>\n <li>World Wide Web에서 주고 받을 수 있는 HyperText Transfer Protocol이다.</li>\n <li>클라이언트와 서버 사이에 간 통신하는 request / response Protocol\n <ul>\n <li>request : Client -&gt; Server로 전달하는 메시지로 80번 port로 Server에 동작을 발생시킴</li>\n <li>response : Request에 대한 Server의 내부동작 후 Client로 전달하는 메시지</li>\n </ul>\n </li>\n <li>HTML 같은 리소스를 가져올 수 있는 프로토콜\n <ul>\n <li>HTTP를 통해 전달되는 자료는 URL을 통해 조회 가능하다</li>\n </ul>\n </li>\n <li>HTTP의 General / Entity / Request / Response Header 등이 있다.\n <ul>\n <li>General Header는 Date / Connection / Cache-Control 등의 값을 설정하고, Request / Response Message에서 모두 사용할 수 있다.</li>\n <li>Entity Header는 Content-Type/Language/Encoding/Length 등의 값을 설정하고, Request / Response Message에서 모두 사용됨</li>\n <li>Request Header는 Request Message에서만 사용되며, HOST(domain-Name) / User-Agent / Accept (File Type) / Cookie / Origin 등의 값을 포함하고 있다.</li>\n <li>Response Header는 Response Message에서만 사용되며, Server / Set-Cookie / Age / Access-Control-Allow-Origin / Allow (Http Method) 등의 값을 포함하고 있다.</li>\n </ul>\n </li>\n <li>HTTP Body는 데이터의 컨텐츠 및 Message나 데이터를 해석할 수 있는 정보 등이 제공됨\n <ul>\n <li>모든 HTTP Request들이 Body를 포함하는 것은 아님\n <ul>\n <li>대부분의 GET Request는 Body를 포함하고 있지 않아서 빈 값으로 전송</li>\n <li>Post인 경우, Body에 데이터를 포함하여 전송</li>\n <li>Header의 Content-Type Field에 어떤 데이터 타입인지 명시</li>\n </ul>\n </li>\n <li>HTML 코드, Image, CSS, JS 코드 등이 포함되어 전송됨</li>\n </ul>\n </li>\n</ul>\n\n<p><br /></p>\n\n<h3 id=\"http-request-method\">HTTP request Method</h3>\n\n<hr />\n\n<p><strong>GET</strong> : 지정된 리소스에서 데이터를 요청할 때 사용 (SELECT)</p>\n\n<ul>\n <li>query는 get요청의 url로 전송됨</li>\n <li>cache 가능하고, 브라우저에 기록이 남아있음</li>\n <li>URL의 길이 제한은 브라우저 종류/버전 등에 의해 달라지지만, 일반적으로 MS에서 제공하는 브라우저(IE, Edge)나 Chrome은 2048자(2MB)이고, Firefox / Safari 등은 64k 이상 지원</li>\n <li>일반적으로 body를 사용하지 않고</li>\n</ul>\n\n<pre><code class=\"language-apl\">GET /form/1 HTTP/1.1\nHost : ~\nUser-Agent : ~\n~\n</code></pre>  \n\n<p><strong>HEAD</strong> : GET 요청과 동일하지만, Response의 Body가 없다</p>\n\n<ul>\n <li>body 외 다른 정보만 필요할 때 유용하게 사용할 수 있음</li>\n</ul>\n\n<p><strong>POST</strong> : 리소스를 생성하거나 업데이트하기 위해 서버를 데이터에 보낼 때 사용 (INSERT)</p>\n\n<ul>\n <li>Request요청에 포함된 Entity(Body)를 Request-URI에 정의된 Resource의 Subordinate Entity로 생성한다\n <ul>\n <li>Request-URI는 Collection-URI이다</li>\n </ul>\n </li>\n <li>일반적으로 cache 불가능하고, 브라우저에 기록이 남지 않음\n <ul>\n <li>Cache-Control-header를 이용하여 Caching을 구현하여 응답할 수는 있음 (300번대-redirect로 응답)</li>\n </ul>\n </li>\n <li>URL의 길이 제한이 없다</li>\n</ul>\n\n<pre><code class=\"language-apl\">POST /form HTTP/1.1\nHost: ~\nUser-Agent : ~\n{\n\tparam1:value1\n\tparam2:value2\n}\n</code></pre>  \n\n<p><strong>PUT</strong> : 리소스를 생성하거나 업데이트하기 위해 서버를 데이터에 보낼 때 사용\t(UPDATE)</p>\n\n<ul>\n <li>POST Method와 다르게 PUT Method는 Idempotent(멱등)함\n <ul>\n <li>PUT으로 동일한 요청을 여러번 보낼 때 동일한 결과값을 보냄\n <ul>\n <li>Resource가 존재하면 Update하고, 존재하지 않으면 Create함</li>\n </ul>\n </li>\n <li>반면, POST Request는 동일한 요청을 보낼 때마다 resource를 생성한다.\n <ul>\n <li>primary key가 다른 데이터를 생성</li>\n <li>생성하는 data를 unique key로 설정하면 중복된 데이터 생성을 막을 수 있다.</li>\n </ul>\n </li>\n <li>Idempotent하지만, response를 cache하지 않음</li>\n </ul>\n </li>\n <li>클라이언트가 변경 대상의 Resource-URI를 지정하여 사용\n <ul>\n <li>Post는 request URI에 <code class=\"language-plaintext highlighter-rouge\">/Collection URI</code> 까지 표현하지만, PUT은 <code class=\"language-plaintext highlighter-rouge\">/Collection URI/Resource Identifier</code>가 포함됨</li>\n </ul>\n </li>\n</ul>\n\n<pre><code class=\"language-apl\">PUT /form/1 HTTP/1.1\nHost : ~\nUser-Agent : ~\n{\n\tparam1:value1\n\tparam2:value2\n}\n</code></pre>  \n\n<p><strong>PATCH</strong> : PUT과 마찬가지로 데이터를 Update에 주로 사용하지만, PATCH는 변경되는 값만 보내줘도 된다.</p>\n\n<ul>\n <li>PUT에서 <code class=\"language-plaintext highlighter-rouge\">param2:value4</code> 로 업데이트 하기 위해서는 <code class=\"language-plaintext highlighter-rouge\">param1:value1 &amp; param2:value4</code> 를 Resource-URI 주소와 보내줘야 하지만, PATCH에서는 Resource-URI에서 변경되는 값만 보내줘도 된다.\n <ul>\n <li>PUT에서 <code class=\"language-plaintext highlighter-rouge\">param2:value4</code>만 전송하게 되면 <code class=\"language-plaintext highlighter-rouge\">param1</code> 은 default값으로 대체됨</li>\n </ul>\n </li>\n</ul>\n\n<p><strong>DELETE</strong> : resource를 삭제할 때 사용</p>\n\n<ul>\n <li>resource를 삭제하기 때문에 명확한 Resource-URI가 필요</li>\n</ul>\n\n<pre><code class=\"language-apl\">DELETE /form/1 HTTP/1.1\nHost : ~\nUser-Agent : ~\n</code></pre>  \n\n<p><strong>TRACE</strong> : 서버에 전송한 request 메시지의 복사본을 받기 위해 사용</p>\n\n<ul>\n <li>\n <p>request가 제대로 전송되었는지 주로 디버깅 목적으로 사용됨</p>\n </li>\n <li>target resource에 대한 경로를 따라서 message loopback 테스트를 수행\n <ul>\n <li>Message에 문제가 생겼거나 어떻게 변경되었는지 확인</li>\n </ul>\n </li>\n <li>Indempotent하며 캐시 불가능한 Method</li>\n <li>XST (Cross Site Tracing) Attack\n <ul>\n <li>서버에서 trace method를 지원하고 있을 때, XSS Cookie의 httponly 옵션을 우회하여 session cookie를 탈취</li>\n <li>Trace Method를 허용하는 브라우저에서 Trace method를 사용하면 request message를 그대로 받아오는 것을 이용</li>\n <li>현재 대부분의 브라우저에서는 클라이언트-서버 사이에 proxy 서버가 존재하는 경우 Trace Method를 비활성화하여 사용 못하게 했음</li>\n </ul>\n </li>\n</ul>\n\n<pre><code class=\"language-apl\">TRACE /form\nHost : ~\n</code></pre>  \n\n<p><br /></p>\n\n<p><br /></p>\n\n<h3 id=\"https\">HTTPS</h3>\n\n<ul>\n <li>HyperText Transfer Protocol over Secure/TLS/SSL/Secure-Socket-Layer 로 W3 Protocol인 HTTP에 암호화가 추가됨</li>\n <li>HTTPS의 TCP/IP Port는 443이다 (HTTP : 80)</li>\n <li>소켓 통신에서는 일반 텍스트를 사용하지만, SSL/TLS Protocol을 통해 Session 데이터를 암호화 함</li>\n <li>SPDY\n <ul>\n <li>웹 컨텐츠 전송을 목적으로 구글에서 개발한 비표준 개방향 네트워크 protocol로 TLS와 HTTP의 중간 Layer에 위치</li>\n <li>압축, Multiplexing, 우선순위 등을 설정하여 latency 감소</li>\n <li>암호화 한 연결만은 지원하기 때문에 SSL or TLS로 암호화되어야 함</li>\n <li>HTTP/2가 SPDY 프로토콜 기반으로 통신하기 때문에 SPDY는 서비스가 종료됨</li>\n <li>HTTP/2에서는 HTTPS를 기본적으로 사용하기때문에 HTTPS가 HTTP보다 속도가 빠를 수 있다고 생각할 수 있지만, 동일한 1.1 버전에서 비교시에는 HTTP가 빠른 것으로 앎 (암호화 과정 생략)</li>\n </ul>\n </li>\n <li>HTTPS는 대칭키와 비대칭키 암호화를 모두 사용</li>\n <li>비대칭키(공개키) 암호화는 초기 설정단계에 사용되며, 이후 대칭키(세션키)로 대체됨</li>\n <li>암호화 동작 과정\n <ul>\n <li>클라이언트가 서버에 접근하면, 서버가 비대칭키(공개키)를 클라이언트로 전송함</li>\n <li>클라이언트는 비대칭키를 이용하여 암호화 된 세션키(대칭키)를 생성하고, 서버와 공유</li>\n <li>서버는 비밀키를 이용하여 세션키를 해석하여 END-END에는 클라이언트가 생성한 세션키가 존재</li>\n <li>비대칭키(공개키) 암호화가 종료되면서 세션키(대칭키)로 대체되어 데이터 전송시 세션키로 암호화하여 전송</li>\n <li>세션키는 연결이 끊기기 전까지 유지됨</li>\n </ul>\n </li>\n</ul>\n\n<p><img src=\"/Computer_Science/Network/Img/How-HTTPS-Works.png\" alt=\"How-HTTPS-Works\" /></p>\n\n<div style=\"text-align: right\"> Image ref : https://tiptopsecurity.com/how-does-https-work-rsa-encryption-explained/ </div>\n\n<p><br /></p>\n\n","dir":"/Computer_Science/Network/","name":"HTTP.md","path":"Computer_Science/Network/HTTP.md","url":"/Computer_Science/Network/HTTP.html"},{"sort":2,"layout":"default","title":"Processor","content":"<h1 id=\"processor\">Processor</h1>\n\n<ul>\n <li>Processor는 명령어를 처리하고 반응하기 위한 논리 회로로 Control Unit과 ALU로 구성됨\n <ul>\n <li>CPU : Memory, 연산, Control 3가지 기능을 수행하는 PC의 가장 중요한 부품으로 클럭 구동 방식을 사용\n <ul>\n <li>MicroProcessor는 CPU의 기능을 하나의 작은 칩에 집적회로로 내장된 형태</li>\n <li>MPU : ALU와 Register를 하나의 칩으로 구성한 연산 전용 CPU</li>\n <li>MCU : MicroProcessor와 Interface, Memory 등을 하나의 칩으로 구성한 제어 목적 CPU</li>\n </ul>\n </li>\n </ul>\n </li>\n <li>Core는 Processor의 Cache, Controller, Interface를 제외하고 실제 연산을 수행하는 핵심 요소\n <ul>\n <li>Core는 Control Unit, ALU와 같은 직접 연산을 수행하는 부품과 자체 Cache Memory로 구성</li>\n <li>Multi Core(두 개 이상의 Core를 단일 집적회로로 하나의 칩으로 만듦) 프로세서를 이용하여 CPU 성능을 향상</li>\n </ul>\n </li>\n</ul>\n\n<p><img src=\"./Img/Processor.png\" alt=\"CPU\" /></p>\n\n<div style=\"text-align: right\"> https://www.sciencedirect.com/topics/computer-science/core-processor </div>\n\n<h3 id=\"instruction-set-architecture-isa\">Instruction Set Architecture (ISA)</h3>\n\n<ul>\n <li>하드웨어와 소프트웨어의 Interface로, 상호작용할 수 있는 명령어 집합</li>\n <li>MicroProcessor가 실행할 수 있는 기계어로 된 명령어를 HW에 전달</li>\n <li>CPU마다 기계어의 코드가 달라서 호환의 어려움이 있고, 명령어는 opcode, operand로 구성됨\n <ul>\n <li>opcode(operation code) : Control Signal Table에서 ALU의 명령어를 관리하는 ADD, SUB, AND 등 3bit(or 4bit)로 구성</li>\n <li>Operand : 상수, 메모리 주소, register 등 opcode가 연산을 수행하는 대상</li>\n </ul>\n </li>\n <li>Intel의 x86, AMD x86-64는 CISC로 설계되었고, ARM의 v8, MIPS는 RISC로 설계됨\n <ul>\n <li>제조사마다 Architecture가 다르기 때문에 CPU의 명령어 해석구조도 다름</li>\n </ul>\n </li>\n <li><strong>CISC</strong> (Complex Instruction Set Computer)\n <ul>\n <li>가변 형식 명령어를 사용하고 명령어가 많고 복잡하고, 디코딩하여 사용하기 때문에 속도가 느림</li>\n <li>다양한 명령어와 다양한 Addressing mode를 사용하여 많은 메모리 참조 연산을 수행</li>\n <li>메인 메모리를 효율적으로 사용할 수 있고, 명령어가 복잡하기 때문에 새로운 명령을 쉽게 추가할 수 있음</li>\n <li>다양한 명령이 클럭에 영향을 줄 수 있기 때문에 기계 성능 저하</li>\n </ul>\n </li>\n <li><strong>RISC</strong> (Reduced Instruction Set Computer)\n <ul>\n <li>고정된 명령어를 사용하고 명령어가 적으며 간단한 Addressing mode를 사용</li>\n <li>Register 기반 명령을 사용하기 때문에 Context Swiching의 속도가 향상됨</li>\n <li>컴파일러에 많은 복잡성을 부여하여 프로세서 성능에 영향을 줄 수 있음</li>\n <li>CICS를 사용하는 x86에서도 복잡한 명령을 내부에서 RICS처럼 간단한 명령으로 나누어 처리하기 때문에 경계가 모호해지고 있음</li>\n </ul>\n </li>\n <li>CISC는 적은 수의 Assembly Code로 작업을 완료하고, RISC는 각 명령이 실행되는데 걸리는 시간을 줄이는 데 장점</li>\n</ul>\n\n<h3 id=\"microarchitecture\">MicroArchitecture</h3>\n\n<ul>\n <li>ISA에 구현하는 방법을 정의</li>\n</ul>\n\n","dir":"/Computer_Science/OS/","name":"Processor.md","path":"Computer_Science/OS/Processor.md","url":"/Computer_Science/OS/Processor.html"},{"sort":2,"layout":"default","title":"Binary Search Tree","content":"<h1 id=\"binary-search-tree\">Binary Search Tree</h1>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code></code></pre>  </div></div>\n\n","dir":"/DataStructure/Binary_Tree/","name":"Binary_Search_Tree.md","path":"DataStructure/Binary_Tree/Binary_Search_Tree.md","url":"/DataStructure/Binary_Tree/Binary_Search_Tree.html"},{"sort":2,"layout":"default","title":"Queue","content":"<h1 id=\"queue\">Queue</h1>\n\n<ul>\n <li>\n <p>FIFO (First In First Out)을 따르는 Container</p>\n\n <ul>\n <li>\n <p>Push : 리스트의 가장 우측에 값을 넣음</p>\n </li>\n <li>\n <p>Pop : 리스트의 가장 좌측 값을 제거</p>\n </li>\n </ul>\n </li>\n <li>\n <p>Front와 Back을 참조할 수 있으며, LinkedList로 구현하여 Size가 자동으로 변경됨</p>\n </li>\n</ul>\n\n<p><br /></p>\n\n<p><img src=\"/DataStructure/Container/Img/Queue.png\" alt=\"Queue\" /></p>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">qnode</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"p\">;</span>\n    <span class=\"n\">qnode</span> <span class=\"o\">*</span><span class=\"n\">next</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"nc\">T</span><span class=\"p\">&gt;</span>\n<span class=\"k\">class</span> <span class=\"nc\">_Queue</span>\n<span class=\"p\">{</span>\n<span class=\"nl\">private:</span>\n    <span class=\"n\">qnode</span> <span class=\"o\">*</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">rear</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">_size</span><span class=\"p\">;</span>\n\n<span class=\"nl\">public:</span>\n    <span class=\"n\">_Queue</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">rear</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n        <span class=\"n\">_size</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"o\">~</span><span class=\"n\">_Queue</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">empty</span><span class=\"p\">())</span>\n            <span class=\"n\">pop</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">void</span> <span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">qnode</span> <span class=\"o\">*</span><span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">qnode</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">qnode</span><span class=\"p\">));</span>\n        <span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n        <span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">())</span>\n            <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">rear</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">rear</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">;</span>\n            <span class=\"n\">rear</span> <span class=\"o\">=</span> <span class=\"n\">rear</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">_size</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n    <span class=\"kt\">void</span> <span class=\"n\">pop</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">())</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"There's no component</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">qnode</span> <span class=\"o\">*</span><span class=\"n\">delnode</span> <span class=\"o\">=</span> <span class=\"n\">first</span><span class=\"p\">;</span>\n        <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">delnode</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n        <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">delnode</span><span class=\"p\">);</span>\n        <span class=\"n\">_size</span><span class=\"o\">--</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">T</span> <span class=\"n\">front</span><span class=\"p\">(){</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">())</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"There's no component</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">first</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">T</span> <span class=\"n\">back</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">())</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"There's no component</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">rear</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">bool</span> <span class=\"n\">empty</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"o\">!</span><span class=\"n\">_size</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">_size</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre>  </div></div>\n\n","dir":"/DataStructure/Container/","name":"Queue.md","path":"DataStructure/Container/Queue.md","url":"/DataStructure/Container/Queue.html"},{"sort":2,"layout":"default","title":"Radix Tree","content":"<h1 id=\"radix-tree\">Radix Tree</h1>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code></code></pre>  </div></div>\n\n","dir":"/DataStructure/Tree/","name":"Radix_Tree.md","path":"DataStructure/Tree/Radix_Tree.md","url":"/DataStructure/Tree/Radix_Tree.html"},{"sort":2,"layout":"default","title":"JSON","content":"<h1 id=\"json\">JSON</h1>\n\n","dir":"/Study/API/","name":"JSON.md","path":"Study/API/JSON.md","url":"/Study/API/JSON.html"},{"sort":2,"layout":"default","title":"Server Side","content":"<h1 id=\"server-side\">Server Side</h1>\n\n","dir":"/Study/Caching/","name":"Server_Side.md","path":"Study/Caching/Server_Side.md","url":"/Study/Caching/Server_Side.html"},{"sort":2,"layout":"default","title":"Client Side","content":"<h1 id=\"client-side\">Client Side</h1>\n\n","dir":"/Study/Cloud/","name":"Client_Side.md","path":"Study/Cloud/Client_Side.md","url":"/Study/Cloud/Client_Side.html"},{"sort":2,"layout":"default","title":"Command","content":"<h1 id=\"command\">Command</h1>\n\n","dir":"/Study/Design_Pattern/Behavioral/","name":"Command.md","path":"Study/Design_Pattern/Behavioral/Command.md","url":"/Study/Design_Pattern/Behavioral/Command.html"},{"sort":2,"layout":"default","title":"Builder","content":"<h1 id=\"builder\">Builder</h1>\n\n","dir":"/Study/Design_Pattern/Creational/","name":"Builder.md","path":"Study/Design_Pattern/Creational/Builder.md","url":"/Study/Design_Pattern/Creational/Builder.html"},{"sort":2,"layout":"default","title":"Bridge","content":"<h1 id=\"bridge\">Bridge</h1>\n\n","dir":"/Study/Design_Pattern/Structural/","name":"Bridge.md","path":"Study/Design_Pattern/Structural/Bridge.md","url":"/Study/Design_Pattern/Structural/Bridge.html"},{"sort":2,"layout":"default","title":"TravisCI","content":"<h1 id=\"travisci\">TravisCI</h1>\n\n","dir":"/Study/Infrastructure/CICD_Tool/","name":"Travis_CI.md","path":"Study/Infrastructure/CICD_Tool/Travis_CI.md","url":"/Study/Infrastructure/CICD_Tool/Travis_CI.html"},{"sort":2,"layout":"default","title":"Chef","content":"<h1 id=\"chef\">Chef</h1>\n\n","dir":"/Study/Infrastructure/Configuration_Management/","name":"Chef.md","path":"Study/Infrastructure/Configuration_Management/Chef.md","url":"/Study/Infrastructure/Configuration_Management/Chef.html"},{"sort":2,"layout":"default","title":"Docker Swarm","content":"<h1 id=\"docker-swarm\">Docker Swarm</h1>\n\n","dir":"/Study/Infrastructure/Container_Orchestration/","name":"Docker_Swarm.md","path":"Study/Infrastructure/Container_Orchestration/Docker_Swarm.md","url":"/Study/Infrastructure/Container_Orchestration/Docker_Swarm.html"},{"sort":2,"layout":"default","title":"CloudFormation","content":"<h1 id=\"cloudformation\">CloudFormation</h1>\n\n","dir":"/Study/Infrastructure/Provisioning/","name":"CloudFormation.md","path":"Study/Infrastructure/Provisioning/CloudFormation.md","url":"/Study/Infrastructure/Provisioning/CloudFormation.html"},{"sort":2,"layout":"default","title":"DRY","content":"<h1 id=\"dry\">DRY</h1>\n\n","dir":"/Study/Software_Development/OOP_Principle/","name":"Dry.md","path":"Study/Software_Development/OOP_Principle/Dry.md","url":"/Study/Software_Development/OOP_Principle/Dry.html"},{"sort":2,"layout":"default","title":"Integration Testing","content":"<h1 id=\"integration-testing\">Integration Testing</h1>\n\n<p>Description</p>\n\n<p>sd</p>\n","dir":"/Study/Software_Development/Test_Driven_Development/","name":"Integration.md","path":"Study/Software_Development/Test_Driven_Development/Integration.md","url":"/Study/Software_Development/Test_Driven_Development/Integration.html"},{"sort":3,"layout":"default","title":"KISS","content":"<h1 id=\"kiss\">KISS</h1>\n\n","dir":"/Study/Software_Development/OOP_Principle/","name":"Kiss.md","path":"Study/Software_Development/OOP_Principle/Kiss.md","url":"/Study/Software_Development/OOP_Principle/Kiss.html"},{"sort":3,"layout":"default","title":"Authentication","content":"<h1 id=\"authentication\">Authentication</h1>\n\n","dir":"/Study/API/","name":"Authentication.md","path":"Study/API/Authentication.md","url":"/Study/API/Authentication.html"},{"sort":3,"layout":"default","title":"Cassandra","content":"<h1 id=\"cassandra\">Cassandra</h1>\n\n","dir":"/Computer_Science/Database/NOSQL/","name":"Cassandra.md","path":"Computer_Science/Database/NOSQL/Cassandra.md","url":"/Computer_Science/Database/NOSQL/Cassandra.html"},{"sort":3,"layout":"default","title":"PowerSet","content":"<h1 id=\"powerset\">PowerSet</h1>\n\n<ul>\n <li>배열을 이용하여 나타낼 수 있는 모든 부분집합을 표현</li>\n <li>배열의 크기가 n인 경우, 부분집합의 갯수는 \\(2^n\\) 개이다.</li>\n <li>bool type으로 true / false를 부여하여 사용 여부를 설정</li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">],</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">];</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">powerset</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">count</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%d \"</span><span class=\"p\">,</span> <span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">powerset</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">powerset</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">implement</span><span class=\"p\">(){</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">powerset</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Math/","name":"PowerSet.md","path":"Algorithm/Math/PowerSet.md","url":"/Algorithm/Math/PowerSet.html"},{"sort":3,"layout":"default","title":"Bellman Ford","content":"<h1 id=\"bellman-ford\">Bellman Ford</h1>\n\n<ul>\n <li>단일 소스의 최단거리를 찾는 알고리즘 중 하나</li>\n <li>\n <p>시간 복잡도 측면에서 dijkstra보다 오래 걸리지만, 음의 가중치도 계산할 수 있음</p>\n </li>\n <li>\n <p>경로를 찾는 과정에서 dist는 최대 n-1번 (max node 수) 업데이트 됨</p>\n\n <ul>\n <li>노드 방문 순서에 따라 업데이트 순서가 변경되기 때문에, 첫번째 노드를 제외하고 n-1번 루프를 거치면 업데이트가 완료</li>\n </ul>\n </li>\n <li>\n <p>cycle이 발생하는 경우 n번째 루프에서도 최단거리가 업데이트가 됨</p>\n </li>\n <li>\n <p>시간 복잡도는 O(VE), V : node 갯수 / E : edge 갯수</p>\n </li>\n <li>아래의 예시는 노드가 3개인 경우, 2번의 루프가 필요(max loop cnt : node cnt - 1)</li>\n</ul>\n\n<p><img src=\"/Algorithm/Shortest_Path/img/bellman_ford.JPG\" alt=\"bellman_ford\" /></p>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;vector&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"cp\">#define INF 1'000'000'000\n#define NODE 10000\n</span>\n<span class=\"k\">struct</span> <span class=\"nc\">Edge</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">src</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">dest</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">weight</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"n\">vector</span> <span class=\"o\">&lt;</span><span class=\"n\">Edge</span><span class=\"o\">&gt;</span> <span class=\"n\">edges</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">NODE</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">nodecount</span><span class=\"p\">,</span> <span class=\"n\">edgecount</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">src</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">nodecount</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">INF</span><span class=\"p\">;</span>\n    <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">bellman_ford</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">src</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">cycle</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n    <span class=\"c1\">// opeation</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">nodecount</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">edgecount</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">src</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">INF</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">dest</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">src</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">weight</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">dest</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">src</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">edges</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">weight</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">nodecount</span><span class=\"p\">)</span> <span class=\"n\">cycle</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span> <span class=\"c1\">// if update n count</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">cycle</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">nodecount</span> <span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%d \"</span><span class=\"p\">,</span><span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">INF</span> <span class=\"o\">?</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Shortest_Path/","name":"Bellman_Ford.md","path":"Algorithm/Shortest_Path/Bellman_Ford.md","url":"/Algorithm/Shortest_Path/Bellman_Ford.html"},{"sort":3,"layout":"default","title":"Mesos","content":"<h1 id=\"mesos\">Mesos</h1>\n\n","dir":"/Study/Infrastructure/Container_Orchestration/","name":"Mesos.md","path":"Study/Infrastructure/Container_Orchestration/Mesos.md","url":"/Study/Infrastructure/Container_Orchestration/Mesos.html"},{"sort":3,"layout":"default","title":"LIS (Longest Increasing Subsequence)","content":"<h1 id=\"lis-longest-increasing-subsequence\">LIS (Longest Increasing Subsequence)</h1>\n\n<ul>\n <li>순차적으로 구성된 배열의 부분집합 중, 이전의 원소보다 큰 조건을 만족하는 최장 증가 부분수열</li>\n <li>예로 [3,<strong>1</strong>,<strong>2</strong>,1,<strong>6</strong>,4,<strong>8</strong>]가 있는 경우, [1,2,6,8]이 가장 긴 부분 증가수열임</li>\n <li>2차원 배열 DP를 이용하여 계산할 수 있으며 단순 이차원 배열로 계산할 경우 시간 복잡도는 O(\\(N^2\\)) 이다.</li>\n</ul>\n\n<table>\n <thead>\n <tr>\n <th> </th>\n <th>0</th>\n <th>1</th>\n <th>2</th>\n <th>3</th>\n <th>4</th>\n <th>5</th>\n <th>6</th>\n <th>7</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>array</td>\n <td>0</td>\n <td>3</td>\n <td>1</td>\n <td>2</td>\n <td>1</td>\n <td>6</td>\n <td>4</td>\n <td>8</td>\n </tr>\n <tr>\n <td>DP</td>\n <td>0</td>\n <td>1</td>\n <td>1</td>\n <td>2</td>\n <td>1</td>\n <td>3</td>\n <td>3</td>\n <td>4</td>\n </tr>\n </tbody>\n</table>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">8</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">array</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">};</span>\n<span class=\"kt\">int</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"mi\">0</span><span class=\"p\">,};</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n  <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">array</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n    <span class=\"p\">{</span>\n      <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>\n <p>LIS알고리즘을 구할 때 Binary Search를 적용하면 시간 복잡도를 O(NlogN)으로 개선할 수 있음</p>\n </li>\n <li>처음 값을 dp 배열의 인덱스0에 넣음</li>\n <li>마지막 값보다 작은 값이 오면 이분 탐색으로 들어갈 자리를 찾음\n <ul>\n <li>새로 추가되는 값보다 작은값들 중 가장 큰 값 뒤의 메모리에 업데이트</li>\n </ul>\n </li>\n <li>이전 값보다 큰 값이 오면 dp 배열에 추가</li>\n</ul>\n\n<table>\n <thead>\n <tr>\n <th>Times</th>\n <th>3</th>\n <th>1</th>\n <th>2</th>\n <th>1</th>\n <th>6</th>\n <th>4</th>\n <th>8</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>1(3)</td>\n <td>3</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>2(1)</td>\n <td>1</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>3(2)</td>\n <td>1</td>\n <td>2</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>4(1)</td>\n <td>1</td>\n <td>2</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>5(6)</td>\n <td>1</td>\n <td>2</td>\n <td>6</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>6(4)</td>\n <td>1</td>\n <td>2</td>\n <td>4</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>7(8)</td>\n <td>1</td>\n <td>2</td>\n <td>4</td>\n <td>8</td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n </tbody>\n</table>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;vector&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">arr</span><span class=\"p\">;</span>\n<span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">lis</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">binary_search</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">right</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">left</span> <span class=\"o\">&lt;</span> <span class=\"n\">right</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"n\">right</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lis</span><span class=\"p\">[</span><span class=\"n\">mid</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">else</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">mid</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"n\">left</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">make_lis</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">){</span> <span class=\"c1\">// size of array</span>\n\t<span class=\"n\">lis</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span> <span class=\"c1\">// initial</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lis</span><span class=\"p\">[</span><span class=\"n\">res</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"n\">lis</span><span class=\"p\">[</span><span class=\"o\">++</span><span class=\"n\">res</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t\t<span class=\"k\">else</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"kt\">int</span> <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">binary_search</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span> <span class=\"c1\">// from 0 to i</span>\n\t\t\t<span class=\"n\">lis</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">lis</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lis</span><span class=\"p\">.</span><span class=\"n\">back</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"n\">lis</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n  <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">lower_bound</span><span class=\"p\">(</span><span class=\"n\">lis</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">lis</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n    <span class=\"o\">*</span><span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/DP/","name":"LIS.md","path":"Algorithm/DP/LIS.md","url":"/Algorithm/DP/LIS.html"},{"sort":3,"layout":"default","title":"Puppet","content":"<h1 id=\"puppet\">Puppet</h1>\n\n","dir":"/Study/Infrastructure/Configuration_Management/","name":"Puppet.md","path":"Study/Infrastructure/Configuration_Management/Puppet.md","url":"/Study/Infrastructure/Configuration_Management/Puppet.html"},{"sort":3,"layout":"default","title":"TSP","content":"<h1 id=\"tsp\">TSP</h1>\n\n<ul>\n <li>시작점에서 모든 경로에 대한 최소 비용을 찾는 NP(non-deterministic Polynomial)\n <ul>\n <li>모든 경로는 1번씩만 방문하며 마지막에 시작점으로 돌아오는 구조</li>\n </ul>\n </li>\n <li>TSP 문제는 기본적으로 방문 가능한 경로인 모든 순의 시간 복잡도는 O(\\(n!\\)) 을 갖는다.</li>\n <li>bitmasking을 이용하면 시간 복잡도가 O(\\(2^n\\))으로 줄어든다</li>\n <li>시간 복잡도를 더 줄이기 위해 DP와 bit-masking을 이용할 수 있다.</li>\n</ul>\n\n<p><strong>parameter</strong></p>\n\n<ul>\n <li>cur : 현재 노드의 위치를 나타냄</li>\n <li>Visit : 방문한 도시의 합을 나타냄\n <ul>\n <li>ex) visit = 5인 경우, 0000101로 1과 3을 방문</li>\n </ul>\n </li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"cp\">#pragma warning(disable:4996)\n#define INF 1e9;\n#define MIN(X,Y) ((X) &lt; (Y) ? (X) : (Y))\n</span>\n<span class=\"kt\">char</span> <span class=\"n\">lists</span><span class=\"p\">[</span><span class=\"mi\">17</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">cnt</span><span class=\"p\">,</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"mi\">17</span><span class=\"p\">][</span><span class=\"mi\">17</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">17</span><span class=\"p\">][</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">16</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">TSP</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">cur</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">visit</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">visit</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\">// all city visit</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">?</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">:</span> <span class=\"n\">INF</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">][</span><span class=\"n\">visit</span><span class=\"p\">];</span> <span class=\"c1\">// reference</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ret</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">ret</span><span class=\"p\">;</span> <span class=\"c1\">// already visit  cur -&gt; visit </span>\n\n\t<span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">INF</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">next</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">next</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">visit</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">next</span><span class=\"p\">))</span> <span class=\"k\">continue</span><span class=\"p\">;</span> <span class=\"c1\">// visit next city</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">][</span><span class=\"n\">next</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\t<span class=\"c1\">// not destinated</span>\n\t\t<span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">MIN</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">,</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">][</span><span class=\"n\">next</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">TSP</span><span class=\"p\">(</span><span class=\"n\">next</span><span class=\"p\">,</span> <span class=\"n\">visit</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">next</span><span class=\"p\">)));</span> <span class=\"c1\">// current-&gt;next + tsp(start next)</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\t<span class=\"c1\">// minimum of current to visit</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">Solve</span><span class=\"p\">(){</span>\n\t<span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">));</span> <span class=\"c1\">// 4*17*2^16</span>\n\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">TSP</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">));</span>\t<span class=\"c1\">// if INF, Not TSP;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Brute_Force/","name":"TSP.md","path":"Algorithm/Brute_Force/TSP.md","url":"/Algorithm/Brute_Force/TSP.html"},{"sort":3,"layout":"default","title":"Function Testing","content":"<h1 id=\"function-testing\">Function Testing</h1>\n\n<p>Description</p>\n\n<p>sd</p>\n","dir":"/Study/Software_Development/Test_Driven_Development/","name":"Function.md","path":"Study/Software_Development/Test_Driven_Development/Function.md","url":"/Study/Software_Development/Test_Driven_Development/Function.html"},{"sort":3,"layout":"default","title":"Azure Devops","content":"<h1 id=\"azure-devops\">Azure Devops</h1>\n\n","dir":"/Study/Infrastructure/CICD_Tool/","name":"Azure_Devops.md","path":"Study/Infrastructure/CICD_Tool/Azure_Devops.md","url":"/Study/Infrastructure/CICD_Tool/Azure_Devops.html"},{"sort":3,"layout":"default","title":"Merge Sort","content":"<h1 id=\"merge-sort\">Merge Sort</h1>\n\n<ul>\n <li>It is sort of divided and conquer algorithm.</li>\n <li>Divide continues until the size of the array is 1 through recursion.</li>\n <li>The size of the array starts from 1, and a new array is formed in two directions based on mid.\n <ul>\n <li>It is composed of two pieces, and each piece is sorted, so left and right ++ form a new sort piece.</li>\n </ul>\n </li>\n <li>DIvide time complexity is O(logN), Conquer time complexity is O(logN), and rearrange time complexity is O(N)</li>\n <li>So, Summary Time complexity is O(NlogN).\n <ul>\n <li>Best case, Worst case is same as O(NlogN)</li>\n </ul>\n </li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#pragma warning(disable:4996)\n</span>\n<span class=\"kt\">void</span> <span class=\"nf\">merge</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">temp</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">];</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">left</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">right</span> <span class=\"o\">&lt;=</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">right</span><span class=\"p\">])</span> <span class=\"n\">temp</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"o\">++</span><span class=\"p\">];</span>\n\t\t<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">right</span><span class=\"p\">])</span> <span class=\"n\">temp</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">right</span><span class=\"o\">++</span><span class=\"p\">];</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">left</span> <span class=\"o\">&gt;</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">right</span> <span class=\"o\">&lt;=</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"n\">temp</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">right</span><span class=\"o\">++</span><span class=\"p\">];</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">left</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"n\">temp</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"o\">++</span><span class=\"p\">];</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">merge2</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">end</span><span class=\"p\">){</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">tmp</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">];</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">left</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span> <span class=\"o\">||</span> <span class=\"n\">right</span> <span class=\"o\">&lt;=</span> <span class=\"n\">end</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">right</span> <span class=\"o\">&gt;</span> <span class=\"n\">end</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"n\">left</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"p\">]</span> <span class=\"o\">&lt;=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">right</span><span class=\"p\">]))</span>\n\t\t\t<span class=\"n\">tmp</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"o\">++</span><span class=\"p\">];</span>\n\t\t<span class=\"k\">else</span>\n\t\t\t<span class=\"n\">tmp</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">right</span><span class=\"o\">++</span><span class=\"p\">];</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">end</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">merge_sort</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">right</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">left</span> <span class=\"o\">&lt;</span> <span class=\"n\">right</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"n\">right</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">merge_sort</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">merge_sort</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">);</span>\n        <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">);</span>\n<span class=\"c1\">//\t\tmerge2(arr, left, mid, right);</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"kt\">int</span> <span class=\"nf\">cmp</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">b</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">};</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">arr2</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">};</span>\n\t\n\t<span class=\"n\">mergesort</span><span class=\"p\">(</span><span class=\"n\">arr2</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">),</span><span class=\"n\">cmp</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">9</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%d \"</span><span class=\"p\">,</span> <span class=\"n\">arr2</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n\n\n\t<span class=\"n\">merge_sort</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">9</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%d \"</span><span class=\"p\">,</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Sort/","name":"Merge.md","path":"Algorithm/Sort/Merge.md","url":"/Algorithm/Sort/Merge.html"},{"sort":3,"layout":"default","title":"Transaction","content":"<h1 id=\"transaction\">Transaction</h1>\n\n","dir":"/Computer_Science/Database/","name":"Transaction.md","path":"Computer_Science/Database/Transaction.md","url":"/Computer_Science/Database/Transaction.html"},{"sort":3,"layout":"default","title":"Composite","content":"<h1 id=\"composite\">Composite</h1>\n\n","dir":"/Study/Design_Pattern/Structural/","name":"Composite.md","path":"Study/Design_Pattern/Structural/Composite.md","url":"/Study/Design_Pattern/Structural/Composite.html"},{"sort":3,"layout":"default","title":"NAT","content":"<h1 id=\"nat\">NAT</h1>\n\n<ul>\n <li>\n <p>네트워크 주소 변환(Network Address Translation)으로 방화벽을 통과하기 전이나 라우터를 통한 네트워크 트래픽을 주고받을 때, IP 패킷의 헤더에 있는 TCP/UDP Port 번호나 IP주소 등을 수정하여 다른 주소로 Mapping하는 기술</p>\n </li>\n <li>\n <p>IPv4의 주소가 42억 9천(2<sup>32</sup>)개의 주소를 할당할 수 있는데 주소 고갈의 문제를 해결하기 위해 개발됨</p>\n </li>\n <li>\n <p>기본적으로 1:1 변환을 제공하지만, Private Network 내에 여러개의 IP 주소를 Mapping하는 N:1 변환도 가능</p>\n\n <ul>\n <li>Private Network에는 다른 IP를 사용해도 되지만, Public Network는 하나의 IP 주소를 가짐</li>\n <li>PAT(Port Address Translation)\n <ul>\n <li>Public Network IP의 각 Port에 Private Network의 IP/Port를 Mapping</li>\n <li>서로 다른 장비가 동일한 Source Port를 가지는 경우, NAT 장비가 변경하여 처리</li>\n </ul>\n </li>\n </ul>\n </li>\n <li>\n <p>DNAT / SNAT</p>\n\n <ul>\n <li>DNAT (Destination) : 도착지 주소를 변경하는 NAT</li>\n <li>SNAT (Source) : 출발지 주소를 변경하는 NAT</li>\n </ul>\n\n <p>양방향 지원인 경우, 외부에서 내부로 통신하면 DNAT가 적용되고 내부에서 외부로 통신하면 SNAT가 적용됨</p>\n\n <ul>\n <li>장비에 따라서 지정한 방향으로만 NAT 지원하는 것도 있음</li>\n </ul>\n </li>\n</ul>\n\n<p><br /></p>\n\n<p><img src=\"/Computer_Science/Network/Img/NAT.png\" alt=\"NAT\" /></p>\n\n<div style=\"text-align: right\"> Image ref : https://en.wikipedia.org/wiki/Network_address_translation</div>\n\n<p><br /></p>\n\n<p><strong>Static NAT(Reserve NAT)</strong></p>\n\n<ul>\n <li>Private Network 하나의 Local IP와 Public IP를 1:1로 Mapping하여 변환</li>\n <li>Port forwarding 작업이 많을 때 사용하며, Network 경로 관리에 효율적</li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>Dynamic NAT</strong></p>\n\n<ul>\n <li>여러개의 사설 IP를 N:1 or N:M 관계로 Mapping하여 변환</li>\n <li>라우터 간 통신을 통하여 자동으로 경로를 학습하고 현재 사용중이지 않은 Public IP로 할당\n <ul>\n <li>global Address Pool에서 동적으로 선택</li>\n </ul>\n </li>\n <li>변환이 필요한 내부 주소 / global address pool 2가지 설정이 필요</li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>Redirect NAT</strong></p>\n\n<ul>\n <li>목적지 주소를 재설정할 때 사용</li>\n <li>서버의 IP/Port에 변경이 발생했을 때, NAT Mapping Table의 Destination Address를 변경</li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>XNAT(Exclude NAT)</strong></p>\n\n<ul>\n <li>특정 Source/Destination Address에 대해 NAT를 제외할 때 사용</li>\n</ul>\n\n<p><strong>FNAT(Full NAT)</strong></p>\n\n<ul>\n <li>양방향 NAT(SNAT + DNAT)로 L4/L7 스위치에서 많이 사용하는 NAT 방식 중 하나임</li>\n <li>(L4/L7 스위치 정리할 때 DSR과 상세하게 작성)</li>\n</ul>\n","dir":"/Computer_Science/Network/","name":"NAT.md","path":"Computer_Science/Network/NAT.md","url":"/Computer_Science/Network/NAT.html"},{"sort":3,"layout":"default","title":"Segment Tree","content":"<h3 id=\"segment-tree\">Segment Tree</h3>\n\n<ul>\n <li></li>\n</ul>\n\n<p><strong>Segment Tree Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"cp\">#pragma warning(disable:4996)\n</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mf\">1e5</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"cp\">#define INF 1000000000\n</span>\n<span class=\"kt\">int</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"mi\">4</span> <span class=\"o\">*</span> <span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">get_sum</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">leftnode</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">rightnode</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">L</span> <span class=\"o\">&gt;</span> <span class=\"n\">rightnode</span> <span class=\"o\">||</span> <span class=\"n\">R</span> <span class=\"o\">&lt;</span> <span class=\"n\">leftnode</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">L</span> <span class=\"o\">&lt;=</span> <span class=\"n\">leftnode</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">rightnode</span> <span class=\"o\">&lt;=</span> <span class=\"n\">R</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">];</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">leftnode</span> <span class=\"o\">+</span> <span class=\"n\">rightnode</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"k\">return</span> <span class=\"n\">get_sum</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">leftnode</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">get_sum</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">node</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">rightnode</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">get_min</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;</span><span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;</span><span class=\"n\">leftnode</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;</span><span class=\"n\">rightnode</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">L</span> <span class=\"o\">&gt;</span> <span class=\"n\">rightnode</span> <span class=\"o\">||</span> <span class=\"n\">R</span> <span class=\"o\">&lt;</span> <span class=\"n\">leftnode</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">INF</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">L</span> <span class=\"o\">&lt;=</span> <span class=\"n\">leftnode</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">rightnode</span> <span class=\"o\">&lt;=</span> <span class=\"n\">R</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">];</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">leftnode</span> <span class=\"o\">+</span> <span class=\"n\">rightnode</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"k\">return</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">get_min</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">leftnode</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">),</span> <span class=\"n\">get_min</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">node</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">rightnode</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"n\">idx</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">index</span> <span class=\"o\">/=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">\"%d %d\"</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">q</span><span class=\"p\">);</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">&gt;</span> <span class=\"n\">start</span><span class=\"p\">)</span> <span class=\"n\">start</span> <span class=\"o\">*=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">start</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>  <span class=\"c1\">// construct</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n\t<span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">// range</span>\n\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">q</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">get_sum</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">start</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\t\t<span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</code></pre>  </div></div>\n\n<h3 id=\"lazy-segment-tree\">Lazy Segment Tree</h3>\n\n<ul>\n <li>기존의 Segment Tree에서 Update를 계속해서 진행하지 않고 lazy 배열에 저장</li>\n <li>query 진행 전, update 진행 전, lazy[node] 의 값이 변경이 있을 때 propagate 진행\n <ul>\n <li>leaf 노드에 도달하는 것이 아니면 lazy 배열에 값 저장</li>\n <li>leaf 노드에 도달하면 lazy 배열이 아닌, seg 값에 반영</li>\n </ul>\n </li>\n</ul>\n\n<p><strong>Lazy Segment Tree Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"nc\">T</span><span class=\"p\">&gt;</span>\n<span class=\"k\">class</span> <span class=\"nc\">segment</span>\n<span class=\"p\">{</span>\n<span class=\"nl\">private:</span>\n    <span class=\"n\">T</span> <span class=\"n\">height</span><span class=\"p\">;</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"n\">seg</span><span class=\"p\">,</span> <span class=\"n\">lazy</span><span class=\"p\">;</span>\n\n<span class=\"nl\">public:</span>\n    <span class=\"n\">segment</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"n\">log2</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)));</span>\n        <span class=\"n\">seg</span><span class=\"p\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">(</span><span class=\"n\">height</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n        <span class=\"n\">lazy</span><span class=\"p\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">(</span><span class=\"n\">height</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">T</span> <span class=\"n\">create_seg</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"n\">r</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">];</span>\n        <span class=\"k\">else</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">T</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">create_seg</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">create_seg</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">node</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">void</span> <span class=\"n\">propagate</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"n\">r</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">];</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">!=</span> <span class=\"n\">r</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">node</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">];</span>\n                <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">node</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">];</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">void</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">propagate</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">e</span> <span class=\"o\">&lt;</span> <span class=\"n\">l</span> <span class=\"o\">||</span> <span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">&lt;=</span> <span class=\"n\">l</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">r</span> <span class=\"o\">&lt;=</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n            <span class=\"n\">propagate</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">T</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">);</span>\n        <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">node</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">);</span>\n        <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">node</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">node</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">T</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"n\">r</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">propagate</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">e</span> <span class=\"o\">&lt;</span> <span class=\"n\">l</span> <span class=\"o\">||</span> <span class=\"n\">r</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">&lt;=</span> <span class=\"n\">l</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">r</span> <span class=\"o\">&lt;=</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">seg</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">];</span>\n        <span class=\"n\">T</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">node</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n</code></pre>  </div></div>\n\n<h3 id=\"persistent-segment-tree\">Persistent Segment Tree</h3>\n\n<p><strong>Persistent Segment Tree Code</strong></p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code></code></pre>  </div></div>\n\n","dir":"/DataStructure/Binary_Tree/","name":"Segment_Tree.md","path":"DataStructure/Binary_Tree/Segment_Tree.md","url":"/DataStructure/Binary_Tree/Segment_Tree.html"},{"sort":3,"layout":"default","title":"Factory Methods","content":"<h1 id=\"factory-methods\">Factory Methods</h1>\n\n","dir":"/Study/Design_Pattern/Creational/","name":"Factory_Methods.md","path":"Study/Design_Pattern/Creational/Factory_Methods.md","url":"/Study/Design_Pattern/Creational/Factory_Methods.html"},{"sort":3,"layout":"default","title":"Pulumi","content":"<h1 id=\"pulumi\">Pulumi</h1>\n\n","dir":"/Study/Infrastructure/Provisioning/","name":"Pulumi.md","path":"Study/Infrastructure/Provisioning/Pulumi.md","url":"/Study/Infrastructure/Provisioning/Pulumi.html"},{"sort":3,"layout":"default","title":"MS SQL Server","content":"<h1 id=\"ms-sql-server\">MS SQL Server</h1>\n\n","dir":"/Computer_Science/Database/RDBMS/","name":"MS_SQL_Server.md","path":"Computer_Science/Database/RDBMS/MS_SQL_Server.md","url":"/Computer_Science/Database/RDBMS/MS_SQL_Server.html"},{"sort":3,"layout":"default","title":"Stack","content":"<h1 id=\"stack\">Stack</h1>\n\n<ul>\n <li>LIFO (Last In First Out) 을 따르는 Container\n <ul>\n <li>Push : 리스트의 가장 우측에 값을 넣음</li>\n <li>Pop : 리스트의 가장 오른쪽 값을 제거</li>\n </ul>\n </li>\n <li>Top에 위치한 값을 참조할 수 있으며, Linked List로 구현하여 Size가 자동으로 변경됨</li>\n</ul>\n\n<p><br /></p>\n\n<p><img src=\"/DataStructure/Container/Img/Stack.png\" alt=\"Stack\" /></p>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">snode</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"p\">;</span>\n    <span class=\"n\">snode</span> <span class=\"o\">*</span><span class=\"n\">pre</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"nc\">T</span><span class=\"p\">&gt;</span>\n<span class=\"k\">class</span> <span class=\"nc\">_Stack</span>\n<span class=\"p\">{</span>\n<span class=\"nl\">private:</span>\n    <span class=\"n\">snode</span> <span class=\"o\">*</span><span class=\"n\">rear</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">_size</span><span class=\"p\">;</span>\n\n<span class=\"nl\">public:</span>\n    <span class=\"n\">_Stack</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">rear</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n        <span class=\"n\">_size</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"o\">~</span><span class=\"n\">_Stack</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">empty</span><span class=\"p\">())</span>\n            <span class=\"n\">pop</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">void</span> <span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">snode</span> <span class=\"o\">*</span><span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">snode</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">snode</span><span class=\"p\">));</span>\n        <span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n        <span class=\"n\">node</span><span class=\"o\">-&gt;</span><span class=\"n\">pre</span> <span class=\"o\">=</span> <span class=\"n\">rear</span><span class=\"p\">;</span>\n        <span class=\"n\">rear</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">;</span>\n        <span class=\"n\">_size</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">void</span> <span class=\"n\">pop</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"There's no component\"</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">snode</span> <span class=\"o\">*</span><span class=\"n\">delnode</span> <span class=\"o\">=</span> <span class=\"n\">rear</span><span class=\"p\">;</span>\n        <span class=\"n\">rear</span> <span class=\"o\">=</span> <span class=\"n\">delnode</span><span class=\"o\">-&gt;</span><span class=\"n\">pre</span><span class=\"p\">;</span>\n        <span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">delnode</span><span class=\"p\">);</span>\n        <span class=\"n\">_size</span><span class=\"o\">--</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">T</span> <span class=\"n\">top</span><span class=\"p\">(){</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">()){</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"There's no component\"</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">rear</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">_size</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"kt\">int</span> <span class=\"n\">empty</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"o\">!</span><span class=\"n\">_size</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre>  </div></div>\n\n","dir":"/DataStructure/Container/","name":"Stack.md","path":"DataStructure/Container/Stack.md","url":"/DataStructure/Container/Stack.html"},{"sort":3,"layout":"default","title":"LCP","content":"<h1 id=\"lcp\">LCP</h1>\n\n<ul>\n <li>LCP (Longest Common Prefix)는 하나의 문자열이 주어졌을 때 접미사의 공통 접두사의 최대길이임</li>\n <li>\n <p>LCP를 구하기 위해서는 사전에 Suffix Array를 만들어 놓아야 함</p>\n\n <ul>\n <li>최대 길이가 공통인 부분을 찾아야 하기 때문에 사전으로 정렬했을 때 찾을 수 있다.</li>\n </ul>\n </li>\n <li>바로 이전의 suffix array와 공통으로 포함하는 suffix의 길이를 찾으면 된다.</li>\n <li>\n <p>ABAABA라는 문자열의 suffix array는 <a href=\"https://jeothen.github.io/Algorithm/String/Suffix_Array.html\">[5,2,3,0,4,1]</a>이다</p>\n\n <ul>\n <li>A / AABA / ABA / ABAABA / BA / BAABA</li>\n </ul>\n </li>\n <li>\n <p>LCP는 RANK 순으로 작성함</p>\n\n <ul>\n <li>RANK는 Suffix Array의 Index 값을 저장한 배열임 - suffix array와 역함수 관계</li>\n <li>RANK값이 나타내는 index 바로 이전의 suffix array와 비교 (j)</li>\n <li>rank 순으로 값을 정리하면 ABAABA / BAABA / AABA / ABA / BA / A와 같이 index가 0부터 1씩 증가한 곳에서 시작하는 것을 알 수 있음(i)</li>\n </ul>\n </li>\n <li>자세히 풀어 쓰면 아래와 같이 동작하는 것을 알 수 있다.</li>\n</ul>\n\n<ol>\n <li>lcp = 3\n <ul>\n <li><strong>ABA</strong></li>\n <li><strong>ABA</strong>ABA</li>\n </ul>\n </li>\n <li>lcp = 2\n <ul>\n <li><strong>BA</strong></li>\n <li><strong>BA</strong>ABA</li>\n </ul>\n </li>\n <li>lcp = 1\n <ul>\n <li><strong>A</strong></li>\n <li><strong>A</strong>ABA</li>\n </ul>\n </li>\n <li>lcp = 1\n <ul>\n <li><strong>A</strong>ABA</li>\n <li><strong>A</strong>BA</li>\n </ul>\n </li>\n <li>lcp = 0\n <ul>\n <li>ABAABA</li>\n <li>BA</li>\n </ul>\n </li>\n <li>lcp = 0\n <ul>\n <li>x</li>\n <li>A</li>\n </ul>\n </li>\n</ol>\n\n<ul>\n <li>처음에 문자열을 같을때까지 하나씩 비교하여 lcp로 작성 (1번)</li>\n <li>다음 문자열에서 동일한 값이 나오지 않으면 lcp-1 진행 (2번 / 3번)</li>\n <li>3번이 끝난 후 len = 0에서 다음에 오는 문자를 비교 (4번)</li>\n <li>동일한 문자가 없어서 while문 못 도는 경우, lcp = 0 (5번 / 6번)</li>\n</ul>\n\n<p><br /></p>\n\n<table>\n <thead>\n <tr>\n <th>i</th>\n <th>Suffix Array</th>\n <th>RANK=k</th>\n <th>j (Sfx[k-1])</th>\n <th>lcp[k] = len</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>0</td>\n <td>5 - A</td>\n <td>3</td>\n <td>3</td>\n <td>0</td>\n </tr>\n <tr>\n <td>1</td>\n <td>2 - AABA</td>\n <td>5</td>\n <td>4</td>\n <td>1 (A)</td>\n </tr>\n <tr>\n <td>2</td>\n <td>3 - ABA</td>\n <td>1</td>\n <td>5</td>\n <td>1 (A)</td>\n </tr>\n <tr>\n <td>3</td>\n <td>0 - ABAABA</td>\n <td>2</td>\n <td>2</td>\n <td>3 (ABA)</td>\n </tr>\n <tr>\n <td>4</td>\n <td>4 - BA</td>\n <td>4</td>\n <td>0</td>\n <td>0 (X)</td>\n </tr>\n <tr>\n <td>5</td>\n <td>1 - BAABA</td>\n <td>0</td>\n <td>x</td>\n <td>2 (BA)</td>\n </tr>\n </tbody>\n</table>\n\n<ul>\n <li>시간 복잡도 O(N)으로 해결할 수 있다.</li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">lcp</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">sfx</span><span class=\"p\">,</span> <span class=\"n\">string</span> <span class=\"n\">str</span><span class=\"p\">){</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"n\">r</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"n\">lcp</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span> <span class=\"c1\">// rank</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"n\">sfx</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">len</span> <span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">){</span> <span class=\"c1\">// not 0(first index of suffix array)</span>\n            <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">sfx</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n            <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"n\">len</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"n\">len</span><span class=\"p\">])</span> <span class=\"n\">len</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"n\">lcp</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">len</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">len</span><span class=\"p\">)</span> <span class=\"n\">len</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">lcp</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/String/","name":"LCP.md","path":"Algorithm/String/LCP.md","url":"/Algorithm/String/LCP.html"},{"sort":3,"layout":"default","title":"B-Tree","content":"<h1 id=\"b-tree\">B-Tree</h1>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code></code></pre>  </div></div>\n\n","dir":"/DataStructure/Tree/","name":"B-Tree.md","path":"DataStructure/Tree/B-Tree.md","url":"/DataStructure/Tree/B-Tree.html"},{"sort":3,"layout":"default","title":"Interpreter","content":"<h1 id=\"interpreter\">Interpreter</h1>\n\n","dir":"/Study/Design_Pattern/Behavioral/","name":"Interpreter.md","path":"Study/Design_Pattern/Behavioral/Interpreter.md","url":"/Study/Design_Pattern/Behavioral/Interpreter.html"},{"sort":3,"layout":"default","title":"LCA","content":"<h3 id=\"lca\">LCA</h3>\n\n<ul>\n <li></li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<p>```c++\n#include <vector>\n#include <iostream>\n#define MAX 18 // 2^17 &gt; 100000\n#define N 100001\nusing namespace std;</iostream></vector></p>\n\n<p>int n, m, d;\nint depth[N];\nint parent[N][MAX];</p>\n\n<p>vector<int> vc[N];</int></p>\n\n<p>void dfs(int now, int cnt)\n{\n depth[now] = cnt++;\n \tfor (int i = 1; i &lt;= d; i++)\n {\n parent[now][i] = parent[parent[now][i - 1]][i - 1];\n }\n for (int i = 0; i &lt; vc[now].size(); i++)\n {\n int next = vc[now][i];\n if (!depth[next])\n {\n parent[next][0] = now;\n dfs(next, cnt);\n }\n }\n}</p>\n\n<p>int main()\n{\n scanf(“%d”, &amp;n);\n for (d = 1; (1 « d) &lt;= n; d++)\n for (int i = 1; i &lt; n; i++)\n {\n int a, b;\n scanf(“%d %d”, &amp;a, &amp;b);\n vc[a].push_back(b);\n vc[b].push_back(a);\n }\n dfs(1, 1);\n scanf(“%d”, &amp;m);\n for (int i = 0; i &lt; m; i++)\n {\n int a, b;\n scanf(“%d %d”, &amp;a, &amp;b);\n if (depth[a] &lt; depth[b])\n swap(a, b);\n for (int j = d; j &gt;= 0; j–)\n {\n if (depth[b] &lt;= depth[parent[a][j]])\n {\n a = parent[a][j];\n }\n }\n if (a == b)\n {\n printf(“%d\\n”, a);\n continue;\n }\n for (int j = d; j &gt;= 0; j–)\n {\n if (parent[a][j] != parent[b][j])\n {\n a = parent[a][j];\n b = parent[b][j];\n }\n }\n a = parent[a][0];\n printf(“%d\\n”, a);\n }\n}</p>\n","dir":"/Algorithm/Graph/","name":"LCA.md","path":"Algorithm/Graph/LCA.md","url":"/Algorithm/Graph/LCA.html"},{"sort":3,"layout":"default","title":"Kernel","content":"<h1 id=\"kernel\">Kernel</h1>\n\n<p><strong>OS Structure</strong></p>\n\n","dir":"/Computer_Science/OS/","name":"Kernel.md","path":"Computer_Science/OS/Kernel.md","url":"/Computer_Science/OS/Kernel.html"},{"sort":4,"layout":"default","title":"Rabin Karp","content":"<h1 id=\"rabin-karp\">Rabin Karp</h1>\n\n<ul>\n <li>라빈 카프 알고리즘은 해싱을 기반으로 1:1 매칭을 찾는 알고리즘이다.</li>\n <li>해싱을 기반으로 찾기 때문에 충돌이 많다. 충돌을 줄이기 위해 보통 MOD를 매우 큰 수로 설정한다.</li>\n <li>그래도 여전히 충돌이 있을 수 있기 때문에, 해시 값이 동일한 경우 문자열을 비교하는 작업을 추가로 수행한다.</li>\n</ul>\n\n<p><br /></p>\n\n<ul>\n <li>라빈카프 알고리즘은 보통 라빈카프 fingerprinting 알고리즘을 사용한다.</li>\n</ul>\n\n<p>\\(H[i] = t[i] *\\)m<sup>n-1</sup> + \\(t[i+1] *\\) m<sup>n-2</sup> + …. + \\(t[i+n-2] * m^1 + t[i+n-1] * m^0\\)</p>\n\n<p><br /></p>\n\n<ul>\n <li>라빈카프 fingerprinting 알고리즘은 아래와 같이 변형됨</li>\n</ul>\n\n<p>\\(H[i+1] = t[i+1]*\\) m<sup>n-1</sup> + \\(t[i+2]*\\) m<sup>n-2</sup> + …. + \\(t[i+n-1] * m^1 + t[i+n] * m^0\\)</p>\n\n<p>= (\\(t[i] *\\) m<sup>n</sup> + \\(t[i+1] *\\) m<sup>n-1</sup> + \\(t[i+2] *\\) m<sup>n-2</sup> + … + \\(t[i+n-1] * m^1 - t[i] * m^n\\) ) + \\(t[i+n] * m^0\\)</p>\n\n<p>= (\\(t[i] *\\) m<sup>n-1</sup> + \\(t[i+1]*\\) m<sup>n-2</sup> + … + \\(t[i+n-1]*m^0 - t[i]*\\)m<sup>n-1</sup>) \\(* m + t[i+n]*m^0\\)</p>\n\n<p>= \\(m*(H[i] - t[i] *\\) m<sup>n-1</sup> \\() + t[i+m]*m^0\\)</p>\n\n<p><br /></p>\n\n<ul>\n <li>따라서, best case 인 경우, 시간복잡도는 O(N+M) 이다.</li>\n <li>그러나, worst case인 경우 시간 복잡도는 O(NM)이다.\n <ul>\n <li>“AAAAAAAAA”, “AAA” 와 같은 경우..</li>\n </ul>\n </li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;cstdio&gt;\n#include &lt;vector&gt;\n#define MOD 1000000009\n</span>\n\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">rabin_karp</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">pattern</span><span class=\"p\">){</span>\n    <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">lent</span><span class=\"p\">,</span> <span class=\"n\">lenp</span><span class=\"p\">;</span>\n    <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">texthash</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">patternhash</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">power</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">lent</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">text</span><span class=\"p\">[</span><span class=\"n\">lent</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"sc\">'\\0'</span><span class=\"p\">;</span> <span class=\"n\">lent</span><span class=\"o\">++</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">lenp</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">pattern</span><span class=\"p\">[</span><span class=\"n\">lenp</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"sc\">'\\0'</span><span class=\"p\">;</span> <span class=\"n\">lenp</span><span class=\"o\">++</span><span class=\"p\">);</span>\n    \n    <span class=\"c1\">// rabin - karp algorithm</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"n\">vc</span><span class=\"p\">;</span>\n    \n    <span class=\"c1\">// calculate hash value</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">lenp</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>  \n    <span class=\"p\">{</span>\n        <span class=\"n\">texthash</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">texthash</span> <span class=\"o\">*</span> <span class=\"mi\">257</span> <span class=\"o\">+</span> <span class=\"n\">text</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">%</span> <span class=\"n\">MOD</span><span class=\"p\">;</span> <span class=\"c1\">//  up to pattern length, first text hash value</span>\n        <span class=\"n\">patternhash</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">patternhash</span> <span class=\"o\">*</span> <span class=\"mi\">257</span> <span class=\"o\">+</span> <span class=\"n\">pattern</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">%</span> <span class=\"n\">MOD</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">power</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">power</span> <span class=\"o\">*</span> <span class=\"mi\">257</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">MOD</span><span class=\"p\">;</span> <span class=\"c1\">// power is length of pattern's Degree, m^(lenp-1)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">lent</span> <span class=\"o\">-</span> <span class=\"n\">lenp</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"c1\">// already calculate first text hash</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">texthash</span> <span class=\"o\">==</span> <span class=\"n\">patternhash</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// text compare</span>\n            <span class=\"kt\">bool</span> <span class=\"n\">isdiff</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"n\">lenp</span><span class=\"p\">;</span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">){</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">text</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                    <span class=\"n\">isdiff</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">isdiff</span><span class=\"p\">)</span> <span class=\"n\">vc</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span> <span class=\"c1\">// start index</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// H[i+1] = m * (H[i] - t[i] * m^(n-1)) + t[i+lenp]</span>\n        <span class=\"n\">texthash</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">257</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">texthash</span> <span class=\"o\">-</span> <span class=\"n\">text</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">power</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">text</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">lenp</span><span class=\"p\">])</span> <span class=\"o\">%</span> <span class=\"n\">MOD</span><span class=\"p\">;</span>  \n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">texthash</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">texthash</span> <span class=\"o\">+=</span> <span class=\"n\">MOD</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">vc</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/String/","name":"Rabin_Karp.md","path":"Algorithm/String/Rabin_Karp.md","url":"/Algorithm/String/Rabin_Karp.html"},{"sort":4,"layout":"default","title":"AVL Tree","content":"<h1 id=\"avl-tree\">AVL Tree</h1>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code></code></pre>  </div></div>\n\n","dir":"/DataStructure/Binary_Tree/","name":"AVL_Tree.md","path":"DataStructure/Binary_Tree/AVL_Tree.md","url":"/DataStructure/Binary_Tree/AVL_Tree.html"},{"sort":4,"layout":"default","title":"Couch","content":"<h1 id=\"couch\">Couch</h1>\n\n","dir":"/Computer_Science/Database/NOSQL/","name":"Couch.md","path":"Computer_Science/Database/NOSQL/Couch.md","url":"/Computer_Science/Database/NOSQL/Couch.html"},{"sort":4,"layout":"default","title":"SOAP","content":"<h1 id=\"soap\">SOAP</h1>\n\n","dir":"/Study/API/","name":"SOAP.md","path":"Study/API/SOAP.md","url":"/Study/API/SOAP.html"},{"sort":4,"layout":"default","title":"Vector &amp; Pair","content":"<h1 id=\"vector--pair\">Vector &amp; Pair</h1>\n\n<p><strong>Vector</strong></p>\n\n<ul>\n <li>메모리가 자동으로 할당되는 배열</li>\n <li>capacity를 설정하고, size가 capacity에 도달하면 capacity를 늘려주면서 이전의 배열에 저장된 값을 이동\n <ul>\n <li>Realloc 단계에서 많은 시간이 소요되어 시간/공간 복잡도를 고려하여 capacity를 늘려주는 게 중요</li>\n <li>아래 구현은 size가 다 찰때마다 capacity를 2배씩 늘렸지만, 1.5에서 2 사이의 값으로 조절하는게 메모리 최적화를 위한 솔루션이라고 함\n <ul>\n <li>Windows 환경에서 돌릴 때는 1.5~1.6배씩 증가하는 것으로 확인되었는데 MacOS에서는 2배씩 늘어나는 것으로 확인됨</li>\n </ul>\n </li>\n </ul>\n </li>\n <li>배열의 가장 앞과 마지막에 있는 값을 O(1)의 속도로 참조할 수 있으며, Push_back / Pop_back method도 O(1)로 진행할 수 있음</li>\n <li>연속된 메모리에 값을 저장하기 때문에, 포인터 연산이 가능\n <ul>\n <li>연속된 메모리에 작성되어 있기 때문에 Deque보다 삽입/제거 속도가 빠르지만, Size 재할당에서 많은 시간이 소요됨</li>\n </ul>\n </li>\n</ul>\n\n<p><img src=\"/DataStructure/Container/Img/Vector.png\" alt=\"Vector\" /></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"nc\">T</span><span class=\"p\">&gt;</span>\n<span class=\"k\">class</span> <span class=\"nc\">_vector</span>\n<span class=\"p\">{</span>\n<span class=\"nl\">private:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">_capacity</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">_size</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"n\">T</span> <span class=\"o\">*</span><span class=\"n\">vc</span><span class=\"p\">;</span>\n\n<span class=\"nl\">public:</span>\n    <span class=\"n\">_vector</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">_capacity</span> <span class=\"o\">=</span> <span class=\"n\">size</span><span class=\"p\">;</span>\n        <span class=\"n\">vc</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">size</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    <span class=\"o\">~</span><span class=\"n\">_vector</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">delete</span><span class=\"p\">[]</span> <span class=\"n\">vc</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">_size</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">empty</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"o\">!</span><span class=\"n\">_size</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"kt\">void</span> <span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">T</span> <span class=\"o\">*</span><span class=\"n\">tVc</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">size</span><span class=\"p\">];</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">_size</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n            <span class=\"n\">tVc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"k\">delete</span><span class=\"p\">[]</span> <span class=\"n\">vc</span><span class=\"p\">;</span>\n\n        <span class=\"n\">vc</span> <span class=\"o\">=</span> <span class=\"n\">tVc</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">void</span> <span class=\"n\">clear</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">delete</span><span class=\"p\">[]</span> <span class=\"n\">vc</span><span class=\"p\">;</span>\n        <span class=\"n\">_capacity</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">_size</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">vc</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">void</span> <span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">_size</span> <span class=\"o\">==</span> <span class=\"n\">_capacity</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">_capacity</span> <span class=\"o\">*=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n            <span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"n\">_capacity</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">_size</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">void</span> <span class=\"n\">pop_back</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">_size</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"o\">--</span><span class=\"n\">_size</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"c1\">//        vc[--_size] = {0, 0}; // if pair</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">void</span> <span class=\"n\">reverse</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">_size</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"c1\">// swap</span>\n            <span class=\"n\">T</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n            <span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">vc</span><span class=\"p\">[(</span><span class=\"n\">_size</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">];</span>\n            <span class=\"n\">vc</span><span class=\"p\">[(</span><span class=\"n\">_size</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">T</span> <span class=\"n\">front</span><span class=\"p\">(){</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">_size</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"There's not Component\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">T</span> <span class=\"n\">back</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">_size</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"There's not Component\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">_size</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">T</span> <span class=\"o\">&amp;</span><span class=\"k\">operator</span><span class=\"p\">[](</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span> <span class=\"p\">}</span>\n    <span class=\"n\">T</span> <span class=\"k\">operator</span><span class=\"p\">[](</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span> <span class=\"p\">}</span>\n    <span class=\"kt\">void</span> <span class=\"k\">operator</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">_vector</span> <span class=\"o\">&amp;</span><span class=\"n\">tvc</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">_capacity</span> <span class=\"o\">=</span> <span class=\"n\">tvc</span><span class=\"p\">.</span><span class=\"n\">_capacity</span><span class=\"p\">;</span>\n        <span class=\"n\">_size</span> <span class=\"o\">=</span> <span class=\"n\">tvc</span><span class=\"p\">.</span><span class=\"n\">_size</span><span class=\"p\">;</span>\n        <span class=\"k\">delete</span><span class=\"p\">[]</span> <span class=\"n\">vc</span><span class=\"p\">;</span>\n        <span class=\"n\">vc</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">_capacity</span><span class=\"p\">];</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">_size</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n            <span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tvc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre>  </div></div>\n\n<p><strong>Pair</strong></p>\n\n<ul>\n <li>두 개의 객체 (first, second)를 하나의 객체로 묶어서 사용하는 클래스</li>\n <li>두 개의 객체 내에 값이 존재하기 때문에 값이 저장되는 객체를 참조할 때는 <code class=\"language-plaintext highlighter-rouge\">.first / .second</code> 와 같이 실제 값이 저장되는 객체로 접근해야 됨</li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"nc\">T1</span><span class=\"p\">,</span> <span class=\"k\">typename</span> <span class=\"nc\">T2</span><span class=\"p\">&gt;</span>\n<span class=\"k\">class</span> <span class=\"nc\">_pair</span>\n<span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"n\">T1</span> <span class=\"n\">first</span><span class=\"p\">;</span>\n    <span class=\"n\">T2</span> <span class=\"n\">second</span><span class=\"p\">;</span>\n\n    <span class=\"kt\">bool</span> <span class=\"k\">operator</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">_pair</span><span class=\"o\">&lt;</span><span class=\"n\">T1</span><span class=\"p\">,</span> <span class=\"n\">T2</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">first</span> <span class=\"o\">==</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">second</span> <span class=\"o\">&lt;</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">first</span> <span class=\"o\">&lt;</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre>  </div></div>\n\n","dir":"/DataStructure/Container/","name":"Vector_Pair.md","path":"DataStructure/Container/Vector_Pair.md","url":"/DataStructure/Container/Vector_Pair.html"},{"sort":4,"layout":"default","title":"Decorator","content":"<h1 id=\"decorator\">Decorator</h1>\n\n","dir":"/Study/Design_Pattern/Structural/","name":"Decorator.md","path":"Study/Design_Pattern/Structural/Decorator.md","url":"/Study/Design_Pattern/Structural/Decorator.html"},{"sort":4,"layout":"default","title":"Table","content":"<h1 id=\"table\">Table</h1>\n\n<ul>\n <li>asdas</li>\n</ul>\n","dir":"/Computer_Science/Database/","name":"Table.md","path":"Computer_Science/Database/Table.md","url":"/Computer_Science/Database/Table.html"},{"sort":4,"layout":"default","title":"Nomad","content":"<h1 id=\"nomad\">Nomad</h1>\n\n","dir":"/Study/Infrastructure/Container_Orchestration/","name":"Nomad.md","path":"Study/Infrastructure/Container_Orchestration/Nomad.md","url":"/Study/Infrastructure/Container_Orchestration/Nomad.html"},{"sort":4,"layout":"default","title":"YAGNI","content":"<h1 id=\"yagni\">YAGNI</h1>\n\n","dir":"/Study/Software_Development/OOP_Principle/","name":"Yagni.md","path":"Study/Software_Development/OOP_Principle/Yagni.md","url":"/Study/Software_Development/OOP_Principle/Yagni.html"},{"sort":4,"layout":"default","title":"PostgreSQL","content":"<h1 id=\"postgresql\">PostgreSQL</h1>\n\n","dir":"/Computer_Science/Database/RDBMS/","name":"PostgreSQL.md","path":"Computer_Science/Database/RDBMS/PostgreSQL.md","url":"/Computer_Science/Database/RDBMS/PostgreSQL.html"},{"sort":4,"layout":"default","title":"Strongly Connected component","content":"<h1 id=\"strongly-connected-component\">Strongly Connected component</h1>\n\n<ul>\n <li>하나의 정점에서 동일한 SCC 내에 있는 정점으로 이동할 수 있다\n <ul>\n <li>직/간접적인 경로 존재</li>\n </ul>\n </li>\n</ul>\n\n<h3 id=\"타잔-알고리즘\">타잔 알고리즘</h3>\n\n<ul>\n <li>Robert Tarjan이 개발한 알고리즘으로, DFS와 Stack을 이용</li>\n <li>방문을 안했으면 정방향 간선, 이미 방문을 했으면 역방향 간선으로 구분</li>\n <li>\n <p>dfsn[]으로 정점번호 저장 / visited 체크</p>\n </li>\n <li>모든 노드를 DFS로 탐색하면서 Stack에 담음\n <ul>\n <li>노드/자식의 노드에서 조상 노드로 돌아갈 수 없을 때 SCC 생성</li>\n <li>SCC가 생성되면 Stack에서 제거</li>\n <li>Stack이 비게 되면 SCC 생성이 완료됨</li>\n </ul>\n </li>\n <li>DFS\n <ul>\n <li>자신의 node / 자식의 node 중 가장 작은 번호의 node 추출</li>\n <li>자기자신이 가장 작은 node인 경우, 되돌아갈 node가 없으니 SCC 추출</li>\n </ul>\n </li>\n <li>모든 정점과 간선에 한번씩 접근하기 때문에 시간복잡도는 O(V+E)</li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;stack&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"cp\">#define NODE 4\n</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">cnt</span><span class=\"p\">,</span> <span class=\"n\">dfsn</span><span class=\"p\">[</span><span class=\"n\">NODE</span><span class=\"p\">];</span>\n<span class=\"kt\">bool</span> <span class=\"n\">extract</span><span class=\"p\">[</span><span class=\"n\">NODE</span><span class=\"p\">];</span>\n<span class=\"n\">vector</span> <span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"n\">NODE</span><span class=\"p\">];</span>\n<span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">SCC</span><span class=\"p\">;</span>\n<span class=\"n\">stack</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">min</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">?</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">dfs</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">cur</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">dfsn</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">]</span> <span class=\"o\">=</span>  <span class=\"o\">++</span><span class=\"n\">cnt</span><span class=\"p\">;</span> <span class=\"c1\">// count to node</span>\n    <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">cur</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">dfsn</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">];</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"n\">next</span> <span class=\"o\">:</span> <span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">])</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">dfsn</span><span class=\"p\">[</span><span class=\"n\">next</span><span class=\"p\">])</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">next</span><span class=\"p\">));</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">extract</span><span class=\"p\">[</span><span class=\"n\">next</span><span class=\"p\">])</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">dfsn</span><span class=\"p\">[</span><span class=\"n\">next</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">res</span> <span class=\"o\">==</span> <span class=\"n\">dfsn</span><span class=\"p\">[</span><span class=\"n\">cur</span><span class=\"p\">])</span> \n    <span class=\"p\">{</span>\n        <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">tmpscc</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">();</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n            <span class=\"n\">tmpscc</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">);</span>\n            <span class=\"n\">extract</span><span class=\"p\">[</span><span class=\"n\">val</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">cur</span><span class=\"p\">)</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">tmpscc</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">tmpscc</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">());</span>\n        <span class=\"n\">SCC</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">tmpscc</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">CreateSCC</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// Create CSS by using DFS</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">NODE</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">dfsn</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">cnt</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">CreateSCC</span><span class=\"p\">();</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span><span class=\"o\">&amp;</span> <span class=\"n\">tmpscc</span> <span class=\"o\">:</span> <span class=\"n\">SCC</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">tmpscc</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">val</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Graph/","name":"Strongly_Connected_Component.md","path":"Algorithm/Graph/Strongly_Connected_Component.md","url":"/Algorithm/Graph/Strongly_Connected_Component.html"},{"sort":4,"layout":"default","title":"Network Class","content":"<h1 id=\"network-class\">Network Class</h1>\n\n<ul>\n <li>IPv4 주소에서 제공하는 네트워크 주소(약 41억9천개)가 고갈되면서 IPv6로 조금씩 전환되고 있음</li>\n <li>기존에 구축된 인프라를 이용하기 위해서 클래스라는 이름으로 네트워크를 나눔</li>\n <li>IPv4에서 IP 주소는 네트워크 주소와 호스트 주소의 결합으로 구성됨\n <ul>\n <li>네트워크 주소 : 인터넷 상에서 네트워크를 구분</li>\n <li>호스트 주소 : 특정 네트워크 내에서 존재하는 기기들을 구분</li>\n </ul>\n </li>\n <li>32비트 내에서 몇가지 클래스가 존재하며 네트워크 주소와 호스트 주소의 범위가 다름</li>\n</ul>\n\n<table>\n <thead>\n <tr>\n <th>클래스</th>\n <th>할당 가능 비트수</th>\n <th>IP주소의 첫번째 옥텟의 범위 (32bit)</th>\n <th>IP Address 범위</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>A</td>\n <td>\\(2^7\\) = 128</td>\n <td>0xxxxxx (0~127)</td>\n <td>0.0.0.0~127.255.255.255</td>\n </tr>\n <tr>\n <td>B</td>\n <td>2<sup>14</sup>= 16384</td>\n <td>10xxxxxx (128~191)</td>\n <td>128.0.0.0~191.255.255.255</td>\n </tr>\n <tr>\n <td>C</td>\n <td>2<sup>21</sup> = 2097152</td>\n <td>110xxxxx (192~223)</td>\n <td>192.0.0.0~223.255.255.255</td>\n </tr>\n <tr>\n <td>D</td>\n <td>2<sup>28</sup> (MultiCast Address)</td>\n <td>1110xxxx (224 ~ 239)</td>\n <td>224.0.0.0~239.255.255.255</td>\n </tr>\n <tr>\n <td>E</td>\n <td>Reserverd Address</td>\n <td>1111xxxx (240~255)</td>\n <td>240.0.0.0~255.255.255.255</td>\n </tr>\n </tbody>\n</table>\n\n<ul>\n <li>A/B/C 클래스의 호스트주소에서 0/1 bit으로 채워진 주소는 사용하면 안 됨\n <ul>\n <li>A클래스 기준, 0.0.0 은 현재 네트워크 주소이고 255.255.255 는 브로드캐스트 주소이다.</li>\n </ul>\n </li>\n</ul>\n\n<p><strong>A클래스</strong></p>\n\n<ul>\n <li>대규모 네트워크 환경에서 사용</li>\n <li>Network 대역 : 8bit / Host 대역이 24bit이므로 호스트 수는 (2<sup>24</sup> = 16777216)-2 가지</li>\n <li>Default Subnet Mask : 255.0.0.0</li>\n</ul>\n\n<p><strong>B클래스</strong></p>\n\n<ul>\n <li>중간 규모의 네트워크 환경에서 사용</li>\n <li>Network 대역 : 16bit / Host 대역이 16bit이므로 호스트 수는 (2<sup>16</sup> = 65536)-2 가지</li>\n <li>Default Subnet Mask : 255.255.0.0</li>\n</ul>\n\n<p><strong>C클래스</strong></p>\n\n<ul>\n <li>소규모 네트워크 환경에서 사용</li>\n <li>Network 대역 : 24bit / Host 대역이 8bit이므로 호스트 수는 (2<sup>8</sup> = 256)-2 가지</li>\n <li>Default Subnet Mask : 255.255.255.0</li>\n</ul>\n\n<p><strong>D클래스 / E클래스</strong></p>\n\n<ul>\n <li>ABC 클래스와는 다른 용도로 사용되며, 일반 IP주소처럼 사용할 수 없는 특수용도 IP주소임</li>\n <li>네트워크 / 호스트 주소의 구분이 없음</li>\n <li>D클래스\n <ul>\n <li>MultiCast를 위해 존재하는 클래스</li>\n </ul>\n </li>\n <li>E클래스\n <ul>\n <li>연구용으로 유보되어 있음 (Reserved Class)</li>\n </ul>\n </li>\n</ul>\n","dir":"/Computer_Science/Network/","name":"Class.md","path":"Computer_Science/Network/Class.md","url":"/Computer_Science/Network/Class.html"},{"sort":4,"layout":"default","title":"Salt","content":"<h1 id=\"salt\">Salt</h1>\n\n","dir":"/Study/Infrastructure/Configuration_Management/","name":"Salt.md","path":"Study/Infrastructure/Configuration_Management/Salt.md","url":"/Study/Infrastructure/Configuration_Management/Salt.html"},{"sort":4,"layout":"default","title":"Floyd Warshall","content":"<h1 id=\"floyd-warshall\">Floyd Warshall</h1>\n\n<ul>\n <li>모든 노드에서 다른 모든 노드까지의 DP로 최단 거리 찾기</li>\n <li>모든 노드에서 다른 노드까지의 거리와 해당 노드를 통과하는 거리를 확인해야되니 O(\\(N^3\\)) 의 시간 복잡도를 가진다.</li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#Include &lt;vector&gt;\n#include &lt;algorithm&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"cp\">#define nodecount 100\n#define INF 1e9\n</span><span class=\"kt\">int</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">nodecount</span><span class=\"p\">][</span><span class=\"n\">nodecount</span><span class=\"p\">];</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">floyd_warshall</span><span class=\"p\">(){</span>\n    <span class=\"c1\">// init dist</span>\n    <span class=\"n\">fill_n</span><span class=\"p\">(</span><span class=\"n\">dist</span><span class=\"p\">,</span><span class=\"n\">dist</span><span class=\"o\">+</span><span class=\"n\">nodecount</span><span class=\"o\">*</span><span class=\"n\">nodecount</span><span class=\"p\">;</span> <span class=\"n\">INF</span><span class=\"p\">);</span>\n    \n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">nodecount</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"n\">nodecount</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">){</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">==</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">;</span> <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n\t\t\t\t        <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">][</span><span class=\"n\">b</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">][</span><span class=\"n\">b</span><span class=\"p\">],</span><span class=\"n\">c</span><span class=\"p\">);</span>\n                <span class=\"c1\">// If Bidirectional,  j = i; j&lt;nodecount; j++ ;    dist[a][b] = dist[b][a] = c;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">nodecount</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span> <span class=\"c1\">// through node</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">src</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">src</span><span class=\"o\">&lt;</span><span class=\"n\">nodecount</span><span class=\"p\">;</span> <span class=\"n\">src</span><span class=\"o\">++</span><span class=\"p\">){</span> <span class=\"c1\">// source</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">tgt</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">tgt</span> <span class=\"o\">&lt;</span> <span class=\"n\">nodecount</span><span class=\"p\">;</span> <span class=\"n\">tgt</span><span class=\"o\">++</span><span class=\"p\">){</span> <span class=\"c1\">// target</span>\n                <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"p\">][</span><span class=\"n\">tgt</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">tgt</span><span class=\"p\">],</span> <span class=\"n\">dist</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"p\">][</span><span class=\"n\">tgt</span><span class=\"p\">]);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Shortest_Path/","name":"Floyd_Warshall.md","path":"Algorithm/Shortest_Path/Floyd_Warshall.md","url":"/Algorithm/Shortest_Path/Floyd_Warshall.html"},{"sort":4,"layout":"default","title":"Iterator","content":"<h1 id=\"iterator\">Iterator</h1>\n\n","dir":"/Study/Design_Pattern/Behavioral/","name":"Iterator.md","path":"Study/Design_Pattern/Behavioral/Iterator.md","url":"/Study/Design_Pattern/Behavioral/Iterator.html"},{"sort":4,"layout":"default","title":"B+ Tree","content":"<h1 id=\"b-tree\">B+ Tree</h1>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code></code></pre>  </div></div>\n\n","dir":"/DataStructure/Tree/","name":"B+Tree.md","path":"DataStructure/Tree/B+Tree.md","url":"/DataStructure/Tree/B+Tree.html"},{"sort":4,"layout":"default","title":"Eratosthenes","content":"<h1 id=\"eratosthenes\">Eratosthenes</h1>\n\n<ul>\n <li>에라토스테네스의 체 (Sieve of Eratosthenes) : 임의의 수 N까지 소수(Prime Number)를 계산하는 방법</li>\n <li>loop의 범위를 \\(\\sqrt{N}\\) 까지만 계산하면 됨\n <ul>\n <li>예를 들어 N = 30인 경우, \\(\\sqrt{N} = 5\\) 인데 <code class=\"language-plaintext highlighter-rouge\">4*5 / 4*6 / 4*7</code> 을 계산한 뒤에 <code class=\"language-plaintext highlighter-rouge\">5*4 / 5*5 / 5*6 </code> 까지 계산하게 됨\n <ul>\n <li>이런 경우, <code class=\"language-plaintext highlighter-rouge\">6 * 4/ 6 * 5 </code> 도 계산되어야 할 것 같지만, 이전에 계산된 항목을 중복으로 하는 것을 알 수 있음</li>\n </ul>\n </li>\n </ul>\n </li>\n <li><code class=\"language-plaintext highlighter-rouge\">isPrime = false</code> 처리가 미리 된 항목은 생략 가능</li>\n <li>두 수 A / B가 있고, B가 A의 배수라고 하면, B의 배수는 A의 배수를 만족\n <ul>\n <li>예를 들어 A = 3, B = 12 인 경우, 12의 배수 24, 36 등은 3의 배수를 만족</li>\n </ul>\n </li>\n <li>두번째 반복문에서 <code class=\"language-plaintext highlighter-rouge\">j = i*i</code> 부터 시작하는 이유는, 2부터 i-1까지의 배수는 이미 확인을 했기 떄문에 <code class=\"language-plaintext highlighter-rouge\">i*i</code> 부터 확인\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">j += i</code> 는 i의 배수를 나타냄</li>\n </ul>\n </li>\n</ul>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">bool</span> <span class=\"n\">isPrime</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">eratosthenes</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">));</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">root</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">isPrime</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">+=</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">isPrime</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"nf\">implement</span><span class=\"p\">(){</span>\n    \n    <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">isPrime</span><span class=\"p\">,</span><span class=\"nb\">true</span><span class=\"p\">,</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">isPrime</span><span class=\"p\">));</span>\n    <span class=\"n\">eratosthenes</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Math/","name":"Eratosthenes.md","path":"Algorithm/Math/Eratosthenes.md","url":"/Algorithm/Math/Eratosthenes.html"},{"sort":4,"layout":"default","title":"System Call","content":"<h1 id=\"system-call\">System Call</h1>\n\n<p><strong>OS Structure</strong></p>\n\n","dir":"/Computer_Science/OS/","name":"System_Call.md","path":"Computer_Science/OS/System_Call.md","url":"/Computer_Science/OS/System_Call.html"},{"sort":4,"layout":"default","title":"Counting Sort","content":"<h1 id=\"counting-sort\">Counting Sort</h1>\n\n<ul>\n <li>Set the size of the array as much as the maximum value or more</li>\n <li>It is used non-negative values when integer array</li>\n <li>It is composed of non-negative values, and registers the number of values by creating an array called counting.</li>\n <li>By applying presum to the counting array, knowing the start index of each value in the sorted array.</li>\n <li>Iterate the initially composed array by deducted the counting value by 1.\n <ul>\n <li>continuosly update index</li>\n </ul>\n </li>\n <li>Time complexity is O(N), which is register counting array and sort output array.</li>\n <li>Time complexity is O(K), which is applied presum counting array.</li>\n <li>So, the summary Time complexity is O(N+K)</li>\n <li>Useful when the maximum value of the array is small</li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">counting_sort</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"n\">arr</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">count</span><span class=\"p\">[</span><span class=\"n\">K</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n\t\n\t<span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">));</span>\n\t<span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">));</span>\n\n\t<span class=\"c1\">// register count</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"o\">++</span><span class=\"n\">count</span><span class=\"p\">[</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]];</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"c1\">// presum - to find index</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;=</span><span class=\"n\">K</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>  <span class=\"c1\">// count start from 1, not 0</span>\n\t\t<span class=\"n\">count</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">count</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>  \n\t<span class=\"p\">}</span>\n\n\t<span class=\"c1\">// sorting</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// if not consisted by 0</span>\n\t\t<span class=\"n\">output</span><span class=\"p\">[</span><span class=\"n\">count</span><span class=\"p\">[</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span> <span class=\"c1\">// count start from 1, but index start from 0</span>\n\t\t<span class=\"o\">--</span><span class=\"n\">count</span><span class=\"p\">[</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]];</span>  <span class=\"c1\">// register one value, minus 1 index</span>\n\t<span class=\"p\">}</span>\n\n\t\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"p\">];</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n\t\t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">4</span> <span class=\"p\">};</span>\n\n\t<span class=\"n\">counting_sort</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">);</span>\n\n\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Sort/","name":"Counting.md","path":"Algorithm/Sort/Counting.md","url":"/Algorithm/Sort/Counting.html"},{"sort":4,"layout":"default","title":"Bamboo","content":"<h1 id=\"bamboo\">Bamboo</h1>\n\n","dir":"/Study/Infrastructure/CICD_Tool/","name":"Bamboo.md","path":"Study/Infrastructure/CICD_Tool/Bamboo.md","url":"/Study/Infrastructure/CICD_Tool/Bamboo.html"},{"sort":4,"layout":"default","title":"Prototype","content":"<h1 id=\"prototype\">Prototype</h1>\n\n","dir":"/Study/Design_Pattern/Creational/","name":"Prototype.md","path":"Study/Design_Pattern/Creational/Prototype.md","url":"/Study/Design_Pattern/Creational/Prototype.html"},{"sort":4,"layout":"default","title":"LCS","content":"<h1 id=\"lcs\">LCS</h1>\n\n<ul>\n <li>최장 공통 부분 수열 (Longest Common Subsequence) or 최장 공통 문자열 (Longest Common Substring)</li>\n <li>최장 공통 부분 수열은 부분 수열이 연속된 index를 가지지 않아도 됨</li>\n <li>최장 공통 문자열은 부분 문자열이기 떄문에 연속된 index를 가짐</li>\n</ul>\n\n<h3 id=\"longest-common-subsequence\">Longest Common Subsequence</h3>\n\n<ul>\n <li>부분 수열은 연속된 값이 아님</li>\n <li>2개의 문자열을 축으로 2차원 배열 생성</li>\n <li>연속된 값이 아니기 때문에 문자열이 다르더라도 최대값이 유지됨</li>\n <li>문자열이 다른 경우 <code class=\"language-plaintext highlighter-rouge\">max(sub_s1, sub_s2) = max(lcs[i-1][j], lcs[i][j-1])</code>\n <ul>\n <li>최댓값으로 적용하기 위해 두개의 부분 문자 중 큰 값을 취함</li>\n </ul>\n </li>\n <li>문자열이 같은 경우 <code class=\"language-plaintext highlighter-rouge\">lcs[i][j] = lcs[i-1][j-1] + 1</code>\n <ul>\n <li>두 개의 문자 중 공통된 부분의 값에서 1을 더함</li>\n </ul>\n </li>\n <li>공통 문자열에 접근하기 위해 index 0 는 0으로 set</li>\n <li>다른 경우 이전 값 중 큰 값으로 적용하기 때문에 행렬의 끝에 있는 값이 결과값임</li>\n</ul>\n\n<p>ex)</p>\n\n<table>\n <thead>\n <tr>\n <th> </th>\n <th> </th>\n <th>b</th>\n <th>f</th>\n <th>d</th>\n <th>e</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td> </td>\n <td>0</td>\n <td>0</td>\n <td>0</td>\n <td>0</td>\n <td>0</td>\n </tr>\n <tr>\n <td>b</td>\n <td>0</td>\n <td><strong>1</strong></td>\n <td>1</td>\n <td>1</td>\n <td>1</td>\n </tr>\n <tr>\n <td>b</td>\n <td>0</td>\n <td>1</td>\n <td>1</td>\n <td>1</td>\n <td>1</td>\n </tr>\n <tr>\n <td>d</td>\n <td>0</td>\n <td>1</td>\n <td>1</td>\n <td><strong>2</strong></td>\n <td>2</td>\n </tr>\n <tr>\n <td>e</td>\n <td>0</td>\n <td>1</td>\n <td>1</td>\n <td>2</td>\n <td><strong>3</strong></td>\n </tr>\n <tr>\n <td>f</td>\n <td>0</td>\n <td>1</td>\n <td><strong>2</strong></td>\n <td>2</td>\n <td>3</td>\n </tr>\n </tbody>\n</table>\n\n<ul>\n <li>경로추적\n <ul>\n <li>마지막 노드에서 bottom-up 방식으로 찾음</li>\n <li>마지막 노드에서 왼쪽과 윗쪽을 보면서 같은 수가 있으면 index 이동</li>\n <li>같은 수가 없으면 stack에 index를 저장하고 대각선으로 이동</li>\n </ul>\n </li>\n</ul>\n\n<p><strong>점화식</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">len2</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">s2</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">else</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;stack&gt;\n#define MAX_NODE 501\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">MAX_NODE</span><span class=\"p\">][</span><span class=\"n\">MAX_NODE</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t\n\t<span class=\"n\">string</span> <span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"n\">s2</span><span class=\"p\">;</span>\n\t<span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">s1</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">s2</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"sc\">'0'</span> <span class=\"o\">+</span> <span class=\"n\">s1</span><span class=\"p\">;</span>\n\t<span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"sc\">'0'</span> <span class=\"o\">+</span> <span class=\"n\">s2</span><span class=\"p\">;</span>\n\n\t<span class=\"kt\">int</span> <span class=\"n\">len1</span> <span class=\"o\">=</span> <span class=\"n\">s1</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">len2</span> <span class=\"o\">=</span> <span class=\"n\">s2</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len2</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">len2</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">s2</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">else</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"LCS LENGTH IS \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">len1</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">len2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n\t<span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">len1</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">len2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"n\">stack</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">st</span><span class=\"p\">;</span> <span class=\"c1\">// FROM LAST NODE</span>\n\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"n\">j</span><span class=\"o\">--</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">==</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">--</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">())</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">s1</span><span class=\"p\">[</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">()];</span>\n\t\t<span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h3 id=\"longest-common-substring\">Longest Common Substring</h3>\n\n<ul>\n <li>Longeset Common Subsequence와 비슷한 내용이지만, 연속되지 않은 부분문자를 포함한다.</li>\n <li>Longest Common Subsequence에서는 연속하지 않은 부분 수열을 포함하기 때문에 <code class=\"language-plaintext highlighter-rouge\">max(lcs[i-1][j], lcs[i][j-1])</code>을 적용했지만, Substring에서는 0으로 대체한다</li>\n <li>Trace할 때도, 최대값이 나온 자리에서 대각선으로 이동하며 stack에 쌓으면 된다.</li>\n</ul>\n\n<p><strong>점화식</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">len2</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">s2</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">else</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;stack&gt;\n#define MAX_NODE 501\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">MAX_NODE</span><span class=\"p\">][</span><span class=\"n\">MAX_NODE</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n\t\n\t<span class=\"n\">string</span> <span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"n\">s2</span><span class=\"p\">;</span>\n\t<span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">s1</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">s2</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"sc\">'0'</span> <span class=\"o\">+</span> <span class=\"n\">s1</span><span class=\"p\">;</span>\n\t<span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"sc\">'0'</span> <span class=\"o\">+</span> <span class=\"n\">s2</span><span class=\"p\">;</span>\n\n\t<span class=\"kt\">int</span> <span class=\"n\">len1</span> <span class=\"o\">=</span> <span class=\"n\">s1</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">len2</span> <span class=\"o\">=</span> <span class=\"n\">s2</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len2</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n\t<span class=\"kt\">int</span> <span class=\"n\">max_length</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">len2</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">s2</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">else</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">max_length</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"p\">,</span> <span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"LCS LENGTH IS \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">max_length</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">vc</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">len1</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">&lt;</span> <span class=\"n\">len2</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">){</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lcs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">max_length</span><span class=\"p\">)</span> <span class=\"n\">vc</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">({</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">});</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"n\">it</span> <span class=\"o\">:</span> <span class=\"n\">vc</span><span class=\"p\">){</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"o\">-</span><span class=\"n\">max_length</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">first</span> <span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n\t\t\t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">s1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/DP/","name":"LCS.md","path":"Algorithm/DP/LCS.md","url":"/Algorithm/DP/LCS.html"},{"sort":5,"layout":"default","title":"Compile &amp; Interpreter","content":"<h1 id=\"compile--interpreter\">Compile &amp; Interpreter</h1>\n\n<h3 id=\"compiler\">Compiler</h3>\n\n<h3 id=\"interpreter\">Interpreter</h3>\n\n","dir":"/Computer_Science/OS/","name":"Compiler_Interpreter.md","path":"Computer_Science/OS/Compiler_Interpreter.md","url":"/Computer_Science/OS/Compiler_Interpreter.html"},{"sort":5,"layout":"default","title":"View","content":"<h1 id=\"view\">View</h1>\n\n<ul>\n <li>asdsad</li>\n</ul>\n","dir":"/Computer_Science/Database/","name":"View.md","path":"Computer_Science/Database/View.md","url":"/Computer_Science/Database/View.html"},{"sort":5,"layout":"default","title":"Red Black Tree","content":"<h1 id=\"red-black-tree\">Red Black Tree</h1>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code></code></pre>  </div></div>\n\n","dir":"/DataStructure/Binary_Tree/","name":"Red_Black_Tree.md","path":"DataStructure/Binary_Tree/Red_Black_Tree.md","url":"/DataStructure/Binary_Tree/Red_Black_Tree.html"},{"sort":5,"layout":"default","title":"Deque","content":"<h1 id=\"deque\">Deque</h1>\n\n<ul>\n <li>Stack과 Queue를 동시에 사용할 수 있는 Container</li>\n <li>양 끝에 element를 추가/삭제를 진행할 때 O(1)의 속도로 수행할 수 있다.</li>\n <li>\n <p>양방향에 Push / Pop이 빈번하게 사용되는 경우 사용하기 좋음</p>\n </li>\n <li>Front와 Back을 참조할 수 있으며, LinkedList로 구현하여 Size가 자동으로 변경됨</li>\n</ul>\n\n<p><br /></p>\n\n<p><img src=\"/DataStructure/Container/Img/Deque1.png\" alt=\"Deque1\" /></p>\n\n<p><img src=\"/DataStructure/Container/Img/Deque2.png\" alt=\"Deque2\" /></p>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"nc\">T</span><span class=\"p\">&gt;</span>\n<span class=\"k\">class</span> <span class=\"nc\">DEQUE</span><span class=\"p\">;</span>\n\n<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"nc\">T</span><span class=\"p\">&gt;</span>\n<span class=\"k\">class</span> <span class=\"nc\">NODE</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">friend</span> <span class=\"k\">class</span> <span class=\"nc\">DEQUE</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n<span class=\"nl\">private:</span>\n    <span class=\"n\">T</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n    <span class=\"n\">NODE</span> <span class=\"o\">*</span><span class=\"n\">left</span><span class=\"p\">;</span>\n    <span class=\"n\">NODE</span> <span class=\"o\">*</span><span class=\"n\">right</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"nc\">T</span><span class=\"p\">&gt;</span>\n<span class=\"k\">class</span> <span class=\"nc\">DEQUE</span>\n<span class=\"p\">{</span>\n<span class=\"nl\">private:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">_size</span><span class=\"p\">;</span>\n    <span class=\"n\">NODE</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"n\">head</span><span class=\"p\">;</span>\n    <span class=\"n\">NODE</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"n\">tail</span><span class=\"p\">;</span>\n\n<span class=\"nl\">public:</span>\n    <span class=\"n\">DEQUE</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">_size</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">NODE</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n        <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n        <span class=\"n\">tail</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">NODE</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n        <span class=\"n\">tail</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">tail</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"o\">~</span><span class=\"n\">DEQUE</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">_size</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">NODE</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">NODE</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"n\">delNode</span> <span class=\"o\">=</span> <span class=\"n\">pos</span><span class=\"p\">;</span>\n            <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">pos</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"p\">;</span>\n\n            <span class=\"k\">delete</span> <span class=\"n\">delNode</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">delete</span> <span class=\"n\">tail</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"n\">push_front</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">NODE</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"n\">newNode</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">NODE</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n            <span class=\"n\">newNode</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n            <span class=\"n\">newNode</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n            <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">newNode</span><span class=\"p\">;</span>\n            <span class=\"n\">newNode</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">tail</span><span class=\"p\">;</span>\n            <span class=\"n\">tail</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">newNode</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">NODE</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"n\">newNode</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">NODE</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n            <span class=\"n\">newNode</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n            <span class=\"n\">newNode</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"p\">;</span>\n            <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">newNode</span><span class=\"p\">;</span>\n            <span class=\"n\">newNode</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n            <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">newNode</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">_size</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">NODE</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"n\">newNode</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">NODE</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n            <span class=\"n\">newNode</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n            <span class=\"n\">newNode</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n            <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">newNode</span><span class=\"p\">;</span>\n            <span class=\"n\">newNode</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">tail</span><span class=\"p\">;</span>\n            <span class=\"n\">tail</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">newNode</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">NODE</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"n\">newNode</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">NODE</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n            <span class=\"n\">newNode</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n            <span class=\"n\">newNode</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">tail</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"p\">;</span>\n            <span class=\"n\">tail</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">newNode</span><span class=\"p\">;</span>\n            <span class=\"n\">newNode</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">tail</span><span class=\"p\">;</span>\n            <span class=\"n\">tail</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">newNode</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">_size</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"n\">pop_front</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">_size</span><span class=\"p\">)</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"deque is emptied\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">NODE</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"p\">;</span>\n            <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n            <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"p\">;</span>\n            <span class=\"k\">delete</span> <span class=\"n\">pos</span><span class=\"p\">;</span>\n            <span class=\"n\">_size</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">void</span> <span class=\"n\">pop_back</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">_size</span><span class=\"p\">)</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"deque is emptied\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">NODE</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">tail</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"p\">;</span>\n            <span class=\"n\">tail</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">tail</span><span class=\"p\">;</span>\n            <span class=\"n\">tail</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">tail</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"p\">;</span>\n            <span class=\"k\">delete</span> <span class=\"n\">pos</span><span class=\"p\">;</span>\n            <span class=\"n\">_size</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">T</span> <span class=\"n\">front</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">_size</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"deque is emptied\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"n\">head</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">T</span> <span class=\"n\">back</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">_size</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"deque is emptied\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"n\">tail</span><span class=\"o\">-&gt;</span><span class=\"n\">left</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">_size</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">bool</span> <span class=\"n\">empty</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">!</span><span class=\"n\">_size</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">void</span> <span class=\"n\">all</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">NODE</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">pos</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">pos</span> <span class=\"o\">==</span> <span class=\"n\">head</span> <span class=\"o\">||</span> <span class=\"n\">pos</span> <span class=\"o\">==</span> <span class=\"n\">tail</span><span class=\"p\">))</span>\n                <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">pos</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span><span class=\"p\">;</span>\n            <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">pos</span><span class=\"o\">-&gt;</span><span class=\"n\">right</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre>  </div></div>\n\n","dir":"/DataStructure/Container/","name":"Deque.md","path":"DataStructure/Container/Deque.md","url":"/DataStructure/Container/Deque.html"},{"sort":5,"layout":"default","title":"Pl SQL","content":"<h1 id=\"pl-sql\">Pl SQL</h1>\n\n","dir":"/Computer_Science/Database/RDBMS/","name":"Pl_SQL.md","path":"Computer_Science/Database/RDBMS/Pl_SQL.md","url":"/Computer_Science/Database/RDBMS/Pl_SQL.html"},{"sort":5,"layout":"default","title":"Edit Distance","content":"<h1 id=\"edit-distance\">Edit Distance</h1>\n\n<ul>\n <li>\n <p>두개의 문자열을 비교하여 동일한 문자를 만드는데 필요한 삭제/삽입/변경 횟수의 최솟값을 통해 유사도 측정</p>\n </li>\n <li>\n <p>direction</p>\n\n <ul>\n <li>\n <p>문자가 일치할 때 대각선으로 동일한 값 (복사)</p>\n </li>\n <li>\n <p>값 변경</p>\n\n <ul>\n <li>\n <p>수정 / 삭제 / 추가 중 최솟값 + 1 적용</p>\n </li>\n <li>\n <p>수정 : 우하향 대각선으로 + 1</p>\n </li>\n <li>\n <p>삭제 : 아래 방향으로 + 1</p>\n </li>\n <li>\n <p>추가 : 오른쪽 방향으로 + 1</p>\n </li>\n </ul>\n </li>\n </ul>\n </li>\n <li>\n <p>첫번째 문자부터 비교해야되기 때문에, 두 문자 앞에 ‘0’ 추가하여 2차원 행렬 생성</p>\n </li>\n <li>\n <p>2차원 행렬의 마지막 지점(2개의 문자열의 마지막 문자끼리 비교)의 값이 편집에 필요한 최소 변경 횟수</p>\n </li>\n <li>\n <p>lcs에서는 첫번째 행/열의 값을 0으로 했으나, edit distance에서는 index를 default로 잡는다</p>\n\n <ul>\n <li>0을 기준으로 length만큼 편집이 필요하다는 의미</li>\n </ul>\n </li>\n</ul>\n\n<table>\n <thead>\n <tr>\n <th>0</th>\n <th>0</th>\n <th>a</th>\n <th>c</th>\n <th>d</th>\n <th>e</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>0</td>\n <td>0</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n </tr>\n <tr>\n <td>b</td>\n <td>1</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n </tr>\n <tr>\n <td>c</td>\n <td>2</td>\n <td>2</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n </tr>\n <tr>\n <td>d</td>\n <td>3</td>\n <td>3</td>\n <td>2</td>\n <td>1</td>\n <td><strong>2</strong></td>\n </tr>\n </tbody>\n</table>\n\n<p><strong>점화식</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">s2</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"k\">else</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">],</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n</code></pre>  </div></div>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">editDist</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">str1</span> <span class=\"o\">=</span> <span class=\"sc\">'0'</span> <span class=\"o\">+</span> <span class=\"n\">str1</span><span class=\"p\">;</span> <span class=\"n\">str2</span> <span class=\"o\">=</span> <span class=\"s\">\"0\"</span> <span class=\"o\">+</span> <span class=\"n\">str2</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">str1</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">str2</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">str2</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"n\">str1</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">){</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">str2</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">str1</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n            <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">str2</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">str1</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/DP/","name":"Edit_Distance.md","path":"Algorithm/DP/Edit_Distance.md","url":"/Algorithm/DP/Edit_Distance.html"},{"sort":5,"layout":"default","title":"Dynamo","content":"<h1 id=\"dynamo\">Dynamo</h1>\n\n","dir":"/Computer_Science/Database/NOSQL/","name":"Dynamo.md","path":"Computer_Science/Database/NOSQL/Dynamo.md","url":"/Computer_Science/Database/NOSQL/Dynamo.html"},{"sort":5,"layout":"default","title":"Eulerian Path","content":"<h1 id=\"eulerian-path\">Eulerian Path</h1>\n\n<ul>\n <li>in the direct/ non-direct graph, visit all edges exactly one time is eulerian path.</li>\n <li>\n <p>if start-node and end-node is same, it’s a eulerian circuit</p>\n </li>\n <li>If there is another edge while going through all nodes, the node is replaced with the set of connected nodes found by (dfs) recursively.</li>\n <li>write nodes that can no longer be visited through recursion, euler path can be created.</li>\n</ul>\n\n<p><strong>non-diredct graph</strong></p>\n\n<ul>\n <li>Eulerian path : have 2 odd degree nodes</li>\n <li>Eulerian circuit : Not have odd degree nodes</li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">max_Ver</span> <span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">;</span>\n\n<span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"n\">max_Ver</span><span class=\"p\">];</span>\n<span class=\"kt\">bool</span> <span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"n\">max_Ver</span><span class=\"p\">];</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">dfs</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">){</span>\n    <span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">].</span><span class=\"n\">begin</span><span class=\"p\">();</span> <span class=\"n\">p</span> <span class=\"o\">!=</span> <span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">].</span><span class=\"n\">end</span><span class=\"p\">();</span> <span class=\"n\">p</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">])</span> <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// check if all node of graph is connected using by dfs</span>\n<span class=\"kt\">bool</span> <span class=\"nf\">isconnected</span><span class=\"p\">(){</span> \n    <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">visited</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">visited</span><span class=\"p\">));</span>\n    \n\n    <span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">idx</span> <span class=\"o\">&lt;</span> <span class=\"n\">max_Ver</span><span class=\"p\">;</span><span class=\"n\">idx</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// no-edge graph</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">idx</span> <span class=\"o\">==</span> <span class=\"n\">max_Ver</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span> <span class=\"c1\">// ?? if max_Ver == 1 : true</span>\n\n    <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">);</span> <span class=\"c1\">// start node</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">max_Ver</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>  <span class=\"c1\">// if node exists but not visited</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">odd_node</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">isconnected</span><span class=\"p\">())</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"c1\">// count odd degree</span>\n    <span class=\"kt\">int</span> <span class=\"n\">odd</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span> <span class=\"n\">max_Ver</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"n\">odd</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">odd</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">odd</span><span class=\"p\">;</span> <span class=\"c1\">// 2 or 0</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">string</span> <span class=\"nf\">check_eulerian</span><span class=\"p\">(){</span>\n    <span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">odd_node</span><span class=\"p\">();</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">res</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"s\">\"euler path\"</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">res</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"s\">\"euler circuit\"</span><span class=\"p\">;</span>\n    <span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"s\">\"not eulerian\"</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">init</span><span class=\"p\">(){</span>\n    <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">visited</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">visited</span><span class=\"p\">));</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">check_eulerian</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(){</span>\n\n<span class=\"cm\">/*    adj[0].push_back(1);\n    adj[1].push_back(0);\n    adj[0].push_back(2);\n    adj[2].push_back(0);\n    adj[1].push_back(2);\n    adj[2].push_back(1);*/</span>\n    <span class=\"n\">init</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p><strong>Direct graph</strong></p>\n\n<ul>\n <li>Eulerian path : there’s 2 node that one with 1 small indegree(start), and one with 1 small outdegree(end)</li>\n <li>Eulerian circuit : all node’s indegree and outdegree are same</li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">max_Ver</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n\n<span class=\"kt\">bool</span> <span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"n\">max_Ver</span><span class=\"p\">];</span>\n<span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"n\">max_Ver</span><span class=\"p\">];</span>\n\n\n<span class=\"kt\">void</span> <span class=\"nf\">create_rev_adj</span><span class=\"p\">(){</span>  \n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">rev</span><span class=\"p\">[</span><span class=\"n\">max_Ver</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">max_Ver</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">();</span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">){</span>\n            <span class=\"n\">rev</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">clear</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">max_Ver</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"n\">rev</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">();</span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">){</span>\n            <span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">rev</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">dfs</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"kt\">bool</span> <span class=\"n\">visited</span><span class=\"p\">[])</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">].</span><span class=\"n\">begin</span><span class=\"p\">();</span> <span class=\"n\">s</span> <span class=\"o\">!=</span> <span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">].</span><span class=\"n\">end</span><span class=\"p\">();</span> <span class=\"n\">s</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"o\">*</span><span class=\"n\">s</span><span class=\"p\">])</span> <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"n\">visited</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">bool</span> <span class=\"nf\">is_connected</span><span class=\"p\">(){</span>\n    <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">visited</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">visited</span><span class=\"p\">));</span>\n    <span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">idx</span> <span class=\"o\">&lt;</span> <span class=\"n\">max_Ver</span><span class=\"p\">;</span> <span class=\"n\">idx</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\">// first vertex is idx</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">,</span><span class=\"n\">visited</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">max_Ver</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">())</span>\n            <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span> <span class=\"c1\">// if node exists but not visited</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// reverse graph</span>\n    <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">visited</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">visited</span><span class=\"p\">));</span>\n    <span class=\"n\">create_rev_adj</span><span class=\"p\">();</span>\n    <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">,</span><span class=\"n\">visited</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">max_Ver</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">visited</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">size</span><span class=\"p\">())</span>\n            <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span> <span class=\"c1\">// if node exists but not visited</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> \n\n<span class=\"kt\">int</span> <span class=\"nf\">check_eulerian</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">is_connected</span><span class=\"p\">())</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">inward</span><span class=\"p\">(</span><span class=\"n\">max_Ver</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">outward</span><span class=\"p\">(</span><span class=\"n\">max_Ver</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">max_Ver</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">max_Ver</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">])</span>\n            <span class=\"p\">{</span>\n                <span class=\"n\">inward</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span><span class=\"o\">++</span><span class=\"p\">;</span> \n                <span class=\"n\">outward</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">path_in</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">path_out</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n\n    <span class=\"kt\">bool</span> <span class=\"n\">chk_path</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">chk_cycle</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">max_Ver</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">inward</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">outward</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n            <span class=\"n\">chk_cycle</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">inward</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mi\">1</span> <span class=\"o\">==</span> <span class=\"n\">outward</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">path_in</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">chk_path</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span> <span class=\"k\">break</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n                <span class=\"n\">path_in</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">inward</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">outward</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">){</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">path_out</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">chk_path</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span> <span class=\"k\">break</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n                <span class=\"n\">path_out</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">chk_cycle</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">chk_path</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">path_in</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">path_out</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">init</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">check_eulerian</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"Eulerian Cycle\"</span><span class=\"p\">);</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">check_eulerian</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"Eulerian Path\"</span><span class=\"p\">);</span>\n    <span class=\"k\">else</span> <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"Not Eulerian\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">init</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Graph/","name":"Eulerian_Path.md","path":"Algorithm/Graph/Eulerian_Path.md","url":"/Algorithm/Graph/Eulerian_Path.html"},{"sort":5,"layout":"default","title":"Mediator","content":"<h1 id=\"mediator\">Mediator</h1>\n\n","dir":"/Study/Design_Pattern/Behavioral/","name":"Mediator.md","path":"Study/Design_Pattern/Behavioral/Mediator.md","url":"/Study/Design_Pattern/Behavioral/Mediator.html"},{"sort":5,"layout":"default","title":"KMP","content":"<h1 id=\"kmp\">KMP</h1>\n\n<ul>\n <li>\n <p>KMP(Knuth-Morris-Prett) 알고리즘은 접두사와 접미사를 사용하여 구현됨</p>\n </li>\n <li>\n <p>실패함수 (fail function)</p>\n\n <ul>\n <li>\n <p>문자열 매칭이 실패했을 때 특정 구간만큼 건너뛰어서 매칭을 최소화하기 위해 사용</p>\n </li>\n <li>\n <p>접두사와 접미사의 공통 최대 길이를 의미</p>\n </li>\n <li>\n <p>아래 테이블은 <code class=\"language-plaintext highlighter-rouge\">ababacabababbb</code> 의 실패함수</p>\n\n <table>\n <thead>\n <tr>\n <th>index</th>\n <th>0</th>\n <th>1</th>\n <th>2</th>\n <th>3</th>\n <th>4</th>\n <th>5</th>\n <th>6</th>\n <th>7</th>\n <th>8</th>\n <th>9</th>\n <th>10</th>\n <th>11</th>\n <th>12</th>\n <th>13</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>pattern</td>\n <td>a</td>\n <td>b</td>\n <td>a</td>\n <td>b</td>\n <td>a</td>\n <td>c</td>\n <td>a</td>\n <td>b</td>\n <td>a</td>\n <td>b</td>\n <td>a</td>\n <td>b</td>\n <td>b</td>\n <td>b</td>\n </tr>\n <tr>\n <td>j</td>\n <td>0</td>\n <td>0</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>f[3-1]-&gt;f[1-1] =0</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n <td>5</td>\n <td>f[5-1] + 1</td>\n <td>f[4-1]-&gt;f[2-1]=0</td>\n <td>0</td>\n </tr>\n <tr>\n <td>f[i]</td>\n <td>0</td>\n <td>0</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>1-&gt;0</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n <td>5</td>\n <td>3+1</td>\n <td>2-&gt;0</td>\n <td>0</td>\n </tr>\n </tbody>\n </table>\n </li>\n <li>\n <p>pattern[index]와 pattern[j]가 다른 경우, 같거나 0이 될 때까지 이전 fail 함수 값으로 이동</p>\n </li>\n <li>\n <p>pattern[index]와 pattern[j]가 같은 경우, j에 1을 더하고 p[index]에도 1을 더함</p>\n </li>\n <li><code class=\"language-plaintext highlighter-rouge\">str[index]와 str[j]</code> 가 매칭이 안 되었을 때는 매칭이 안 될때까지 <code class=\"language-plaintext highlighter-rouge\">j = f[j-1]</code> 반복\n <ul>\n <li>매칭이 되었을 때 j++</li>\n </ul>\n </li>\n <li>시간 복잡도는 pattern의 길이인 O(M)을 소모하는 것을 확인할 수 있음</li>\n </ul>\n\n <div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">fail_function</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">j</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>  </div> </div>\n </li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>문자열 찾기</strong></p>\n\n<ul>\n <li>\n <p>하나의 예로 <code class=\"language-plaintext highlighter-rouge\">abab ababdabababa </code> 내에서 <code class=\"language-plaintext highlighter-rouge\">ababa</code> 를 찾는 경우</p>\n\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">ababa</code> 의 실패함수 생성</li>\n <li><code class=\"language-plaintext highlighter-rouge\">ababa</code> 의 실패함수 p = [0,0,1,2,3]</li>\n <li>정상적으로 매칭되었을 때 res = ++j</li>\n <li>res의 값이 pat의 길이와 일치할 때 매칭</li>\n <li>start index를 계산하기 위해서는 pattern의 길이-1만큼 빼준다</li>\n </ul>\n\n <p><br /></p>\n\n <ul>\n <li>인덱스 4까지 정상 매칭되었으나 5번째 인덱스에서 fail</li>\n <li>j=4에서 시작해서 j = f[4-1] = f[3] = 2\n <ul>\n <li>공백과 a 는 mismatching</li>\n </ul>\n </li>\n <li>j=2에서 시작해서 j = f[2-1] = f[1] = 0\n <ul>\n <li>공백과 a는 mismatching</li>\n </ul>\n </li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th>str</th>\n <th>a</th>\n <th>b</th>\n <th>a</th>\n <th>b</th>\n <th> </th>\n <th>a</th>\n <th>b</th>\n <th>a</th>\n <th>b</th>\n <th>d</th>\n <th>a</th>\n <th>b</th>\n <th>a</th>\n <th>b</th>\n <th>a</th>\n <th>b</th>\n <th>a</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>pat</td>\n <td>a</td>\n <td>b</td>\n <td>a</td>\n <td>b</td>\n <td><strong>a</strong></td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>i</td>\n <td>0</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n <td>5</td>\n <td>6</td>\n <td>7</td>\n <td>8</td>\n <td>9</td>\n <td>10</td>\n <td>11</td>\n <td>12</td>\n <td>13</td>\n <td>14</td>\n <td>15</td>\n <td>16</td>\n </tr>\n <tr>\n <td>j</td>\n <td>0</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4-&gt;2-&gt;0</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>res</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n <td>0</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n </tbody>\n </table>\n\n <ul>\n <li>인덱스 8까지 정상 매칭되었으나 9번째 인덱스에서 fail\n <ul>\n <li>j =4에서 시작해서 j = f[4-1] = f[3] = 2\n <ul>\n <li>공백과 a 는 mismatching</li>\n </ul>\n </li>\n <li>j =2에서 시작해서 j = f[2-1] = f[1] = 0\n <ul>\n <li>공백과 a 는 mismatching</li>\n </ul>\n </li>\n </ul>\n </li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th>str</th>\n <th>a</th>\n <th>b</th>\n <th>a</th>\n <th>b</th>\n <th> </th>\n <th>a</th>\n <th>b</th>\n <th>a</th>\n <th>b</th>\n <th>d</th>\n <th>a</th>\n <th>b</th>\n <th>a</th>\n <th>b</th>\n <th>a</th>\n <th>b</th>\n <th>a</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>pat</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td>a</td>\n <td>b</td>\n <td>a</td>\n <td>b</td>\n <td><strong>a</strong></td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>i</td>\n <td>0</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n <td>5</td>\n <td>6</td>\n <td>7</td>\n <td>8</td>\n <td>9</td>\n <td>10</td>\n <td>11</td>\n <td>12</td>\n <td>13</td>\n <td>14</td>\n <td>15</td>\n <td>16</td>\n </tr>\n <tr>\n <td>j</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td>0</td>\n <td>0</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4-&gt;2-&gt;0</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>res</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n <td>0</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n <td>0</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n </tbody>\n </table>\n\n <ul>\n <li>인덱스 14까지 정상 매칭\n <ul>\n <li>pattern의 길이 값이 res에 나왔으므로 매칭 된 index를 찾을 수 있음</li>\n </ul>\n </li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th>str</th>\n <th>a</th>\n <th>b</th>\n <th>a</th>\n <th>b</th>\n <th> </th>\n <th>a</th>\n <th>b</th>\n <th>a</th>\n <th>b</th>\n <th>d</th>\n <th>a</th>\n <th>b</th>\n <th>a</th>\n <th>b</th>\n <th>a</th>\n <th>b</th>\n <th>a</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>pat</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td>a</td>\n <td>b</td>\n <td>a</td>\n <td>b</td>\n <td>a</td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>i</td>\n <td>0</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n <td>5</td>\n <td>6</td>\n <td>7</td>\n <td>8</td>\n <td>9</td>\n <td>10</td>\n <td>11</td>\n <td>12</td>\n <td>13</td>\n <td>14</td>\n <td>15</td>\n <td>16</td>\n </tr>\n <tr>\n <td>j</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td>0</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>res</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n <td>0</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n <td>0</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n <td>5</td>\n <td> </td>\n <td> </td>\n </tr>\n </tbody>\n </table>\n\n <ul>\n <li>15번째 인덱스에서 pattern이 길이를 초과하기 때문에 매칭이 안 되므로 fail\n <ul>\n <li>j=5에서 시작해서 j = f[5-1] = f[4] = 3\n <ul>\n <li>j = 3에서 pat[j] = ‘b’ 이므로 str과 매칭됨</li>\n </ul>\n </li>\n </ul>\n </li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th>str</th>\n <th>a</th>\n <th>b</th>\n <th>a</th>\n <th>b</th>\n <th> </th>\n <th>a</th>\n <th>b</th>\n <th>a</th>\n <th>b</th>\n <th>d</th>\n <th>a</th>\n <th>b</th>\n <th>a</th>\n <th>b</th>\n <th>a</th>\n <th>b</th>\n <th>a</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>pat</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>i</td>\n <td>0</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n <td>5</td>\n <td>6</td>\n <td>7</td>\n <td>8</td>\n <td>9</td>\n <td>10</td>\n <td>11</td>\n <td>12</td>\n <td>13</td>\n <td>14</td>\n <td>15</td>\n <td>16</td>\n </tr>\n <tr>\n <td>j</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td>0</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n <td>5-&gt;3</td>\n <td>4</td>\n </tr>\n <tr>\n <td>res</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n <td>0</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n <td>5</td>\n <td>4</td>\n <td>5</td>\n </tr>\n </tbody>\n </table>\n </li>\n <li>\n <p>KMP는 O(N)로 동작하는 것을 확인할 수 있음</p>\n </li>\n <li>\n <p>따라서 실패함수와 KMP를 구현했을 때 시간 복잡도는 O(N+M)</p>\n </li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">fail_function</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">pat</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">pat</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">pat</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">pat</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pat</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">pat</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">j</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">kmp</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">str</span><span class=\"p\">,</span> <span class=\"n\">string</span> <span class=\"n\">pat</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">f</span> <span class=\"o\">=</span><span class=\"n\">fail_function</span><span class=\"p\">(</span><span class=\"n\">pat</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>    \n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">pat</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">pat</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"o\">++</span><span class=\"n\">j</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"n\">it</span> <span class=\"o\">:</span> <span class=\"n\">res</span><span class=\"p\">)</span> <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">it</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span><span class=\"p\">;</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/String/","name":"KMP.md","path":"Algorithm/String/KMP.md","url":"/Algorithm/String/KMP.html"},{"sort":5,"layout":"default","title":"Singleton","content":"<h1 id=\"singleton\">Singleton</h1>\n\n","dir":"/Study/Design_Pattern/Creational/","name":"Singleton.md","path":"Study/Design_Pattern/Creational/Singleton.md","url":"/Study/Design_Pattern/Creational/Singleton.html"},{"sort":5,"layout":"default","title":"Facade","content":"<h1 id=\"facade\">Facade</h1>\n\n","dir":"/Study/Design_Pattern/Structural/","name":"Facade.md","path":"Study/Design_Pattern/Structural/Facade.md","url":"/Study/Design_Pattern/Structural/Facade.html"},{"sort":5,"layout":"default","title":"Heap Sort","content":"<h1 id=\"heap-sort\">Heap Sort</h1>\n\n<ul>\n <li>It implements the max heap and min heap and continuously updates the maximum or minimum.</li>\n <li>Sorted array can be obtained by subtracting one by one from the heap and inserting, applied by heapify, it into the index.</li>\n <li>Since it is inserted as a tree, the time complexity when inserting one node is O(logN). When Inserted N data, the total time complexity is O(NlogN).</li>\n <li>Inserting is O(NlogN) and deleteing is O(NlogN) -&gt; O(NlongN) + O(NlogN) = O(NlogN)</li>\n <li>Inserting is down to top / deleteing is top to down</li>\n <li>\n <p>So, When continuously updated (inserting) node, this process should be applied.</p>\n </li>\n <li>using heapify(continuously maintain heap) instead of inserting</li>\n <li>start from parents of leaf node (n/2) to root node, applying build heap(heapify)</li>\n <li>time complexity is O(N)\n <ul>\n <li>edge counting to leaf node * counting of node</li>\n <li>leaf node counting is n/2, and edge counting to leaf node is 0</li>\n <li>parents : n /4 , 1</li>\n <li>parents : n/8, 2</li>\n <li>parents : n/16, 3</li>\n <li>…</li>\n <li>summary = 0 * (n/2) + 1 * (n/4) + 2* (n/8) + … = N* (1/4 + 2/8 + 3/16 + 4/32 + 5/64 …) ~= O(N)</li>\n </ul>\n </li>\n <li>\n <p>At the start point, node is setting and not updated, using upper process.</p>\n </li>\n <li>So, heap sort is applied by heapify, time complexity is O(N) + O(NlogN) = O(NlogN)</li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">cmp</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">){</span>\n\t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">b</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">heapify</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">heap_size</span><span class=\"p\">){</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">idx</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">idx</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">idx</span> <span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">left</span> <span class=\"o\">&lt;</span> <span class=\"n\">heap_size</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">tmp</span><span class=\"p\">])</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"p\">;</span>  <span class=\"c1\">// max heap</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">right</span> <span class=\"o\">&lt;</span> <span class=\"n\">heap_size</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">right</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">tmp</span><span class=\"p\">])</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">right</span><span class=\"p\">;</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">tmp</span> <span class=\"o\">!=</span> <span class=\"n\">idx</span><span class=\"p\">)</span> <span class=\"c1\">// if changed</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">tmp</span><span class=\"p\">],</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]);</span>\n\t\t<span class=\"n\">heapify</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span><span class=\"n\">tmp</span><span class=\"p\">,</span> <span class=\"n\">heap_size</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// down to up</span>\n<span class=\"kt\">void</span> <span class=\"nf\">insert_node</span> <span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">heap_size</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">heap_size</span><span class=\"p\">;</span> <span class=\"c1\">// insert last node</span>\n\t<span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n\t<span class=\"k\">while</span><span class=\"p\">((</span><span class=\"n\">idx</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">])</span>  <span class=\"c1\">// max heap  /   value compare with parent node</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">],</span><span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">]);</span> <span class=\"c1\">// swap child with parent</span>\n\t\t<span class=\"n\">idx</span> <span class=\"o\">/=</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"c1\">// going parent node position</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// up to down</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">delete_node</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"o\">*</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">heap_size</span><span class=\"p\">){</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n\t<span class=\"n\">h</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">heap_size</span><span class=\"p\">];</span> <span class=\"c1\">// last node to root</span>\n\t<span class=\"n\">heap_size</span><span class=\"o\">--</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">maxnode</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"c1\">// start from root node</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"c1\">// leftchild = child / rightchild = child + 1</span>\n\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">child</span> <span class=\"o\">&lt;=</span> <span class=\"n\">heap_size</span><span class=\"p\">)</span> <span class=\"c1\">// If leftchild is smaller than heapsize </span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">maxnode</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">child</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"n\">maxnode</span> <span class=\"o\">=</span> <span class=\"n\">child</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">;</span>  <span class=\"c1\">// leftchild is bigger than currnet</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">child</span><span class=\"o\">+</span><span class=\"mi\">2</span> <span class=\"o\">&lt;=</span> <span class=\"n\">heap_size</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">maxnode</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">child</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"n\">maxnode</span> <span class=\"o\">=</span> <span class=\"n\">child</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"c1\">// maxnode vs rightchild</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">maxnode</span> <span class=\"o\">==</span> <span class=\"n\">current</span><span class=\"p\">)</span> <span class=\"k\">break</span><span class=\"p\">;</span> <span class=\"c1\">// parent is bigger than childs</span>\n\t\t<span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">maxnode</span><span class=\"p\">],</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">current</span><span class=\"p\">]);</span>\n\t\t<span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">maxnode</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(){</span>\n\t<span class=\"kt\">char</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sc\">'a'</span><span class=\"p\">,</span><span class=\"sc\">'c'</span><span class=\"p\">,</span><span class=\"sc\">'e'</span><span class=\"p\">,</span><span class=\"sc\">'k'</span><span class=\"p\">,</span><span class=\"sc\">'k'</span><span class=\"p\">,</span><span class=\"sc\">'b'</span><span class=\"p\">,</span><span class=\"sc\">'z'</span><span class=\"p\">,</span><span class=\"sc\">'s'</span><span class=\"p\">,</span><span class=\"sc\">'a'</span><span class=\"p\">};</span>\n\t<span class=\"n\">heapsort</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"mi\">9</span> <span class=\"p\">,</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"p\">),</span><span class=\"n\">cmp</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"mi\">9</span> <span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n\t\t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n\t<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">11</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">arr2</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">};</span>\n\t<span class=\"c1\">// building heap</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span> <span class=\"n\">N</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">){</span>  <span class=\"c1\">// start from n/2 ... -&gt; root</span>\n\t\t<span class=\"n\">heapify</span><span class=\"p\">(</span><span class=\"n\">arr2</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">N</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\n\t<span class=\"c1\">// array</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">heap_size</span> <span class=\"o\">=</span> <span class=\"n\">N</span><span class=\"p\">;</span>\n\t<span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">heap_size</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">arr2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">arr2</span><span class=\"p\">[</span><span class=\"o\">--</span><span class=\"n\">heap_size</span><span class=\"p\">]);</span> <span class=\"c1\">// 0 -&gt; last</span>\n\t\t<span class=\"n\">heapify</span><span class=\"p\">(</span><span class=\"n\">arr2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">heap_size</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">arr2</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span><span class=\"p\">;</span>\n\t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n\t<span class=\"kt\">int</span> <span class=\"n\">arr3</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">};</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">heap_size2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">heap</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,};</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">){</span> <span class=\"c1\">// insert </span>\n\t\t<span class=\"n\">insert_node</span><span class=\"p\">(</span><span class=\"n\">heap</span><span class=\"p\">,</span><span class=\"n\">arr3</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span><span class=\"n\">heap_size2</span><span class=\"o\">++</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&gt;=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">){</span>\n\t\t<span class=\"n\">arr3</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">delete_node</span><span class=\"p\">(</span><span class=\"n\">heap</span><span class=\"p\">,</span><span class=\"n\">heap_size2</span><span class=\"p\">);</span> \n\t<span class=\"p\">}</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n\t\t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">arr3</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Sort/","name":"Heap.md","path":"Algorithm/Sort/Heap.md","url":"/Algorithm/Sort/Heap.html"},{"sort":5,"layout":"default","title":"TeamCity","content":"<h1 id=\"teamcity\">TeamCity</h1>\n\n","dir":"/Study/Infrastructure/CICD_Tool/","name":"TeamCity.md","path":"Study/Infrastructure/CICD_Tool/TeamCity.md","url":"/Study/Infrastructure/CICD_Tool/TeamCity.html"},{"sort":5,"layout":"default","title":"Directed Acycle Graph","content":"<h1 id=\"directed-acycle-graph\">Directed Acycle Graph</h1>\n\n<ul>\n <li>방향성이 있고, 사이클이 없는 그래프에서는 bellman-ford와 같이 추가적인 연산 (Loop)이 필요 없다.</li>\n <li>Topological Sort 정리 이후 작성</li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Shortest_Path/","name":"DAG.md","path":"Algorithm/Shortest_Path/DAG.md","url":"/Algorithm/Shortest_Path/DAG.html"},{"sort":5,"layout":"default","title":"Euclidean","content":"<h1 id=\"euclidean\">Euclidean</h1>\n\n<ul>\n <li>유클리드 호제법(Euclidean Algorithm)은 두개의 자연수의 최대 공약수를 빠르게 계산하는 방법</li>\n <li>두 수 A,B의 최대 공약수를 구하는 방법 (\\(A &gt;= B\\))\n <ul>\n <li>A % B = r</li>\n <li>B % r = r1</li>\n <li>r % r1 = r2</li>\n <li>…</li>\n <li>\\(r_k\\) % \\(r_{k+1}\\) = 0 을 만족하는 지점까지 반복했을 때, \\(r_{k+1}\\) 이 A,B의 최대 공약수</li>\n </ul>\n </li>\n <li>최소 공배수는 두 수를 곱하고 최대 공약수로 나누어주면 된다.</li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">gcd</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">%</span> <span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">gcd</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">%</span> <span class=\"n\">b</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">lcm</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">b</span> <span class=\"o\">/</span> <span class=\"n\">gcd</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Math/","name":"Euclidean.md","path":"Algorithm/Math/Euclidean.md","url":"/Algorithm/Math/Euclidean.html"},{"sort":5,"layout":"default","title":"Subnet","content":"<h1 id=\"subnet\">Subnet</h1>\n\n<ul>\n <li>하나의 네트워크를 여러개의 네트워크로 분할하는 것</li>\n <li>클래스로 네트워크를 분할할 때는 옥텟(8비트) 기준으로 분할하기 때문에 비효율적으로 사용하는 경우가 발생하기 때문에 서브넷으로 세부 비트 단위로 분할</li>\n <li>기존의 IP 클래스 주소 구성을 보면 네트워크 주소와 호스트 주소로 나뉘는데, 호스트 주소를 (서브넷 주소 + 호스트 주소)로 세분화됨</li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>서브넷 마스크</strong></p>\n\n<ul>\n <li>\n <p>네트워크 주소나 호스트 주소의 범위를 확인하기 위해 mask를 씌우는 것과 같이 AND 연산을 통해 확인할 때 사용</p>\n </li>\n <li>\n <p>비트가 1 / 0 인 32자리 조합으로 구성되며, 1은 (네트워크 주소+서브넷 주소)의 범위를 나타내고 0은 호스트 주소의 범위를 나타낸다</p>\n </li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>Subneting</strong></p>\n\n<ul>\n <li>서브넷 처리를 하는것으로 네트워크를 나누는 작업\n <ul>\n <li>효율적인 네트워크 관리 (IP 낭비 방지)</li>\n <li>브로드캐스팅 범위를 줄여줌 (서브넷에 해당하는 네트워크 범위만 브로드캐스팅)</li>\n <li>네트워크가 분할됨으로써 보안성이 증가</li>\n </ul>\n </li>\n <li>\n <p>브로드 캐스트 주소는 네트워크 주소에서 subnet mask의 0인 부분을 1로 변환한 값</p>\n </li>\n <li>예로 112.113.114.115의 /20bit 서브넷 마스크를 계산할 경우, 11111111 11111111 11000000 00000000 와 같이 앞에서부터 bit수만큼 1로 채우면 됨 (255.255.192.0)</li>\n</ul>\n\n<table>\n <thead>\n <tr>\n <th>IP</th>\n <th>112</th>\n <th>113</th>\n <th>114(01100010)</th>\n <th>00000000</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>SubnetMask</td>\n <td>11111111</td>\n <td>11111111</td>\n <td>11000000</td>\n <td>00000000</td>\n </tr>\n <tr>\n <td>AND</td>\n <td>112</td>\n <td>113</td>\n <td>64(01000000)</td>\n <td>0</td>\n </tr>\n <tr>\n <td>BroadCast</td>\n <td>112</td>\n <td>113</td>\n <td>127(01111111)</td>\n <td>255(11111111)</td>\n </tr>\n </tbody>\n</table>\n\n<ul>\n <li>네트워크 주소는 112.113.64.0</li>\n <li>브로드 캐스트 주소는 112.113.127.255</li>\n</ul>\n\n<p><br /></p>\n\n<ul>\n <li>\n <p>IP 클래스를 보면 A클래스(/8), B클래스(/16), C클래스(/24)로 나뉘는데</p>\n\n <ul>\n <li>\n <p>ex) 112.113.114.115라는 C클래스에 네트워크 분할을 적용할 시 호스트 주소는 8비트이므로, n값에 24보다 큰 값이 들어갈 수 있음</p>\n\n <ul>\n <li>n이 26인 경우, 서브넷 주소 (2bit) 와 호스트주소 (6bit)를 가짐으로써, 4개의 서브넷이 존재하고, 각 서브넷 당 (64-2)개의 주소를 가질 수 있다.\n <ul>\n <li>C클래스의 서브넷 비트가 2개인 경우와 동일한 표현</li>\n </ul>\n </li>\n <li>C클래스의 값이므로 마지막 8비트의 주소에서 차이가 있는데, 8비트 중 앞 2개의 비트에 따라 서브넷을 나눈다.\n <ul>\n <li>(00~) / (01~) / (10~) / (11~)</li>\n </ul>\n </li>\n <li>그러므로 4개의 호스트 주소는\n <ul>\n <li>112.113.114.0 ~ 112.113.114.63 (0000000 ~ 00111111)</li>\n <li>112.113.114.64 ~ 112.113.114.127 (0000000 ~ 00111111)</li>\n <li>112.113.114.128 ~ 112.113.114.191 (0000000 ~ 00111111)</li>\n <li>112.113.114.192 ~ 112.113.114.255 (0000000 ~ 00111111)</li>\n </ul>\n </li>\n <li>위와 같이 4개의 서브넷으로 나누어지고, 각 서브넷의 첫번째 주소는 네트워크 주소, 마지막 주소는 브로드캐스트 주소이므로 사용할 수 있는 호스트 주소의 갯수는 64-2개</li>\n </ul>\n </li>\n </ul>\n </li>\n</ul>\n","dir":"/Computer_Science/Network/","name":"Subnet.md","path":"Computer_Science/Network/Subnet.md","url":"/Computer_Science/Network/Subnet.html"},{"sort":6,"layout":"default","title":"Indexing","content":"<h1 id=\"indexing\">Indexing</h1>\n\n<ul>\n <li>asd</li>\n</ul>\n","dir":"/Computer_Science/Database/","name":"Indexing.md","path":"Computer_Science/Database/Indexing.md","url":"/Computer_Science/Database/Indexing.html"},{"sort":6,"layout":"default","title":"Minimum Cut","content":"<h1 id=\"minimum-cut\">Minimum Cut</h1>\n\n","dir":"/Algorithm/Graph/","name":"Minimum_Cut.md","path":"Algorithm/Graph/Minimum_Cut.md","url":"/Algorithm/Graph/Minimum_Cut.html"},{"sort":6,"layout":"default","title":"Matrix Chain Multiplication","content":"<h1 id=\"matrix-chain-multiplication\">Matrix Chain Multiplication</h1>\n\n<ul>\n <li>행렬의 곱을 계산할 때, 최소의 곳셈 횟수를 계산하는 DP</li>\n <li>A, B, C 라는 3개의 행렬이 존재하고, A =<code class=\"language-plaintext highlighter-rouge\">a*b</code>, B = <code class=\"language-plaintext highlighter-rouge\">b*c</code>, C = <code class=\"language-plaintext highlighter-rouge\">c*d</code> 를 성립할 때, 행렬의 곱은 결합 법칙을 만족하기 때문에 순서와 관계없이 최종적으로 동일한 값을 보인다.\n <ul>\n <li>(AB)C = A(BC)</li>\n <li>(AB)C의 연산 횟수 : abc + acd = ac(b+d)</li>\n <li>A(BC)의 연산 횟수 : abd + bcd = bd(a+c)</li>\n </ul>\n </li>\n <li>결합 법칙에 의해 동일한 값을 나타내지만 횟수의 차이가 있다.</li>\n <li>\n <p>참고로, n차 정사각행렬 거듭제곱인 \\(N^k\\) 의 덧셈 연산 횟수는 \\((k-1)*n^3\\) 이다.</p>\n </li>\n <li>\n <p>Matrix Chain Mulmiplication은 2차원 DP로 계산하며, <code class=\"language-plaintext highlighter-rouge\">DP[X][Y]</code> 는 행렬X부터 행렬Y까지의 최소 비용을 나타낸다</p>\n\n <ul>\n <li>\n <p>따라서 <code class=\"language-plaintext highlighter-rouge\">DP[i][i]</code> 는 0으로 표현되고, 최종적으로 <code class=\"language-plaintext highlighter-rouge\">DP[1][n]</code> 을 계산해야 된다.</p>\n </li>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">dp[1][n] = dp[1][k] + dp[k][n]</code> 와 같이 구간을 나누어 계산할 수 있다.</p>\n\n <ul>\n <li>\n <p>Divide &amp; Conquer로 n개의 행렬을 재귀적으로 2개의 행렬곱으로 나눈다</p>\n </li>\n <li>\n <p>n개의 행렬을 결합 법칙에 의해 2개의 행렬곱으로 나누는 횟수는 총 n-1개이다</p>\n\n <ul>\n <li>A B C D 4개의 행렬인 경우\n <ul>\n <li>A(BCD)</li>\n <li>(AB)(CD)</li>\n <li>(ABC)D</li>\n </ul>\n </li>\n </ul>\n </li>\n <li>\n <p>분할의 곳셈 횟수</p>\n\n <ul>\n <li>(AB)(CD) 인 경우\n <ul>\n <li>(AB) 의 곳셈횟수 + (CD)의 곳셈횟수 + 두 행렬의 곳셈횟수</li>\n <li>두 행렬의 곳셈 횟수\n <ul>\n <li>\\(d_0\\) : <code class=\"language-plaintext highlighter-rouge\">dp[1][2]</code> 의 <strong>행</strong>의 갯수</li>\n <li>\\(d_4\\) : <code class=\"language-plaintext highlighter-rouge\">dp[3][4]</code> 의 <strong>열</strong>의 갯수</li>\n <li>\\(d_2\\) : <code class=\"language-plaintext highlighter-rouge\">dp[1][2]</code> 의 <strong>열</strong>의 갯수 = <code class=\"language-plaintext highlighter-rouge\">dp[3][4]</code> 의 <strong>행</strong>의 갯수</li>\n <li>두 행렬의 곱 : \\(d_0d_2d_4\\)</li>\n </ul>\n </li>\n <li><code class=\"language-plaintext highlighter-rouge\">dp[1][2] + dp[3][4]</code> + \\(d_0d_2d_4\\)</li>\n </ul>\n </li>\n <li>\n <p>점화식</p>\n\n <div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">j</span><span class=\"p\">)</span>\n\t<span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span>  <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">&lt;=</span><span class=\"n\">k</span><span class=\"o\">&lt;=</span><span class=\"n\">j</span><span class=\"p\">)</span>\n</code></pre>  </div> </div>\n </li>\n </ul>\n </li>\n </ul>\n </li>\n </ul>\n </li>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">dp[1][4]</code> 인 경우</p>\n\n <ul>\n <li>\n <p><code class=\"language-plaintext highlighter-rouge\">dp[1][4]</code> = min(<code class=\"language-plaintext highlighter-rouge\">dp[1][1]</code> + <code class=\"language-plaintext highlighter-rouge\">dp[2][4]</code> + \\(d_0d_1d_4\\),</p>\n\n <p>​\t\t\t\t\t\t\t <code class=\"language-plaintext highlighter-rouge\">dp[1][2]</code> +<code class=\"language-plaintext highlighter-rouge\">dp[3][4]</code> + \\(d_0d_2d_4\\) ,</p>\n\n <p>​\t\t\t\t\t\t\t\t<code class=\"language-plaintext highlighter-rouge\">dp[1][3]</code> + <code class=\"language-plaintext highlighter-rouge\">dp[4][4]</code> + \\(d_0d_3d_4\\))</p>\n </li>\n </ul>\n </li>\n <li>처음에 대각선 <code class=\"language-plaintext highlighter-rouge\">dp[i][i] = 0</code> 을 반영</li>\n</ul>\n\n<table>\n <thead>\n <tr>\n <th> </th>\n <th>1</th>\n <th>2</th>\n <th>3</th>\n <th>4</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>1</td>\n <td>0</td>\n <td>x</td>\n <td>x</td>\n <td> </td>\n </tr>\n <tr>\n <td>2</td>\n <td> </td>\n <td>0</td>\n <td> </td>\n <td>x</td>\n </tr>\n <tr>\n <td>3</td>\n <td> </td>\n <td> </td>\n <td>0</td>\n <td>x</td>\n </tr>\n <tr>\n <td>4</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td>0</td>\n </tr>\n </tbody>\n</table>\n\n<ul>\n <li>대각선 (Diagnal)을 기준으로 상향식으로 접근한다.</li>\n <li>위 표에서 x로 되어 있는 값이 필요함\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">dp[1][2]</code> = <code class=\"language-plaintext highlighter-rouge\">dp[1][1] </code> + <code class=\"language-plaintext highlighter-rouge\">dp[2][2]</code> + \\(d_0d_1d_2\\)</li>\n <li><code class=\"language-plaintext highlighter-rouge\">dp[1][3]</code> 은 \\(k=1\\) 인 경우와 \\(k=2\\) 인 경우 2가지의 최솟값을 계산해야되는데, <code class=\"language-plaintext highlighter-rouge\">dp[1][2]</code> or <code class=\"language-plaintext highlighter-rouge\">dp[2][3]</code> 의 값이 필요함\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">dp[2][4]</code> 도 마찬가지</li>\n </ul>\n </li>\n <li><code class=\"language-plaintext highlighter-rouge\">dp[3][4]</code> = <code class=\"language-plaintext highlighter-rouge\">dp[3][3]</code> + <code class=\"language-plaintext highlighter-rouge\">dp[4][4] </code> + \\(d_2d_3d_4\\)</li>\n </ul>\n </li>\n <li>위 예시를 통해 확인할 수 있는 것은 새로 추가되는 값은 이미 값이 채워진 인접한 cell에서 우/상향으로 계산됨 (상향식)</li>\n</ul>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ll</span> <span class=\"nf\">MCM</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">){</span>\n    <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">));</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;=</span><span class=\"n\">n</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&gt;=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">){</span> <span class=\"c1\">// from n-1 rows</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"p\">;</span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">){</span> <span class=\"c1\">// diagnal</span>\n            <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">INF</span><span class=\"p\">;</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">;</span><span class=\"n\">k</span><span class=\"o\">&lt;=</span><span class=\"n\">j</span><span class=\"p\">;</span><span class=\"n\">k</span><span class=\"o\">++</span><span class=\"p\">){</span>\n                <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">first</span><span class=\"o\">*</span><span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">].</span><span class=\"n\">second</span><span class=\"o\">*</span><span class=\"n\">vc</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">second</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/DP/","name":"Matrix_Chain_Multiplication.md","path":"Algorithm/DP/Matrix_Chain_Multiplication.md","url":"/Algorithm/DP/Matrix_Chain_Multiplication.html"},{"sort":6,"layout":"default","title":"Assembler","content":"<h1 id=\"assembler\">Assembler</h1>\n\n<h3 id=\"assembler-1\">Assembler</h3>\n\n","dir":"/Computer_Science/OS/","name":"Assembler.md","path":"Computer_Science/OS/Assembler.md","url":"/Computer_Science/OS/Assembler.html"},{"sort":6,"layout":"default","title":"Sudoku","content":"<h1 id=\"sudoku\">Sudoku</h1>\n\n<ul>\n <li>\\(9X9\\) 행렬에서 아래 그림과 같이 모든 행/열/\\(3X3\\) 행렬에서 중복된 숫자가 발생하지 않는 행렬</li>\n <li>중간에 값이 없는 0으로 된 행렬에 적절한 값 (1~9)을 넣어 Sudoku 행렬을 만드는 문제</li>\n <li>처음에 check 행렬을 만들어서 각 행/열/부분행렬에 있는 숫자와 없는 숫자를 체크\n <ul>\n <li>1차원은 위치를 나타내고, 2차원은 숫자를 나타내는 식으로 구현</li>\n <li>부분 행렬의 경우 <code class=\"language-plaintext highlighter-rouge\">3*(i/3)+(j/3)</code>을 적용하면 0에서 8까지 부분 행렬의 위치를 나타낼 수 있음</li>\n </ul>\n </li>\n <li>back tracking으로 \\(9X9\\)행렬의 첫번째 index부터 마지막 index(80)까지 돌면서 적절한 값 대입</li>\n <li>81번째 index에 도달하면 출력</li>\n</ul>\n\n<p><img src=\"/Algorithm/Math/Img/Sudoku.png\" alt=\"Sudoku\" /></p>\n\n<div style=\"text-align: right\"> Image ref : https://ko.wikipedia.org/wiki/%EC%8A%A4%EB%8F%84%EC%BF%A0</div>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">][</span><span class=\"mi\">10</span><span class=\"p\">];</span>\n<span class=\"kt\">bool</span> <span class=\"n\">chk_row</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">][</span><span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"n\">chk_col</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">][</span><span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"n\">chk_sqr</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">][</span><span class=\"mi\">10</span><span class=\"p\">];</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">dfs</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">){</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">idx</span> <span class=\"o\">==</span> <span class=\"mi\">81</span><span class=\"p\">){</span> <span class=\"c1\">// res</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">9</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"mi\">9</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n                <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" \"</span><span class=\"p\">;</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n      \t<span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">int</span> <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">idx</span><span class=\"o\">/</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">col</span> <span class=\"o\">=</span> <span class=\"n\">idx</span><span class=\"o\">%</span><span class=\"mi\">9</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">][</span><span class=\"n\">col</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">){</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;=</span><span class=\"mi\">9</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span> <span class=\"c1\">// value</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">chk_col</span><span class=\"p\">[</span><span class=\"n\">col</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">chk_row</span><span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">chk_sqr</span><span class=\"p\">[</span><span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">row</span> <span class=\"o\">/</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">col</span> <span class=\"o\">/</span> <span class=\"mi\">3</span><span class=\"p\">)][</span><span class=\"n\">i</span><span class=\"p\">])</span>\n            <span class=\"p\">{</span>\n                <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">][</span><span class=\"n\">col</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n              \t<span class=\"n\">chk_col</span><span class=\"p\">[</span><span class=\"n\">col</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"n\">chk_row</span><span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"n\">chk_sqr</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">)][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n                <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n                <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">][</span><span class=\"n\">col</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n              \t<span class=\"n\">chk_col</span><span class=\"p\">[</span><span class=\"n\">col</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">,</span> <span class=\"n\">chk_row</span><span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">,</span> <span class=\"n\">chk_sqr</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">)][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">implement</span><span class=\"p\">(){</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">9</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"mi\">9</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">];</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]){</span> <span class=\"c1\">// i : 0 ~ 8 / j : 1~9</span>\n                <span class=\"n\">chk_col</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n                <span class=\"n\">chk_row</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n                <span class=\"n\">chk_sqr</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">)][</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Math/","name":"Sudoku.md","path":"Algorithm/Math/Sudoku.md","url":"/Algorithm/Math/Sudoku.html"},{"sort":6,"layout":"default","title":"Insertion Sort","content":"<h1 id=\"insertion-sort\">Insertion Sort</h1>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Sort/","name":"Insertion.md","path":"Algorithm/Sort/Insertion.md","url":"/Algorithm/Sort/Insertion.html"},{"sort":6,"layout":"default","title":"Memento","content":"<h1 id=\"memento\">Memento</h1>\n\n","dir":"/Study/Design_Pattern/Behavioral/","name":"Memento.md","path":"Study/Design_Pattern/Behavioral/Memento.md","url":"/Study/Design_Pattern/Behavioral/Memento.html"},{"sort":6,"layout":"default","title":"Rethink","content":"<h1 id=\"rethink\">Rethink</h1>\n\n","dir":"/Computer_Science/Database/NOSQL/","name":"Rethink.md","path":"Computer_Science/Database/NOSQL/Rethink.md","url":"/Computer_Science/Database/NOSQL/Rethink.html"},{"sort":6,"layout":"default","title":"Flyweight","content":"<h1 id=\"flyweight\">Flyweight</h1>\n\n","dir":"/Study/Design_Pattern/Structural/","name":"Flyweight.md","path":"Study/Design_Pattern/Structural/Flyweight.md","url":"/Study/Design_Pattern/Structural/Flyweight.html"},{"sort":6,"layout":"default","title":"Casting","content":"<h1 id=\"casting\">Casting</h1>\n\n<h3 id=\"unicast\">UniCast</h3>\n\n<ul>\n <li>\n <p>TCP/UDP 모두 지원하며, Source Mac주소에서 Destination Mac주소에 1:1(one-to-one)로 패킷 또는 메시지를 전송</p>\n </li>\n <li>다수의 Destination에 패킷을 전송할 때는 반복 작업을 해야되므로 비효율적</li>\n <li>스위치를 통해 유니캐스트 패킷이 들어왔을 때, 통신 가능한 모든 포트로 브로드캐스트를 수행함\n <ul>\n <li><strong>ARP</strong> : 브로드 캐스트를 통해 모든 통신 가능한 호스트에 전송하며, 패킷을 전송받은 호스트는 Destination 주소와 자신의 Mac 주소를 비교</li>\n <li>Mac주소가 다른 PC(랜카드)는 Packet을 제거하기 때문에 CPU 부하가 없음</li>\n <li>동일한 Mac 주소를 가지는 랜카드는 패킷을 CPU에서 처리</li>\n </ul>\n </li>\n <li>Destination에 대한 정보가 스위치의 포워딩 테이블에 없는 경우, 유니캐스트 플러드로 처리함\n <ul>\n <li>유니캐스트 플러딩 : MAC 주소를 모르는 Destination을 스위치가 유니캐스트로 처리할 수 없기 때문에 브로드캐스트 진행</li>\n </ul>\n </li>\n</ul>\n\n<p><br /></p>\n\n<h3 id=\"broadcast\">BroadCast</h3>\n\n<ul>\n <li>UDP 통신만 지원하며, 자신과 동일한 네트워크에 속한 모든 호스트에 패킷을 전송\n <ul>\n <li>Flooding 방식과 비슷하지만, 브로드캐스트는 모든 네트워크에 동시에 보내고 동일한 링크를 통해 동일한 패킷을 한번만 전송하지만, 플러딩은 동시에 보내지 않고 동일한 링크를 통해 동일한 패킷을 여러번 보낼 수 있음</li>\n </ul>\n </li>\n <li>목적지를 브로드캐스트 주소로 전송하며, 랜카드에서 브로드캐스트 주소로 수신받으면 CPU에 패킷을 전달하여 처리\n <ul>\n <li>전체적인 트래픽 증가 유발</li>\n <li>CPU에 전달하면서 인터럽트 발생 및 CPU 부하 증가</li>\n </ul>\n </li>\n <li>지정된 방식의 브로드캐스트를 이용하는 경우, 일반적으로 라우터에서 브로트캐스트 방식을 사용했을 때 패킷을 버리기때문에 필요시에는 라우터에 예약되어 있는 브로드캐스트 주소를 이용</li>\n <li>제한된 방식의 브로드캐스트를 이용하는 경우, 패킷이 라우터를 넘어가지 않기 때문에 항상 브로드캐스팅 가능</li>\n</ul>\n\n<p><br /></p>\n\n<h3 id=\"multicast\">MultiCast</h3>\n\n<ul>\n <li>UDP 통신만 지원하며, 설정해놓은 특정 그룹에 속한 하나 이상의 호스트에게 패킷을 전송</li>\n <li>다수의 호스트 수만큼 유니캐스트로 전송을 하게 된다면 CPU에 부하가 상당할 것이고, 브로드캐스트로 전송시 패킷이 불필요한 호스트에게 전송되는 단점을 보완</li>\n <li>네트워크 클래스 중 D클래스를 이용하여 특정 그룹을 만듦\n <ul>\n <li>수신할 호스트에서 D클래스에 등록하게 되면, D클래스에 속한 모든 호스트에 패킷을 전송하는 방식</li>\n </ul>\n </li>\n <li>패킷을 한번만 전송하기 때문에 네트워크 인프라를 효율적으로 이용</li>\n <li>발신자와 무관한 ASM (Any-Source-MultiCast)은 Group-Shared Tree (Core-Based Tree)\n <ul>\n <li>MultiCast 트래픽의 source를 찾기 위해 특별한 프로토콜(RP, MSDP)를 사용해야되는데 라우터에 부하를 발생시킴</li>\n <li>망 내의에서 하나의 라우터를 root 라우터를 설정하고 이를 통해 패킷 전달</li>\n <li>delay time은 증가하지만, 확장성으로 인해 대규모망에서 주로 사용</li>\n </ul>\n </li>\n <li>발신자가 필요한 SSM (Source-Specified-MultiCast)은 Source-Based Tree\n <ul>\n <li>Tree의 left node를 root 라우터로 설정하여 delay time이 짧아서 소규모망에서 주로 사용</li>\n <li>모든 leaf에서 멀티캐스트에 대한 정보를 가지고 있어서 비효율적이고, 확장성이 부족함</li>\n <li>서버에 장애가 발생시 문제가 되는 라우터만 영향을 끼침</li>\n </ul>\n </li>\n <li>스위치 / 라우터가 멀티캐스트를 지원해야 사용할 수 있음\n <ul>\n <li>스위치에서 미지원시 브로드캐스트로 처리</li>\n <li>라우터에서 미지원시 지정된 방식의 브로드캐스트처럼 패킷을 버림\n <ul>\n <li>패킷에 터널링에 대한 정보를 캡슐화하여 유니캐스트와 동일한 방식으로 라우팅 필요</li>\n </ul>\n </li>\n </ul>\n </li>\n</ul>\n\n<p><br /></p>\n\n<h3 id=\"anycast\">AnyCast</h3>\n\n<ul>\n <li>단일 소스에서 가장 가까운 노드와 통신</li>\n <li>가장 가까운 노드와 통신하기 때문에 다수의 노드들 전송될 수도 있음\n <ul>\n <li>동일한 destination 주소로 취급</li>\n </ul>\n </li>\n <li>가장 큰 목적은 트래픽 Load Balancing\n <ul>\n <li>하나의 destination으로 유니캐스트 되는 현상을 방지</li>\n </ul>\n </li>\n <li>서버에 문제가 생겼을 때 동일 anycast로 운용되는 다른 서버로 이중화</li>\n</ul>\n","dir":"/Computer_Science/Network/","name":"Casting.md","path":"Computer_Science/Network/Casting.md","url":"/Computer_Science/Network/Casting.html"},{"sort":6,"layout":"default","title":"Gitlab CI","content":"<h1 id=\"gitlab-ci\">Gitlab CI</h1>\n\n","dir":"/Study/Infrastructure/CICD_Tool/","name":"Gitlab_CI.md","path":"Study/Infrastructure/CICD_Tool/Gitlab_CI.md","url":"/Study/Infrastructure/CICD_Tool/Gitlab_CI.html"},{"sort":6,"layout":"default","title":"Heap","content":"<h1 id=\"heap\">Heap</h1>\n\n<ul>\n <li>Tree 형태로 구성된 자료구조로서, 가장 큰 값 or 작은 값을 \\(O(logN)\\) 의 시간복잡도로 Push/Pop 진행</li>\n <li>최상단에 최댓값이 오는 Max Heap, 최상단에 최솟값이 오는 Min Heap</li>\n <li>아래 예시는 Max Heap을 기준으로 구현</li>\n</ul>\n\n<p><strong>Push</strong></p>\n\n<ul>\n <li>Tree의 가장 마지막 지점에 Component 추가</li>\n <li>부모 노드와 계속 비교를 하며 부모노드보다 클 때 부모노드와 위치를 변경</li>\n <li>부모 노드가 자식 노드보다 큰 지점에 도달하면 반복문 종료</li>\n</ul>\n\n<p><img src=\"/DataStructure/Container/Img/heap_push1.png\" alt=\"heap_pop1\" /></p>\n\n<p><img src=\"/DataStructure/Container/Img/heap_push2.png\" alt=\"heap_pop1\" /></p>\n\n<p><strong>Pop</strong></p>\n\n<ul>\n <li>\n <p>Tree 구조에서 최상단에 최댓값을 유지하기 때문에, 첫번째 노드 값을 return</p>\n </li>\n <li>첫번째 노드를 삭제하고 마지막 노드를 첫번째 노드로 위치</li>\n <li>좌/우 자식 노드들과 비교</li>\n <li>더 큰 값을 가지는 자식과 위치를 변경하며, 좌/우 둘 다 변경할 수 없을때까지 진행</li>\n</ul>\n\n<p><img src=\"/DataStructure/Container/Img/heap_pop1.png\" alt=\"heap_pop1\" /></p>\n\n<p><img src=\"/DataStructure/Container/Img/heap_pop2.png\" alt=\"heap_pop1\" /></p>\n\n<p><img src=\"/DataStructure/Container/Img/heap_pop3.png\" alt=\"heap_pop1\" /></p>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"cp\">#include &lt;iostream&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"cp\">#define MAX_SIZE 100001\n</span>\n<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"nc\">T</span><span class=\"p\">&gt;</span>\n<span class=\"k\">class</span> <span class=\"nc\">heap</span>\n<span class=\"p\">{</span>\n<span class=\"nl\">private:</span>\n    <span class=\"n\">T</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">MAX_SIZE</span><span class=\"p\">];</span>\n    <span class=\"kt\">int</span> <span class=\"n\">_size</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">void</span> <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">T</span> <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">;</span>\n        <span class=\"o\">*</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">;</span>\n        <span class=\"o\">*</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">T</span> <span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">_size</span> <span class=\"o\">&gt;=</span> <span class=\"n\">MAX_SIZE</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">_size</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">_size</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">_size</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n\n<span class=\"c1\">//        while (current &gt; 1 &amp;&amp; h[current] &lt; h[parent]) // minheap</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">current</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">current</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">parent</span><span class=\"p\">])</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">current</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">parent</span><span class=\"p\">]);</span>\n            <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">parent</span><span class=\"p\">;</span>\n            <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">parent</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">_size</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">T</span> <span class=\"n\">pop</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">_size</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n        <span class=\"n\">T</span> <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n        <span class=\"n\">_size</span><span class=\"o\">--</span><span class=\"p\">;</span>\n\n        <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">_size</span><span class=\"p\">];</span>\n        <span class=\"kt\">int</span> <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">leftChild</span> <span class=\"o\">=</span> <span class=\"n\">current</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">rightChild</span> <span class=\"o\">=</span> <span class=\"n\">current</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">minNode</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">;</span>\n\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">leftChild</span> <span class=\"o\">&lt;</span> <span class=\"n\">_size</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">minNode</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">leftChild</span><span class=\"p\">])</span>\n                <span class=\"n\">minNode</span> <span class=\"o\">=</span> <span class=\"n\">leftChild</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rightChild</span> <span class=\"o\">&lt;</span> <span class=\"n\">_size</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">minNode</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">rightChild</span><span class=\"p\">])</span>\n                <span class=\"n\">minNode</span> <span class=\"o\">=</span> <span class=\"n\">rightChild</span><span class=\"p\">;</span>\n            <span class=\"cm\">/* minheap\n            if (h[minNode] &gt; h[leftChild])\n                minNode = leftChild;\n            if (rightChild &lt; _size &amp;&amp; h[minNode] &gt; h[rightChild])\n                minNode = rightChild;\n            */</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">minNode</span> <span class=\"o\">==</span> <span class=\"n\">current</span><span class=\"p\">)</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>\n            <span class=\"p\">{</span>\n                <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">current</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">minNode</span><span class=\"p\">]);</span>\n                <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">minNode</span><span class=\"p\">;</span>\n                <span class=\"n\">leftChild</span> <span class=\"o\">=</span> <span class=\"n\">current</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n                <span class=\"n\">rightChild</span> <span class=\"o\">=</span> <span class=\"n\">current</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">empty</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">_size</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">_size</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre>  </div></div>\n\n","dir":"/DataStructure/Container/","name":"Heap.md","path":"DataStructure/Container/Heap.md","url":"/DataStructure/Container/Heap.html"},{"sort":6,"layout":"default","title":"Boyer Moore","content":"<h1 id=\"boyer-moore\">Boyer Moore</h1>\n\n<ul>\n <li>Boyer Moore 알고리즘은 두가지 접근법을 조합하여 최적의 방법으로 문자를 비교</li>\n <li>\n <p>Rabin-Karp와 KMP는 왼쪽에서 오른쪽으로 비교했지만, Boyer Moore는 오른쪽에서 왼쪽으로 비교</p>\n\n <ul>\n <li>문자열을 skip할 때는 왼쪽에서 오른쪽으로 진행</li>\n </ul>\n </li>\n <li>두가지 접근법은 Bad Character / Good Suffix</li>\n <li>시간 복잡도는 문자열 비교 단계에서 시간복잡도 O(NM)을 가지지만, pattern에 비해 text가 상당히 클 경우 최적의 case인 O(N/M)에 가까워짐\n <ul>\n <li>텍스트가 나타나지 않는 경우 O(N+M)</li>\n </ul>\n </li>\n</ul>\n\n<p><br /></p>\n\n<ul>\n <li>\n <p><strong>Bad Characeter</strong></p>\n\n <ul>\n <li>패턴의 문자와 일치하지 않는 텍스트의 문자를 Bad Character라고 함\n <ul>\n <li>Bad Character 테이블은 문자의 가장 오른쪽 index를 저장</li>\n </ul>\n </li>\n <li>Bad Character Table은 문자열 내에 속한 문자의 가장 오른쪽 인덱스를 저장\n <ul>\n <li>존재하지 않는 문자는 -1로 저장하는 것이 일반적</li>\n </ul>\n </li>\n </ul>\n\n <p><strong>Bad Character Code</strong></p>\n\n <div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#define NUM_OF_CHARS 256\n</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">createBC</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">pat</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">pat</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"n\">bc</span><span class=\"p\">(</span><span class=\"n\">NUM_OF_CHARS</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">NUM_OF_CHARS</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">bc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">bc</span><span class=\"p\">[(</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">pat</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">bc</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n  \n<span class=\"kt\">void</span> <span class=\"nf\">BM</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">pat</span><span class=\"p\">,</span> <span class=\"n\">string</span> <span class=\"n\">txt</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"n\">txt</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">(),</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">pat</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"n\">bc</span> <span class=\"o\">=</span> <span class=\"n\">createBC</span><span class=\"p\">(</span><span class=\"n\">pat</span><span class=\"p\">);</span>\n  \n    <span class=\"kt\">int</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n      \n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">&lt;=</span> <span class=\"p\">(</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"n\">M</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">// from last character</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">pat</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">txt</span><span class=\"p\">[</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"n\">j</span><span class=\"o\">--</span><span class=\"p\">;</span>\n  \n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"Pattern start index %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">);</span>\n            <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">M</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"n\">bc</span><span class=\"p\">[</span><span class=\"n\">txt</span><span class=\"p\">[</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">M</span><span class=\"p\">]]</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">bc</span><span class=\"p\">[</span><span class=\"n\">txt</span><span class=\"p\">[</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">]]);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>  </div> </div>\n\n <ul>\n <li>\n <p>return으로 받은 bc를 이용하여 문자열 간 비교를 수행</p>\n </li>\n <li>하나의 예시로 text : <code class=\"language-plaintext highlighter-rouge\">AABACAADAABAACBAC</code> 와 pattern : <code class=\"language-plaintext highlighter-rouge\">AABAC</code> 을 비교</li>\n <li>BC (AABAC)\n <ul>\n <li>A = 3</li>\n <li>B = 2</li>\n <li>C = 4</li>\n </ul>\n </li>\n <li>\n <p>Text를 와 Pattern을 비교할 때 BC를 이용</p>\n </li>\n <li>첫번째로 모든 문자가 매칭\n <ul>\n <li>다음 문자가 있는 경우, 다음 문자의 M-BC 만큼 이동</li>\n <li>매칭되고 다음 문자인 bc[txt[s + M]] = “A”이므로, M-3 = 2만큼 이동</li>\n </ul>\n </li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n <th>A</th>\n <th>A</th>\n <th>D</th>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>A</th>\n <th>C</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>A</td>\n <td>A</td>\n <td>B</td>\n <td>A</td>\n <td>C</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n </tbody>\n </table>\n\n <ul>\n <li>6번째 index인 A와 C를 비교\n <ul>\n <li>다른 문자가 존재하기 때문에, <code class=\"language-plaintext highlighter-rouge\">max(1, j-bc[txt[s+j]])</code> 만큼 이동</li>\n <li>매칭이 안 된 마지막 문자인 <code class=\"language-plaintext highlighter-rouge\">bc[txt[s+j]]</code> = A가 존재하므로 4-3만큼 이동 (+1)</li>\n </ul>\n </li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n <th>A</th>\n <th>A</th>\n <th>D</th>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>A</th>\n <th>C</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td> </td>\n <td> </td>\n <td>A</td>\n <td>A</td>\n <td>B</td>\n <td>A</td>\n <td><strong>C</strong></td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n </tbody>\n </table>\n\n <ul>\n <li>7번째 index인 D와 C를 비교\n <ul>\n <li>다른 문자가 존재하기 때문에, <code class=\"language-plaintext highlighter-rouge\">max(1, j-bc[txt[s+j]])</code> 만큼 이동</li>\n <li>매칭이 안 된 마지막 문자인 <code class=\"language-plaintext highlighter-rouge\">bc[txt[s+j]]</code> = D가 존재하지 않으므로 4-(-1)만큼 이동 (+5)</li>\n </ul>\n </li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n <th>A</th>\n <th>A</th>\n <th>D</th>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>A</th>\n <th>C</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td> </td>\n <td> </td>\n <td> </td>\n <td>A</td>\n <td>A</td>\n <td>B</td>\n <td>A</td>\n <td><strong>C</strong></td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n </tbody>\n </table>\n\n <ul>\n <li>12번째 index인 A와 C를 비교\n <ul>\n <li>다른 문자가 존재하기 때문에, <code class=\"language-plaintext highlighter-rouge\">max(1, j-bc[txt[s+j]])</code> 만큼 이동</li>\n <li>매칭이 안 된 마지막 문자인 <code class=\"language-plaintext highlighter-rouge\">bc[txt[s+j]]</code> = A가 존재하므로 4-3만큼 이동 (+1)</li>\n </ul>\n </li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n <th>A</th>\n <th>A</th>\n <th>D</th>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>A</th>\n <th>C</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td>A</td>\n <td>A</td>\n <td>B</td>\n <td>A</td>\n <td><strong>C</strong></td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n </tbody>\n </table>\n\n <ul>\n <li>13번째 index부터 왼쪽으로 11번째 까지 비교\n <ul>\n <li>2번 매칭이 되었기 때문에 j = (M-1)-2 = 2</li>\n <li>매칭이 안 된 마지막 문자인 A가 BC에 존재하므로 ` max(1, j - bc[txt[s + j]])`에 의해 max(1,-1) = 1 만큼 이동</li>\n </ul>\n </li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n <th>A</th>\n <th>A</th>\n <th>D</th>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>A</th>\n <th>C</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td>A</td>\n <td>A</td>\n <td><strong>B</strong></td>\n <td>A</td>\n <td>C</td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n </tbody>\n </table>\n\n <ul>\n <li>14번째 index 비교\n <ul>\n <li>매칭이 안 된 마지막 문자 B가 bc에 존재하기 때문에 4-2 = 2만큼 이동</li>\n </ul>\n </li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n <th>A</th>\n <th>A</th>\n <th>D</th>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>A</th>\n <th>C</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td>A</td>\n <td>A</td>\n <td>B</td>\n <td>A</td>\n <td><strong>C</strong></td>\n <td> </td>\n <td> </td>\n </tr>\n </tbody>\n </table>\n\n <ul>\n <li>오른쪽에서 3개의 문자열이 매칭되었기 때문에 j = 1</li>\n <li><code class=\"language-plaintext highlighter-rouge\">max(1, j - bc[txt[s + j]])</code> = max(1,-3) = 1만큼 이동</li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n <th>A</th>\n <th>A</th>\n <th>D</th>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>A</th>\n <th>C</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td>A</td>\n <td>A</td>\n <td>B</td>\n <td>A</td>\n <td>C</td>\n </tr>\n </tbody>\n </table>\n\n <ul>\n <li>최적의 경우, text에서 matching을 하는 문자가 pattern에 항상 없는 경우이고 이 때 시간 복잡도는 O(N/M)이다\n <ul>\n <li>항상 M만큼 skip</li>\n </ul>\n </li>\n <li>그러나 최악의 경우 “AAAAAA”에서 “AA” 같은 동일한 문자를 비교하는 경우, 항상 모든 문자열을 비교해야 되기 때문에 시간 복잡도는 O(NM)</li>\n </ul>\n </li>\n <li>\n <p><strong>Good Suffix</strong></p>\n\n <ul>\n <li>Pattern과 text를 비교하는 중 불일치하는 지점이 발생했을 때, text와 일치했던 Pattern의 Suffix와 동일한 연속된 부분 문자열을 찾아서 이동시켜서 중간 내용을 skip\n <ul>\n <li>2개 이상의 동일한 부분 문자열이 있는 경우 우측부터 검색 (오른쪽에서 왼쪽으로 문자열을 비교하기 때문)</li>\n <li>일치하는 Suffix를 제외하고 동일한 부분 문자열이 없는 경우, 일치하는 곳까지를 새로운 Suffix로 만들어서 매칭</li>\n </ul>\n </li>\n <li>\n <p><strong>Good Suffix Table</strong>은 마지막 문자부터 비교했을 때 일치하지 않는 지점에서 skip 할 수 있는 거리를 의미</p>\n\n <ul>\n <li>i는 str2의 시작과 비교되는 str1의 index이고, j는 str1의 마지막과 비교되는 str2의 index</li>\n <li><code class=\"language-plaintext highlighter-rouge\">nanana</code> 라는 문자열로 good suffix array를 만드는 경우</li>\n </ul>\n </li>\n </ul>\n\n <hr />\n\n <ul>\n <li>i = M - 1 = 5, j = 0에서시작\n <ul>\n <li>gs[i+j], 즉 문자 불일치가 발생한 위치에 start index(i) 대입\n <ul>\n <li>gs[i+j] = 5</li>\n </ul>\n </li>\n <li>i = 4, j = 1 로 변경</li>\n </ul>\n </li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th>i</th>\n <th>0</th>\n <th>1</th>\n <th>2</th>\n <th>3</th>\n <th>4</th>\n <th>5</th>\n <th> </th>\n <th> </th>\n <th> </th>\n <th> </th>\n <th> </th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>j</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td>0</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n <td>5</td>\n </tr>\n <tr>\n <td>str1</td>\n <td>n</td>\n <td>a</td>\n <td>n</td>\n <td>a</td>\n <td>n</td>\n <td><strong>a</strong></td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>str2</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td><strong>n</strong></td>\n <td>a</td>\n <td>n</td>\n <td>a</td>\n <td>n</td>\n <td>a</td>\n </tr>\n <tr>\n <td>pre_gs</td>\n <td>6</td>\n <td>6</td>\n <td>6</td>\n <td>6</td>\n <td>6</td>\n <td>6</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>after_gs</td>\n <td>6</td>\n <td>6</td>\n <td>6</td>\n <td>6</td>\n <td>6</td>\n <td><strong>5</strong></td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n </tbody>\n </table>\n\n <ul>\n <li>i = 4, j = 1에서시작\n <ul>\n <li>j = 1에서의 문자가 매칭되었으므로 i =4 , j=0에서 비교했으나 매칭됨</li>\n <li>suffix가 일치하므로 i 이전의 index에 i 값 대입</li>\n </ul>\n </li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th>i</th>\n <th>0</th>\n <th>1</th>\n <th>2</th>\n <th>3</th>\n <th>4</th>\n <th>5</th>\n <th> </th>\n <th> </th>\n <th> </th>\n <th> </th>\n <th> </th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>j</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td>0</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n <td>5</td>\n <td> </td>\n </tr>\n <tr>\n <td>str1</td>\n <td>n</td>\n <td>a</td>\n <td>n</td>\n <td>a</td>\n <td><strong>n</strong></td>\n <td><strong>a</strong></td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>str2</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td><strong>n</strong></td>\n <td><strong>a</strong></td>\n <td>n</td>\n <td>a</td>\n <td>n</td>\n <td>a</td>\n <td> </td>\n </tr>\n <tr>\n <td>pre_gs</td>\n <td>6</td>\n <td>6</td>\n <td>6</td>\n <td>6</td>\n <td>6</td>\n <td>5</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>after_gs</td>\n <td><strong>4</strong></td>\n <td><strong>4</strong></td>\n <td><strong>4</strong></td>\n <td><strong>4</strong></td>\n <td>6</td>\n <td>5</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n </tbody>\n </table>\n\n <ul>\n <li>i =3, j = 2에서 시작\n <ul>\n <li>i+j = 3 에서 불일치 하므로 gs[i+j] = 3 대입, i = 2, j = 3</li>\n </ul>\n </li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th>i</th>\n <th>0</th>\n <th>1</th>\n <th>2</th>\n <th>3</th>\n <th>4</th>\n <th>5</th>\n <th> </th>\n <th> </th>\n <th> </th>\n <th> </th>\n <th> </th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>j</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td>0</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n <td>5</td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>str1</td>\n <td>n</td>\n <td>a</td>\n <td>n</td>\n <td>a</td>\n <td>n</td>\n <td><strong>a</strong></td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>str2</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td>n</td>\n <td>a</td>\n <td><strong>n</strong></td>\n <td>a</td>\n <td>n</td>\n <td>a</td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>pre_gs</td>\n <td>4</td>\n <td>4</td>\n <td>4</td>\n <td>4</td>\n <td>6</td>\n <td>5</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>after_gs</td>\n <td>4</td>\n <td>4</td>\n <td>4</td>\n <td>4</td>\n <td>6</td>\n <td><strong>3</strong></td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n </tbody>\n </table>\n\n <ul>\n <li>i = 2, j = 3에서 시작\n <ul>\n <li>모든 suffix가 일치하므로, i = 2 이전의 gs index를 2로 대입</li>\n </ul>\n </li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th>i</th>\n <th>0</th>\n <th>1</th>\n <th>2</th>\n <th>3</th>\n <th>4</th>\n <th>5</th>\n <th> </th>\n <th> </th>\n <th> </th>\n <th> </th>\n <th> </th>\n <th> </th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>j</td>\n <td> </td>\n <td> </td>\n <td>0</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n <td>5</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>str1</td>\n <td>n</td>\n <td>a</td>\n <td><strong>n</strong></td>\n <td><strong>a</strong></td>\n <td><strong>n</strong></td>\n <td><strong>a</strong></td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>str2</td>\n <td> </td>\n <td> </td>\n <td><strong>n</strong></td>\n <td><strong>a</strong></td>\n <td><strong>n</strong></td>\n <td><strong>a</strong></td>\n <td>n</td>\n <td>a</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>pre_gs</td>\n <td>4</td>\n <td>4</td>\n <td>4</td>\n <td>4</td>\n <td>6</td>\n <td>3</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>after_gs</td>\n <td><strong>2</strong></td>\n <td><strong>2</strong></td>\n <td>4</td>\n <td>4</td>\n <td>6</td>\n <td>3</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n </tbody>\n </table>\n\n <ul>\n <li>i = 1 , j = 4에서 시작\n <ul>\n <li>i+j = 5에서 문자가 불일치하므로, gs[i+j] = 1 대입</li>\n </ul>\n </li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th>i</th>\n <th>0</th>\n <th>1</th>\n <th>2</th>\n <th>3</th>\n <th>4</th>\n <th>5</th>\n <th> </th>\n <th> </th>\n <th> </th>\n <th> </th>\n <th> </th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>j</td>\n <td> </td>\n <td>0</td>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n <td>5</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>str1</td>\n <td>n</td>\n <td>a</td>\n <td>n</td>\n <td>a</td>\n <td>n</td>\n <td><strong>a</strong></td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>str2</td>\n <td> </td>\n <td>n</td>\n <td>a</td>\n <td>n</td>\n <td>a</td>\n <td><strong>n</strong></td>\n <td>a</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>pre_gs</td>\n <td>2</td>\n <td>2</td>\n <td>4</td>\n <td>4</td>\n <td>6</td>\n <td>3</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n <tr>\n <td>after_gs</td>\n <td>2</td>\n <td>2</td>\n <td>4</td>\n <td>4</td>\n <td>6</td>\n <td><strong>1</strong></td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n </tbody>\n </table>\n\n <ul>\n <li>i &gt; 0 보다 클때만 동작하기 때문에, while문 종료</li>\n </ul>\n\n <p><strong>Good Suffix Code</strong></p>\n\n <div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  \n<span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">createGS</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">pat</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">pat</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">gs</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">M</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">gs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">M</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pat</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">pat</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">j</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"n\">gs</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">gs</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n            <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n            <span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">gs</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n  \n<span class=\"kt\">void</span> <span class=\"nf\">BM</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">pat</span><span class=\"p\">,</span> <span class=\"n\">string</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"n\">text</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">(),</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">pat</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n  \n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">gs</span> <span class=\"o\">=</span> <span class=\"n\">createGS</span><span class=\"p\">(</span><span class=\"n\">pat</span><span class=\"p\">);</span>\n  \n    <span class=\"kt\">int</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">&lt;=</span> <span class=\"p\">(</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"n\">M</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">pat</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">text</span><span class=\"p\">[</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"n\">j</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"Pattern start index %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">);</span>\n            <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\">gs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span> <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\">gs</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>  </div> </div>\n\n <ul>\n <li>\n <p>text와 pattern을 비교할 때, 이전에 만들었던 good suffix table을 이용</p>\n </li>\n <li>\n <p>모든 문자열이 일치하기 되면, gs[0]만큼 이동</p>\n </li>\n <li>\n <p>일치하지 않는 지점이 발생하면 gs[j] 만큼 이동</p>\n </li>\n <li>\n <p>하나의 예시로 text : <code class=\"language-plaintext highlighter-rouge\">AABACAADAABAACBAC</code> 와 pattern : <code class=\"language-plaintext highlighter-rouge\">AABAC</code> 을 비교</p>\n </li>\n <li>\n <p>gs = [5,5,5,5,1]</p>\n </li>\n <li>\n <p>첫번째로 모든 문자가 매칭되기 때문에 gs[0]만큼 이동</p>\n </li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n <th>A</th>\n <th>A</th>\n <th>D</th>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>A</th>\n <th>C</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>A</td>\n <td>A</td>\n <td>B</td>\n <td>A</td>\n <td>C</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n </tbody>\n </table>\n\n <ul>\n <li>pattern의 index=4에서 매칭 실패했으므롤 gs[4] = 1만큼 이동</li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n <th>A</th>\n <th>A</th>\n <th>D</th>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>A</th>\n <th>C</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td>A</td>\n <td>A</td>\n <td>B</td>\n <td>A</td>\n <td><strong>C</strong></td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n </tbody>\n </table>\n\n <ul>\n <li>pattern의 index=4에서 매칭 실패했으므롤 gs[4] = 1만큼 이동</li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n <th>A</th>\n <th>A</th>\n <th>D</th>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>A</th>\n <th>C</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td>A</td>\n <td>A</td>\n <td>B</td>\n <td>A</td>\n <td>C</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n </tbody>\n </table>\n\n <ul>\n <li>pattern의 index=4에서 매칭 실패했으므롤 gs[4] = 1만큼 이동</li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n <th>A</th>\n <th>A</th>\n <th>D</th>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>A</th>\n <th>C</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td>A</td>\n <td>A</td>\n <td>B</td>\n <td>A</td>\n <td>C</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n </tbody>\n </table>\n\n <ul>\n <li>pattern의 index=4에서 매칭 실패했으므롤 gs[4] = 1만큼 이동</li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n <th>A</th>\n <th>A</th>\n <th>D</th>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>A</th>\n <th>C</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td>A</td>\n <td>A</td>\n <td>B</td>\n <td>A</td>\n <td>C</td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n </tbody>\n </table>\n\n <ul>\n <li>pattern의 index=2에서 매칭 실패했으므롤 gs[2] = 5만큼 이동</li>\n </ul>\n\n <table>\n <thead>\n <tr>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n <th>A</th>\n <th>A</th>\n <th>D</th>\n <th>A</th>\n <th>A</th>\n <th>B</th>\n <th>A</th>\n <th>A</th>\n <th>C</th>\n <th>B</th>\n <th>A</th>\n <th>C</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td> </td>\n <td>A</td>\n <td>A</td>\n <td><strong>B</strong></td>\n <td>A</td>\n <td>C</td>\n <td> </td>\n <td> </td>\n <td> </td>\n </tr>\n </tbody>\n </table>\n\n <ul>\n <li>문자열 길이 초과로 while문 빠져 나옴</li>\n <li>일반적으로 good suffix의 시간복잡도는</li>\n </ul>\n </li>\n</ul>\n\n<p><br /></p>\n\n<h3 id=\"good-suffix와-bad-character를-조합\">Good Suffix와 Bad Character를 조합</h3>\n\n<ul>\n <li>Bad Character와 Good Suffix 중 문자열을 가장 많이 skip 할 수 있는 방법으로 적용함</li>\n <li>완전히 매칭될 때는 Good Suffix인 gs[0] 값만큼 이동</li>\n <li>매칭이 실패 했을 때는 <code class=\"language-plaintext highlighter-rouge\">max(j - bc[txt[s + j]], gs[j])</code> 만큼 이동\n <ul>\n <li>Bad character와 good suffix 중 많이 이동할 수 있는 것을 선택</li>\n </ul>\n </li>\n</ul>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">createBC</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">pat</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">pat</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">bc</span><span class=\"p\">(</span><span class=\"n\">NUM_OF_CHARS</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">NUM_OF_CHARS</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"n\">bc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"n\">bc</span><span class=\"p\">[(</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">pat</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">bc</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">createGS</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">pat</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">pat</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">gs</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">M</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"n\">gs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">M</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pat</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">pat</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">j</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"n\">gs</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">--</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n            <span class=\"k\">else</span> <span class=\"n\">gs</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n            <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n            <span class=\"n\">i</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">gs</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"nf\">BM</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">pat</span><span class=\"p\">,</span> <span class=\"n\">string</span> <span class=\"n\">txt</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"n\">txt</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">(),</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">pat</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">bc</span> <span class=\"o\">=</span> <span class=\"n\">createBC</span><span class=\"p\">(</span><span class=\"n\">pat</span><span class=\"p\">);</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">gs</span> <span class=\"o\">=</span> <span class=\"n\">createGS</span><span class=\"p\">(</span><span class=\"n\">pat</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">&lt;=</span> <span class=\"p\">(</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"n\">M</span><span class=\"p\">))</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">pat</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">txt</span><span class=\"p\">[</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">j</span><span class=\"o\">--</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"Pattern start index %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">);</span>\n            <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\">gs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">bc</span><span class=\"p\">[</span><span class=\"n\">txt</span><span class=\"p\">[</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">j</span><span class=\"p\">]],</span> <span class=\"n\">gs</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]);</span> <span class=\"c1\">// Bad Character || Good Suffix</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<hr />\n\n<p><br /></p>\n\n<h3 id=\"boyer-moore-horspool\">Boyer Moore Horspool</h3>\n\n<ul>\n <li>Boyer Moore 알고리즘과 비슷한 시간복잡도 (평균 \\(O(N/M)\\))를 가질 수 있으며, 구현이 간단함</li>\n <li>Bad Match Table\n <ul>\n <li>ASCII Size인 배열에서 특정 문자까지의 최소 거리\n <ul>\n <li>가장 오른쪽 문자에서 왼쪽으로 이동하며 가장 최초로 발생하는 거리\n <ul>\n <li>가장 오른쪽 문자열 및 없는 문자열은 Size 대입</li>\n </ul>\n </li>\n </ul>\n </li>\n </ul>\n </li>\n <li>Boyer Moore 알고리즘이니 오른쪽에서 왼쪽으로 비교\n <ul>\n <li>text에서 가장 오른쪽에 있는 문자를 확인\n <ul>\n <li>아래 문자가 pattern 내에 존재하는 경우, pattern의 가장 우측에서 해당 문자의 거리만큼 skip (Bad Match Table)</li>\n <li>존재하지 않는 경우에도 Bad Match Table을 적용 (Default로 Pattern의 크기 대입)</li>\n </ul>\n </li>\n </ul>\n </li>\n</ul>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#define NUM_OF_CHARS 256\n</span>\n<span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">createBC</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">pat</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">pat</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">bc</span><span class=\"p\">(</span><span class=\"n\">NUM_OF_CHARS</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">NUM_OF_CHARS</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">bc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">bc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">M</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"c1\">// last character is skip</span>\n        <span class=\"n\">bc</span><span class=\"p\">[(</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"n\">pat</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">M</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">bc</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">Horspool</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">pat</span><span class=\"p\">,</span> <span class=\"n\">string</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"n\">text</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">(),</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">pat</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">();</span>\n    <span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">bc</span> <span class=\"o\">=</span> <span class=\"n\">createBC</span><span class=\"p\">(</span><span class=\"n\">pat</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"n\">M</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>     <span class=\"c1\">// pattern index from right</span>\n        <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">// text index from right</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">pat</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">text</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">])</span>\n        <span class=\"p\">{</span>\n            <span class=\"o\">--</span><span class=\"n\">j</span><span class=\"p\">;</span>\n            <span class=\"o\">--</span><span class=\"n\">k</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"start index is %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n            <span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span> <span class=\"c1\">// start index</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"n\">bc</span><span class=\"p\">[</span><span class=\"n\">text</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">M</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]];</span> <span class=\"c1\">// text index from right</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">res</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/String/","name":"Boyer_Moore.md","path":"Algorithm/String/Boyer_Moore.md","url":"/Algorithm/String/Boyer_Moore.html"},{"sort":7,"layout":"default","title":"Linker &amp; Loader","content":"<h1 id=\"linker--loader\">Linker &amp; Loader</h1>\n\n<h3 id=\"assembler\">Assembler</h3>\n\n<h3 id=\"linker\">Linker</h3>\n\n","dir":"/Computer_Science/OS/","name":"Linker_Loader.md","path":"Computer_Science/OS/Linker_Loader.md","url":"/Computer_Science/OS/Linker_Loader.html"},{"sort":7,"layout":"default","title":"Union Find","content":"<h1 id=\"union-find\">Union Find</h1>\n\n<ul>\n <li>\n <p>서로소 집합(Disjonit-Set), 합집합-찾기 (Union-Find), 병합-찾기(Merge-Find) 알고리즘이라고 불림</p>\n </li>\n <li>\n <p>2개의 기능으로 나눌 수 있는데, Find 가능과 Union 기능으로 구성됨</p>\n </li>\n <li>\n <p><strong>Find</strong></p>\n\n <ul>\n <li>원소가 속한 집합을 반환하는 방법</li>\n <li>일반적으로, 최대 조상 Node를 집합의 대표로 설정하여, 최대 조상 Node가 일치하면 동일 집합으로 봄</li>\n </ul>\n\n <div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">u</span> <span class=\"o\">==</span> <span class=\"n\">parent</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">])</span> <span class=\"k\">return</span> <span class=\"n\">u</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">parent</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n</code></pre>  </div> </div>\n </li>\n <li>\n <p><strong>Union(Merge)</strong></p>\n\n <ul>\n <li>두 개의 원소를 비교했을 때, 같은 집합이 아닐 때 두 개의 원소를 하나의 집합으로 만들어주는 방법</li>\n <li>한쪽으로 원소가 몰리게 되면 시간 복잡도가 느려지기 때문에 아래와 같은 최적화 코드를 넣어줌</li>\n </ul>\n\n <div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">depth</span><span class=\"p\">[</span><span class=\"n\">pa</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">depth</span><span class=\"p\">[</span><span class=\"n\">pb</span><span class=\"p\">])</span> <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">pa</span><span class=\"p\">,</span> <span class=\"n\">pb</span><span class=\"p\">);</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">depth</span><span class=\"p\">[</span><span class=\"n\">pa</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">depth</span><span class=\"p\">[</span><span class=\"n\">pb</span><span class=\"p\">])</span> <span class=\"n\">depth</span><span class=\"p\">[</span><span class=\"n\">pb</span><span class=\"p\">]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n<span class=\"n\">parent</span><span class=\"p\">[</span><span class=\"n\">pa</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pb</span><span class=\"p\">;</span>\n</code></pre>  </div> </div>\n </li>\n</ul>\n\n<p><img src=\"/DataStructure/Container/Img/union_find1.png\" alt=\"union_find1\" /></p>\n\n<p><img src=\"/DataStructure/Container/Img/union_find2.png\" alt=\"union_find1\" /></p>\n\n<p><img src=\"/DataStructure/Container/Img/union_find3.png\" alt=\"union_find1\" /></p>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">parent</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">depth</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">u</span> <span class=\"o\">==</span> <span class=\"n\">parent</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">])</span> <span class=\"k\">return</span> <span class=\"n\">u</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">parent</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">_union</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">pa</span> <span class=\"o\">=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">pb</span> <span class=\"o\">=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pa</span> <span class=\"o\">==</span> <span class=\"n\">pb</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">depth</span><span class=\"p\">[</span><span class=\"n\">pa</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">depth</span><span class=\"p\">[</span><span class=\"n\">pb</span><span class=\"p\">])</span> <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">pa</span><span class=\"p\">,</span> <span class=\"n\">pb</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">depth</span><span class=\"p\">[</span><span class=\"n\">pa</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">depth</span><span class=\"p\">[</span><span class=\"n\">pb</span><span class=\"p\">])</span> <span class=\"n\">depth</span><span class=\"p\">[</span><span class=\"n\">pb</span><span class=\"p\">]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"n\">parent</span><span class=\"p\">[</span><span class=\"n\">pa</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pb</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">init</span><span class=\"p\">(){</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"p\">;</span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">parent</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<p><strong>DSU</strong></p>\n\n<ul>\n <li>DSU (Disjoint Set Union)는 Union과 Find 기능을 제공하는 하나의 class로 제공</li>\n</ul>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"nc\">T</span><span class=\"p\">&gt;</span>\n<span class=\"k\">class</span> <span class=\"nc\">dsu</span>\n<span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"n\">T</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">],</span> <span class=\"n\">_rank</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">];</span>\n    <span class=\"n\">T</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n    <span class=\"n\">dsu</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">_n</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"p\">(</span><span class=\"n\">_n</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">_rank</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">T</span> <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">?</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">])));</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">unite</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">!=</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">_rank</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">_rank</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">])</span> <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">_rank</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">_rank</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">])</span> <span class=\"n\">_rank</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre>  </div></div>\n\n","dir":"/DataStructure/Container/","name":"Union_Find.md","path":"DataStructure/Container/Union_Find.md","url":"/DataStructure/Container/Union_Find.html"},{"sort":7,"layout":"default","title":"Maximum Cost and Minimum Flow","content":"<h1 id=\"maximum-cost-and-minimum-flow\">Maximum Cost and Minimum Flow</h1>\n\n","dir":"/Algorithm/Graph/","name":"Minimum_Cost_Maximum_Flow.md","path":"Algorithm/Graph/Minimum_Cost_Maximum_Flow.md","url":"/Algorithm/Graph/Minimum_Cost_Maximum_Flow.html"},{"sort":7,"layout":"default","title":"Normalization","content":"<h1 id=\"normalization\">Normalization</h1>\n\n","dir":"/Computer_Science/Database/","name":"Normalization.md","path":"Computer_Science/Database/Normalization.md","url":"/Computer_Science/Database/Normalization.html"},{"sort":7,"layout":"default","title":"Proxy","content":"<h1 id=\"proxy\">Proxy</h1>\n\n","dir":"/Study/Design_Pattern/Structural/","name":"Proxy.md","path":"Study/Design_Pattern/Structural/Proxy.md","url":"/Study/Design_Pattern/Structural/Proxy.html"},{"sort":7,"layout":"default","title":"Selection Sort","content":"<h1 id=\"selection-sort\">Selection Sort</h1>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Sort/","name":"Selection.md","path":"Algorithm/Sort/Selection.md","url":"/Algorithm/Sort/Selection.html"},{"sort":7,"layout":"default","title":"DNS","content":"<h1 id=\"dns\">DNS</h1>\n\n<ul>\n <li>도메인 네임 시스템(Domain Name System)은 분산 데이터베이스 시스템으로 Domain Name Space, Name Server, Resolver로 구성되어 있음</li>\n <li>Domain Name Space\n <ul>\n <li>계층 구조로 구성된 데이터베이스</li>\n <li>최상위 DNS Root가 존재하고 Trie 구조로 모든 호스트가 연결되어 있음\n <ul>\n <li>상위 노드에 label을 Insert하는 방식으로 구성</li>\n </ul>\n </li>\n <li>TLD (Top-Level Domain)</li>\n </ul>\n </li>\n <li>Name Server\n <ul>\n <li>전세계적으로 분산되어 있어, 도메인 정보를 저장 및 관리하는 DNS 서버로 도메인 이름을 IP주소로 변환하는 Service 제공</li>\n <li>클라이언트의 DNS Query / Name Server 간 Query에 대한 응답 수행</li>\n </ul>\n </li>\n <li>신뢰할 수 있는 DNS\n <ul>\n <li>신뢰할 수 없는 DNS 서버는 피싱, 해킹 등의 위험이 있으므로, 신뢰할 수 있는 DNS를 이용하는 것이 좋음</li>\n <li>KT DNS, Google Public DNS, CISCO 등이 신뢰할 수 있는 DNS에 해당하며, 도메인에 대한 최종 권한을 가지고 있음</li>\n <li>Recursive DNS NameServer에 IP주소가 포함된 응답을 보낼 의무가 있음</li>\n </ul>\n </li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>Type</strong></p>\n\n<ul>\n <li><strong>DNS Resolver</strong> (DNS Recursor)\n <ul>\n <li>재귀 DNS 해석기라고도 하며, DNS 쿼리를 날렸을 때 가장 먼저 진행하는 process</li>\n <li>클라이언트 요청을 Name Server로 Query 형태로 변환하여 전달하고, Name Server로부터 받은 응답을 클라이언트에게 제공</li>\n <li>IP주소와 호스트 이름을 매핑하기 위해 1개 이상의 Name Server의 정보를 이용</li>\n <li>UNIX에서는 <code class=\"language-plaintext highlighter-rouge\">/etc/resolv.conf</code> 에 설정</li>\n </ul>\n </li>\n <li><strong>Root Name Server</strong>\n <ul>\n <li>UDP 패킷의 크기 제한으로 인해 13개의 Root NameServer가만 존재</li>\n <li>TLD가 어떤 NameServer에 있는지 알고 있기 때문에, Resolver로부터 쿼리 요청이 오면 해당하는 NameServer의 이름, 주소 등을 제공</li>\n </ul>\n </li>\n <li><strong>TLD Name Server</strong>\n <ul>\n <li>Root 바로 아래 존재하는 최상위 도메인으로, URL의 마지막 ‘.’ 이후에 있는 도메인 확장자에 있는 모든 도메인의 Host Name / IP Address 정보를 가지고 있음</li>\n <li>TLD NameServer는 ICANN의 지사인 IANA가 관리하며, TLD를 2가지로 구분\n <ul>\n <li>ccTLD (Country Code Top-Level-Domain) : ‘.kr’, ‘.uk’ 같은 국가별로 운영하는 최상위 도메인</li>\n <li>gTLD (generic Top-Level-Domain) : ‘.com’,’.org’ 등과 같이 국가가 운영하지 않아, 어떤 국가의 어떤 이용자도 등록 가능</li>\n </ul>\n </li>\n </ul>\n </li>\n <li><strong>Authoritative Name Server</strong>\n <ul>\n <li>TLD NameServer로부터 도메인에 대한 정보를 제공 받은 후 Authritative NameServer에 매핑되는 IP Address에 새로운 쿼리</li>\n <li>’.’ 단위로 Authoritative 주소가 구분되어 있으며, 이전에 받은 IP Address를 이용하여 재귀로 Authoritative NameServer에 쿼리</li>\n <li>최종 목적지의 IP를 획득하게 되면, Resolver로 응답을 하며, DNS Process가 종료됨</li>\n <li>Primary Server와 Second Server가 존재하며, Primary Server에서는 Zone의 모든 Record를 최신 버전으로 관리해주고 Second Server에서는 Primary Server를 Backup</li>\n </ul>\n </li>\n</ul>\n\n<p><strong>Recursive DNS PROCESS</strong></p>\n\n<ul>\n <li>캐싱되지 않은 일반적인 DNS를 조회할 때 아래와 같은 Process로 진행</li>\n <li>재귀를 통해 얻은 IP 주소를 로컬 캐시에 저장하여 NameServer의 부하를 줄여줌</li>\n</ul>\n\n<p><img src=\"/Computer_Science/Network/Img/DNS.png\" alt=\"DNS\" /></p>\n\n<div style=\"text-align: right\"> Image ref :https://network.cmu.ac.th/wiki/index.php/Introduction_to_DNS</div>\n\n","dir":"/Computer_Science/Network/","name":"DNS.md","path":"Computer_Science/Network/DNS.md","url":"/Computer_Science/Network/DNS.html"},{"sort":7,"layout":"default","title":"Github Actions","content":"<h1 id=\"github-actions\">Github Actions</h1>\n\n","dir":"/Study/Infrastructure/CICD_Tool/","name":"Github_Actions.md","path":"Study/Infrastructure/CICD_Tool/Github_Actions.md","url":"/Study/Infrastructure/CICD_Tool/Github_Actions.html"},{"sort":7,"layout":"default","title":"Geometry","content":"<h1 id=\"geometry\">Geometry</h1>\n\n","dir":"/Algorithm/Math/","name":"Geometry.md","path":"Algorithm/Math/Geometry.md","url":"/Algorithm/Math/Geometry.html"},{"sort":7,"layout":"default","title":"Observer","content":"<h1 id=\"observer\">Observer</h1>\n\n","dir":"/Study/Design_Pattern/Behavioral/","name":"Observer.md","path":"Study/Design_Pattern/Behavioral/Observer.md","url":"/Study/Design_Pattern/Behavioral/Observer.html"},{"sort":8,"layout":"default","title":"Biconnected Component","content":"<h1 id=\"biconnected-component\">Biconnected Component</h1>\n\n","dir":"/Algorithm/Graph/","name":"Biconnected_Component.md","path":"Algorithm/Graph/Biconnected_Component.md","url":"/Algorithm/Graph/Biconnected_Component.html"},{"sort":8,"layout":"default","title":"Forward &amp; Redirect","content":"<h1 id=\"forward--redirect\">Forward &amp; Redirect</h1>\n\n<ul>\n <li>Forward와 Redirect는 작업 중인 페이지 같은 Resource를 다른 URL로 전속시키는 기술</li>\n</ul>\n\n<h3 id=\"forward\">Forward</h3>\n\n<ul>\n <li>Client가 Server에 요청했을 때 리소스의 변경이 필요한 경우, 데이터의 변경 없이 다른 URL에 Request를 전달</li>\n <li>전달받은 Request를 Client에게 Response하지만, Client 입장에서는 내부적인 Forward를 확인할 수 없음\n <ul>\n <li>Request / Response 객체를 공유</li>\n </ul>\n </li>\n <li>동일한 Web Container에 있는 Resource 간 Forward 가능</li>\n <li>Session의 변화가 불필요한 조회의 경우 Forward를 사용하는 것이 적합</li>\n</ul>\n\n<p><img src=\"/Computer_Science/Network/Img/Forward.png\" alt=\"Forward\" /></p>\n\n<div style=\"text-align: right\"> Image ref : http://www.noobyard.com/article/p-nvtmjjiu-qp.html </div>\n\n<p><br /></p>\n\n<h3 id=\"redirect\">Redirect</h3>\n\n<ul>\n <li>Client가 Server에 요청했을 때 Resource의 URL이 일치하지 않으면 Client에게 Redirect 요청\n <ul>\n <li>Redirect 요청에는 URL에 대한 정보가 들어있음</li>\n </ul>\n </li>\n <li>Client는 Redirect에 포함된 URL로 Request\n <ul>\n <li>처음 Request 했던 객체는 회수되어 더 이상 사용할 수 없음\n <ul>\n <li>의도적인 새로고침(Request)를 수행할 때, 이전의 Request가 회수되기 때문에 중복으로 작업하지 않음</li>\n <li>Forward의 경우, 지속적인 요청으로 중복으로 Request 작업을 수행</li>\n </ul>\n </li>\n </ul>\n </li>\n <li>Session의 변화가 필요한 추가 / 삭제 / 변경의 경우, Redirect가 적합</li>\n <li>HTTP 상태코드 300번대를 반환</li>\n</ul>\n\n<p><img src=\"/Computer_Science/Network/Img/Redirect.png\" alt=\"Redirect\" /></p>\n\n<div style=\"text-align: right\"> Image ref : http://www.noobyard.com/article/p-nvtmjjiu-qp.html </div>\n\n<p><strong>Code 3xx Redirect</strong></p>\n\n<table>\n <thead>\n <tr>\n <th>Code</th>\n <th>Text</th>\n <th>Type</th>\n <th>Description</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>300</td>\n <td>Multiple Choice</td>\n <td>Specific</td>\n <td>자주 사용되지는 않지만, 단어의 중의성을 해소할 때와 같이 Client에게 자원 선택의 옵션이 있음</td>\n </tr>\n <tr>\n <td>301</td>\n <td>Moved Permanently</td>\n <td>Permanent</td>\n <td>Resource에 영구적으로 이동(새로운 URI가 할당)되어 검색 엔진에 알려줘야 함. Migration이나 새로운 웹 페이지를 만들 때나 두 웹 페이지를 연결할 때 사용.</td>\n </tr>\n <tr>\n <td>302</td>\n <td>Found</td>\n <td>Temporary</td>\n <td>Resource가 일시적으로 이동되어 검색 엔진에 알려줘야 함. 웹 페이지를 ReConstruct하거나 Update 하는 경우 사용. 일시적인 목적으로 사용하기 때문에 301처럼 현재 URI를 대체하면 안 됨.</td>\n </tr>\n <tr>\n <td>303</td>\n <td>See Other</td>\n <td>Temporary</td>\n <td>페이지 Redirect 요청할 때 Post/Put 같은 Method를 Get 요청으로 변경. 중복으로 동작하는 것을 방지</td>\n </tr>\n <tr>\n <td>304</td>\n <td>Not Modified</td>\n <td>Specific</td>\n <td>Client의 캐시에 있는 원본과 웹 서버의 Resource가 동일할 때 로컬 캐시를 사용하도록 알려줌</td>\n </tr>\n <tr>\n <td>307</td>\n <td>Temporary Redirect</td>\n <td>Temporary</td>\n <td>302와 동일한 역할을 하지만, Request Method / Body는 유지하기 때문에 링크를 갱신하지 않음(302에서는 변경될 수 있음)</td>\n </tr>\n <tr>\n <td>308</td>\n <td>Permanent Redirect</td>\n <td>Permanent</td>\n <td>301과 동일한 역할을 하지만, Request Method / Body는 유지하기 때문에 링크를 갱신하지 않음(301에서는 변경될 수 있음)</td>\n </tr>\n </tbody>\n</table>\n\n","dir":"/Computer_Science/Network/","name":"Forward_Redirect.md","path":"Computer_Science/Network/Forward_Redirect.md","url":"/Computer_Science/Network/Forward_Redirect.html"},{"sort":8,"layout":"default","title":"Sequential Sort","content":"<h1 id=\"sequential-sort\">Sequential Sort</h1>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Sort/","name":"Sequential.md","path":"Algorithm/Sort/Sequential.md","url":"/Algorithm/Sort/Sequential.html"},{"sort":8,"layout":"default","title":"Grid Compression","content":"<h1 id=\"grid-compression\">Grid Compression</h1>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;set&gt;\n#include &lt;unordered_map&gt;\n</span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MAX</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"n\">MAX</span><span class=\"p\">],</span> <span class=\"n\">pSum</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">][</span><span class=\"n\">MAX</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">MAX</span><span class=\"p\">];</span>\n\n<span class=\"n\">unordered_map</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">yHash</span><span class=\"p\">,</span> <span class=\"n\">xHash</span><span class=\"p\">;</span>\n\n<span class=\"n\">set</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">ySet</span><span class=\"p\">,</span> <span class=\"n\">xSet</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">y2</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">x2</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"n\">pSum</span><span class=\"p\">[</span><span class=\"n\">y2</span><span class=\"p\">][</span><span class=\"n\">x2</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">pSum</span><span class=\"p\">[</span><span class=\"n\">y2</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">pSum</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">][</span><span class=\"n\">x2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">pSum</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">ios_base</span><span class=\"o\">::</span><span class=\"n\">sync_with_stdio</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\t<span class=\"n\">cin</span><span class=\"p\">.</span><span class=\"n\">tie</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">;</span>\n\t<span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">N</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t<span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\t\t<span class=\"n\">ySet</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t\t<span class=\"n\">xSet</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ySet</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">yHash</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Y</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">xSet</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">xHash</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\t<span class=\"c1\">//¡¬«• æ–√‡«— ∞·∞˙</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">yHash</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]][</span><span class=\"n\">xHash</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]]</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\t<span class=\"c1\">//∫Œ∫–«’ ¿¸√≥∏Æ</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">Y</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">X</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t\t<span class=\"n\">pSum</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pSum</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">pSum</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">pSum</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">];</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">N</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">X</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;=</span> <span class=\"n\">Y</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n\t\t<span class=\"p\">{</span>\n\t\t\t<span class=\"kt\">int</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">),</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">));</span>\n\t\t\t<span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">));</span>\n\t\t\t<span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">));</span>\n\t\t\t<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">temp</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">result</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Math/","name":"Grid_Compress.md","path":"Algorithm/Math/Grid_Compress.md","url":"/Algorithm/Math/Grid_Compress.html"},{"sort":8,"layout":"default","title":"Process","content":"<h1 id=\"process\">Process</h1>\n\n","dir":"/Computer_Science/OS/","name":"Process.md","path":"Computer_Science/OS/Process.md","url":"/Computer_Science/OS/Process.html"},{"sort":8,"layout":"default","title":"Cursor","content":"<h1 id=\"cursor\">Cursor</h1>\n\n<ul>\n <li>sad</li>\n</ul>\n","dir":"/Computer_Science/Database/","name":"Cursor.md","path":"Computer_Science/Database/Cursor.md","url":"/Computer_Science/Database/Cursor.html"},{"sort":8,"layout":"default","title":"Hash","content":"<h1 id=\"hash\">Hash</h1>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include &lt;iostream&gt;\n#pragma warning(disable:4996)\n</span>\n<span class=\"cp\">#define max 200001\n</span>\n<span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">namecount</span><span class=\"p\">;</span>\n\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"nc\">node</span> <span class=\"p\">{</span>\n\t<span class=\"n\">node</span><span class=\"o\">*</span> <span class=\"n\">next</span><span class=\"p\">;</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"p\">;</span>\n\t<span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n<span class=\"p\">}</span><span class=\"n\">node</span><span class=\"p\">;</span>\n\n<span class=\"n\">node</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">max</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n\n<span class=\"kt\">int</span> <span class=\"nf\">hashcode</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">str</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">hash</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"sc\">'\\0'</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">hash</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">hash</span> <span class=\"o\">*</span> <span class=\"mi\">7</span> <span class=\"o\">+</span> <span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"n\">str</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">%</span> <span class=\"n\">max</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"n\">hash</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">node</span><span class=\"o\">*</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">max</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">hash</span> <span class=\"o\">=</span> <span class=\"n\">hashcode</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">);</span>\n\t<span class=\"n\">node</span><span class=\"o\">*</span> <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">hash</span><span class=\"p\">];</span>\n\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">curr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"kt\">int</span> <span class=\"n\">issame</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">21</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">curr</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"n\">issame</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"k\">break</span><span class=\"p\">;</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">issame</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">curr</span><span class=\"o\">-&gt;</span><span class=\"n\">index</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"n\">curr</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">node</span><span class=\"o\">*</span> <span class=\"nf\">createnode</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"n\">node</span><span class=\"o\">*</span> <span class=\"n\">newnode</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"o\">++</span><span class=\"p\">];</span>\n\t<span class=\"n\">newnode</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n\t<span class=\"n\">newnode</span><span class=\"o\">-&gt;</span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">index</span><span class=\"p\">;</span>\n\t<span class=\"k\">return</span> <span class=\"n\">newnode</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">put</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">hash</span> <span class=\"o\">=</span> <span class=\"n\">hashcode</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">);</span>\n\t<span class=\"n\">node</span><span class=\"o\">*</span> <span class=\"n\">ne</span> <span class=\"o\">=</span> <span class=\"n\">createnode</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">hash</span><span class=\"p\">])</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">hash</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ne</span><span class=\"p\">;</span>\n\t<span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">ne</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">hash</span><span class=\"p\">];</span>\n\t\t<span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">hash</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ne</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">iscontain</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">hash</span> <span class=\"o\">=</span> <span class=\"n\">hashcode</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">);</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">hash</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">else</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">node</span><span class=\"o\">*</span> <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"n\">h</span><span class=\"p\">[</span><span class=\"n\">hash</span><span class=\"p\">];</span>\n\t\t<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">curr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"kt\">int</span> <span class=\"n\">issame</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">21</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">curr</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n\t\t\t\t\t<span class=\"n\">issame</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t\t\t\t<span class=\"k\">break</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"p\">}</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">issame</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"n\">curr</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">parent</span><span class=\"p\">[</span><span class=\"n\">max</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"p\">[</span><span class=\"n\">max</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n\t<span class=\"k\">return</span> <span class=\"n\">parent</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">unite</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">pa</span> <span class=\"o\">=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">pb</span> <span class=\"o\">=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">);</span>\n\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pa</span> <span class=\"o\">!=</span> <span class=\"n\">pb</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">parent</span><span class=\"p\">[</span><span class=\"n\">pb</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pa</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">size</span><span class=\"p\">[</span><span class=\"n\">pa</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">size</span><span class=\"p\">[</span><span class=\"n\">pb</span><span class=\"p\">];</span>\n\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"n\">size</span><span class=\"p\">[</span><span class=\"n\">pa</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">int</span> <span class=\"n\">te</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">;</span>\n\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">\"%d\"</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">te</span><span class=\"p\">);</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">tc</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">tc</span> <span class=\"o\">&lt;=</span> <span class=\"n\">te</span><span class=\"p\">;</span> <span class=\"n\">tc</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">\"%d\"</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">n</span><span class=\"p\">);</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">max</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"n\">parent</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\t\t\t<span class=\"n\">size</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">21</span><span class=\"p\">);</span>\n\t\t\t<span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">21</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"s\">\"%s %s\"</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">);</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">iscontain</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t\t\t<span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">namecount</span><span class=\"o\">++</span><span class=\"p\">);</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">iscontain</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\t\t\t\t<span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">namecount</span><span class=\"o\">++</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">unite</span><span class=\"p\">(</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">),</span> <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">));</span>\n\t\t\t<span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">);</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</code></pre>  </div></div>\n\n","dir":"/DataStructure/Container/","name":"Hash.md","path":"DataStructure/Container/Hash.md","url":"/DataStructure/Container/Hash.html"},{"sort":8,"layout":"default","title":"State","content":"<h1 id=\"state\">State</h1>\n\n","dir":"/Study/Design_Pattern/Behavioral/","name":"State.md","path":"Study/Design_Pattern/Behavioral/State.md","url":"/Study/Design_Pattern/Behavioral/State.html"},{"sort":9,"layout":"default","title":"Strategy","content":"<h1 id=\"strategy\">Strategy</h1>\n\n","dir":"/Study/Design_Pattern/Behavioral/","name":"Strategy.md","path":"Study/Design_Pattern/Behavioral/Strategy.md","url":"/Study/Design_Pattern/Behavioral/Strategy.html"},{"sort":9,"layout":"default","title":"URI &amp; URL &amp; URN","content":"<h1 id=\"uri--url--urn\">URI &amp; URL &amp; URN</h1>\n\n<h3 id=\"uri\">URI</h3>\n\n<ul>\n <li>통합 자원 식별자 URI (Uniform Resource Identifier)로 인터넷 상의 Resource를 나타내는 유일한 주소</li>\n <li>인터넷에서 요구되는 기본 사항으로, 인터넷 프로토콜과 항상 같이 사용됨</li>\n</ul>\n\n<h3 id=\"url\">URL</h3>\n\n<ul>\n <li>통합 자원 지시자 URL(Uniform Resource Locator)로 일반적으로 인터넷 사이트 도메인을 의미\n <ul>\n <li>웹 주소뿐만 아니라, 컴퓨터 네트워크의 자원을 모두 나타낼 수 있음</li>\n </ul>\n </li>\n <li>주소에 접속하기 위해서는 주소와 동일한 프로토콜을 사용해야 됨 (HTTPS / FTP 등)</li>\n <li>URL에서 사용하는 Parameter를 URL Parameter(or Query Parameter)라고 함\n <ul>\n <li>URL 주소에서 <code class=\"language-plaintext highlighter-rouge\">?</code> 이후에 사용하는 문자열</li>\n </ul>\n </li>\n</ul>\n\n<pre><code class=\"language-asp\">FTP : ftp://jeothen:1234@192.168.0.1:8081/D:/~\nHTTPS: https://jeothen.github.io\n</code></pre>  \n\n<h3 id=\"urn\">URN</h3>\n\n<ul>\n <li>통합 자원 이름 URN(Uniform Resource Name)이며 Resource를 이름을 기준으로 식별</li>\n <li>URL과 다르게 Resource의 위치가 변경되더라도 영향을 받지 않음</li>\n <li>프로토콜을 사용하지 않음 (isbn / tel 같이 이름을 기준으로 고유하게 식별할 수 있을 때 사용)</li>\n</ul>\n\n<pre><code class=\"language-asp\">URN : urn:isbn:123456767 \n</code></pre>  \n\n<p><img src=\"/Computer_Science/Network/Img/URI.png\" alt=\"URI\" /></p>\n\n","dir":"/Computer_Science/Network/","name":"URI.md","path":"Computer_Science/Network/URI.md","url":"/Computer_Science/Network/URI.html"},{"sort":9,"layout":"default","title":"Trigger","content":"<h1 id=\"trigger\">Trigger</h1>\n\n","dir":"/Computer_Science/Database/","name":"Trigger.md","path":"Computer_Science/Database/Trigger.md","url":"/Computer_Science/Database/Trigger.html"},{"sort":9,"layout":"default","title":"Thread","content":"<h1 id=\"thread\">Thread</h1>\n\n","dir":"/Computer_Science/OS/","name":"Thread.md","path":"Computer_Science/OS/Thread.md","url":"/Computer_Science/OS/Thread.html"},{"sort":9,"layout":"default","title":"Intro Sort","content":"<h1 id=\"intro-sort\">Intro Sort</h1>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Sort/","name":"Intro.md","path":"Algorithm/Sort/Intro.md","url":"/Algorithm/Sort/Intro.html"},{"sort":10,"layout":"default","title":"Bucket Sort","content":"<h1 id=\"bucket-sort\">Bucket Sort</h1>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Sort/","name":"Bucket.md","path":"Algorithm/Sort/Bucket.md","url":"/Algorithm/Sort/Bucket.html"},{"sort":10,"layout":"default","title":"Interrupt &amp; Polling &amp; DMA","content":"<h1 id=\"interrupt--polling--dma\">Interrupt &amp; Polling &amp; DMA</h1>\n\n","dir":"/Computer_Science/OS/","name":"Interrupt_Polling_DMA.md","path":"Computer_Science/OS/Interrupt_Polling_DMA.md","url":"/Computer_Science/OS/Interrupt_Polling_DMA.html"},{"sort":10,"layout":"default","title":"Template Method","content":"<h1 id=\"template-method\">Template Method</h1>\n\n","dir":"/Study/Design_Pattern/Behavioral/","name":"Template_Method.md","path":"Study/Design_Pattern/Behavioral/Template_Method.md","url":"/Study/Design_Pattern/Behavioral/Template_Method.html"},{"sort":10,"layout":"default","title":"Procedure","content":"<h1 id=\"procedure\">Procedure</h1>\n\n","dir":"/Computer_Science/Database/","name":"Procedure.md","path":"Computer_Science/Database/Procedure.md","url":"/Computer_Science/Database/Procedure.html"},{"sort":10,"layout":"default","title":"Proxy","content":"<h1 id=\"proxy\">Proxy</h1>\n\n<ul>\n <li>Client가 Server로 접속할 때, Client는 Server에 직접 접근할 수 없고 Proxy라는 중간 매개체를 통해 간접적으로 접근\n <ul>\n <li>방화벽을 가지고 있는 시스템에서 통신할 때 사용됨</li>\n </ul>\n </li>\n <li>Proxy 역할을 하는 Server를 Proxy Server라고 함</li>\n <li>Proxy를 도입한 이유는 인터넷 속도의 향상이었지만 현재 <a href=\"https://jeothen.github.io/Computer_Science/Network/CDN.html\">CDN</a>으로 대체되었고, 데이터 전송시 IP 주소를 우회하여 숨길 수 있음\n <ul>\n <li>VPN에서는 전송 내용(Traffic)을 암호화하여 보안성을 향상했지만, Proxy는 전송 내용을 암호화를 하지 않음</li>\n <li>Proxy는 응용프로그램 수준에서 Routing 및 암호화하지만, VPN은 전체 네트워크 Traffic을 Routing 및 암호화</li>\n </ul>\n </li>\n <li>내부 보안이 필요한 다수의 기업에서 Proxy Server를 구축하여 외부 망에 접속</li>\n <li>Web Cache 기능을 제공하는 경우가 많아서 Cache에 데이터가 없는 경우 origin Server에서 데이터를 받아오고 Cache에 저장\n <ul>\n <li>Cache를 이용함으로써 빠른 응답속도, Server Traffic 감소 효과</li>\n </ul>\n </li>\n</ul>\n\n<p><strong>Cache Server</strong> : 빠른 응답속도를 위해 Client와 가까운 곳에 데이터를 임시 저장하여 빠르게 제공해주는 Proxy Server</p>\n\n<p><br /></p>\n\n<p><strong>Forward Proxy</strong></p>\n\n<ul>\n <li>Client가 인터넷에 접근할 때 직접 접근하는 것이 아니라 중간에 있는 Forward Proxy Server를 이용하여 접근</li>\n <li>Proxy Server는 Cache 기능이 있으므로 성능 향상</li>\n <li>많은 기업에서 인트라넷으로 사용하고 있는 방법으로 웹 사용 환경을 제한할 수 있음</li>\n <li>Client는 Forward Proxy Server를 이용하여 Server에 Request를 보내기 때문에 Client의 정보를 숨길 수 있음\n <ul>\n <li>Server 입장에서는 Proxy Server에서 요청한 것으로 보임</li>\n </ul>\n </li>\n</ul>\n\n<p><img src=\"/Computer_Science/Network/Img/Forward_Proxy.png\" alt=\"Forward_Proxy\" /></p>\n\n<div style=\"text-align: right\"> Image ref :https://www.cloudflare.com/learning/cdn/glossary/reverse-proxy/ </div>\n\n<p><strong>Reverse Proxy</strong></p>\n\n<ul>\n <li>Client가 인터넷을 통해여 Server에 Request 하였을 때, 내부 서버에 직접 접근하지 못하고 중간에 있는 Reverse Proxy Server를 통해 접근\n <ul>\n <li>Reverse Proxy Server가 내부 서버(WAS 등)에 접근하여 요청된 내용을 수행하고, 서버로부터 받은 응답을 Client에게 전달</li>\n </ul>\n </li>\n <li>Forward Proxy에서는 Client를 숨길 수 있었지만, Reverse Proxy에서는 Server를 숨길 수 있음</li>\n <li>Proxy Server에 주로 Web Server가 많이 사용되며, 이를 이용하여 Load Balancing을 할 수 있음\n <ul>\n <li>내부 Server 확장성도 뛰어남</li>\n </ul>\n </li>\n</ul>\n\n<p><img src=\"/Computer_Science/Network/Img/Reverse_Proxy.png\" alt=\"Reverse_Proxy\" /></p>\n\n<div style=\"text-align: right\"> Image ref :https://www.cloudflare.com/learning/cdn/glossary/reverse-proxy/ </div>\n\n<p><br /></p>\n\n<p><strong>DMZ</strong></p>\n\n<ul>\n <li>External Network와 Internal Network 사이에 존재하는 Zone</li>\n <li>외부에 정보를 제공해야 되는데 보안을 유지하기 위해 내부 네트워크와 분리\n <ul>\n <li>1차 방화벽에 문제가 있어서 DMZ에 있는 Server가 보안상 위험해졌을 때, 2차 방화벽을 이용하여 내부 네트워크를 보호</li>\n </ul>\n </li>\n <li>DMZ 내에 존재하는 Server로는 Web Server / Email Server / FTP Server 등이 있음\n <ul>\n <li>일반적으로 Reverse Proxy Server를 이용하고 특정 Port만 내부망에 접근할 수 있도록 설정</li>\n <li>보안이 필요한 서버들을 Internal Server에 배치</li>\n </ul>\n </li>\n</ul>\n\n<p><img src=\"/Computer_Science/Network/Img/DMZ.png\" alt=\"DMZ\" /></p>\n\n<div style=\"text-align: right\"> Image ref :http://61.19.221.114/help/Content/Interchange_512/security/security_firewall_and_prxy_srvr.htm </div>\n","dir":"/Computer_Science/Network/","name":"Proxy.md","path":"Computer_Science/Network/Proxy.md","url":"/Computer_Science/Network/Proxy.html"},{"sort":11,"layout":"default","title":"ORMs","content":"<h1 id=\"orms\">ORMs</h1>\n\n","dir":"/Computer_Science/Database/","name":"ORMs.md","path":"Computer_Science/Database/ORMs.md","url":"/Computer_Science/Database/ORMs.html"},{"sort":11,"layout":"default","title":"Visitor","content":"<h1 id=\"visitor\">Visitor</h1>\n\n","dir":"/Study/Design_Pattern/Behavioral/","name":"Visitor.md","path":"Study/Design_Pattern/Behavioral/Visitor.md","url":"/Study/Design_Pattern/Behavioral/Visitor.html"},{"sort":11,"layout":"default","title":"Radix Sort","content":"<h1 id=\"radix-sort\">Radix Sort</h1>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Sort/","name":"Radix.md","path":"Algorithm/Sort/Radix.md","url":"/Algorithm/Sort/Radix.html"},{"sort":11,"layout":"default","title":"Shared Memory","content":"<h1 id=\"shared-memory\">Shared Memory</h1>\n\n","dir":"/Computer_Science/OS/","name":"Shared_Memory.md","path":"Computer_Science/OS/Shared_Memory.md","url":"/Computer_Science/OS/Shared_Memory.html"},{"sort":11,"layout":"default","title":"Key","content":"<h1 id=\"key\">Key</h1>\n\n<p><strong>공개키(Public Key) &amp; 개인키 (Private Key)</strong></p>\n\n<ul>\n <li><strong>공개키</strong> : 비대칭키 암호화에서 사용되며, 주로 서버에서 정보를 제공하면서 내용을 암호화할 때 사용되는 Key</li>\n <li><strong>개인키</strong> : 비대칭키 암호화에서 사용되며, 주로 서버에서 암호화된 정보를 복호화할 때 사용되는 Key</li>\n <li>개인키와 Pair로 동작하기 때문에 개인키로 암호화 된 정보는 공개키로 복호화하고, 역도 성립</li>\n <li>공개키를 이용하여 복호화하는 방법은 전자서명에서 많이 사용됨\n <ul>\n <li>개인키를 이용하여 암호화 한 내용을 생성하고, 수신자는 공개키를 이용하여 복호화</li>\n </ul>\n </li>\n <li>공개키로 암호화 된 내용을 수신자에게 전송하면, 수신자는 개인키를 이용하여 해석</li>\n <li>Public Key는 누구나 확인할 수 있지만, 내용을 확인하기 위해서는 Private Key가 필요</li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>비밀키(Secret Key)</strong></p>\n\n<ul>\n <li>대칭 암호화에서 암호화 및 해독에서 동일하게 사용되는 Key</li>\n <li>사용자들에게만 공유되는 단일 Key</li>\n <li>동일한 Key를 이용하여 암호화 및 복호화를 하기 때문에 대칭키 암호화에서 사용</li>\n</ul>\n\n<hr />\n\n<p><br /></p>\n\n<p><strong>세션키(Session Key)</strong></p>\n\n<ul>\n <li>통신을 하면서 세션이 유지되는 동안만 사용할 수 있는 임시적인 Key</li>\n <li>공개키 인증기관(CA)으로부터 생성하는 방법과 KDC로부터 생성하는 방법이 존재</li>\n <li>공개키 인증기관을 이용하여 Session Key 생성\n <ul>\n <li>송신자는 수신자의 Public Key를 인증기관에게 요청하고, 인증기관의 개인키로 암호화 된 정보를 송신자에게 전달</li>\n <li>인증기관의 공개키로 복호화를 진행하고, 수신자의 공개키로 암호화하여 정보를 전송</li>\n <li>수신자는 송신자의 Public Key를 인증기관에게 요청하고, 인증기관의 개인키로 암호화 된 정보를 수신자에게 전달</li>\n <li>인증기관의 공개키로 복호화를 진행하고, 이전에 송신자에게 전송받은 난수와 수신자가 복호화 한 난수를 송신자에게 전송\n <ul>\n <li>송신자는 정보가 정상적으로 전달되었는지 Check하는 값을 전송</li>\n </ul>\n </li>\n <li><a href=\"http://127.0.0.1:4000/Computer_Science/Network/HTTP.html#https\">HTTPS Process</a> - 송신자는 Session Key 생성하고 수신자의 공개키로 암호화 하여 전송</li>\n <li>수신자는 자신의 Private Key를 이용하여 전달받은 Session Key를 복호화. 송신자와 수신자가 동일한 Session Key를 소유</li>\n </ul>\n </li>\n</ul>\n\n<p><br /></p>\n\n<p><strong>마스터키(Master Key)</strong></p>\n\n<ul>\n <li>\n <p>Session Key를 KDC를 이용하여 생성할 때 사용되는 대칭키(비밀키)</p>\n </li>\n <li>\n <p>키 분배 센터 (KDC, Key Districtbution Center)를 이용</p>\n\n <ul>\n <li>송신자가 수신자와 Session을 연결하기 위해 KDC에 요청</li>\n <li>KDC는 송신자에게 Session Key/난수/수신자 정보 등을 송신자 마스터키로 암호화\n <ul>\n <li>수신자에게도 Session Key/난수/송신자 정보 등을 수신자의 마스터키로 암호화하여 전송</li>\n </ul>\n </li>\n <li>송신자는 KDC로부터 전달받은 Session Key 등 암호화 된 정보를 마스터키를 이용하여 복호화\n <ul>\n <li>수신자도 마찬가지로 자신의 마스터키를 이용하여 복호화</li>\n </ul>\n </li>\n <li>동일한 Session Key를 가지고 있기 때문에 Session Key를 이용하여 통신 가능</li>\n </ul>\n </li>\n <li>\n <p>하나의 마스터키로 여러개의 Session Key를 생성할 수 있음</p>\n\n <ul>\n <li>통신을 할 때마다 다른 Session Key를 생성하기 때문</li>\n </ul>\n </li>\n</ul>\n\n<p><br /></p>\n\n<hr />\n\n<h3 id=\"symmetric-encryption\">Symmetric Encryption</h3>\n\n<ul>\n <li>동일한 키(Secrey Key)를 이용하여 암호화 및 복호화 하는 가장 오래되고 간단한 암호화 방법</li>\n <li>발신자와 수신자는 동일한 Key를 가지고 있어야 메시지를 읽을 수 있음</li>\n <li>알고리즘으로 SEED, AES이 많이 사용되며, 그 외 CachCha20, DES, 3DES, HIGHT, IDEA, RC5, ARIA 등이 있음</li>\n <li>연산 속도가 빠르고 암호화할 수 있는 Message의 길이 제한이 없어서 Size가 큰 Data를 암호화하는데 적합</li>\n <li>기밀성을 제공하고 부분적인 인증 기능/무결성을 제공하지만, 부인방지는 보장하지 않음</li>\n <li>사용자가 많아질수록 Key를 관리하기 어려워지고 확장성이 떨어짐</li>\n</ul>\n\n<p><img src=\"/Computer_Science/Network/Img/Symmetric.png\" alt=\"Symmetric\" /></p>\n\n<div style=\"text-align: right\"> Image ref :https://cheapsslsecurity.com/p/what-is-public-key-and-private-key-cryptography-and-how-does-it-work/ </div>\n\n<p><br /></p>\n\n<h3 id=\"asymmetric-encryption\">ASymmetric Encryption</h3>\n\n<ul>\n <li>2개의 키를 이용하여 암호화/복호화를 진행하는 최신 암호화 방법</li>\n <li>비밀키에 비해 속도는 느리지만, 기밀성/무결성/보안방지/인증 기능을 제공함</li>\n <li>암호화할 수 있는 Message의 길이 제한이 있으므로 Size가 작은 Data를 암호화하는데 적합</li>\n <li>알고리즘으로 RSA, DSA, ECC 등이 많이 사용되며, 그 외 Rabin, ElGamel, Diff-Hellman 등이 있음</li>\n <li>키 분배/관리가 용이하며, 사용자가 많아지더라도 관리해야될 Key의 수가 적어짐\n <ul>\n <li>사용자가 하나의 키를 보유하고 있고, 나머지 하나의 키는 공개키 관리 시스템에서 관리</li>\n </ul>\n </li>\n <li>암호화를 할 때 대칭 암호화에 비해 많은 Resource가 사용됨</li>\n</ul>\n\n<p><img src=\"/Computer_Science/Network/Img/Asymmetric.png\" alt=\"Asymmetric\" /></p>\n\n<div style=\"text-align: right\"> Image ref :https://cheapsslsecurity.com/p/what-is-public-key-and-private-key-cryptography-and-how-does-it-work/ </div>\n","dir":"/Computer_Science/Network/","name":"Key.md","path":"Computer_Science/Network/Key.md","url":"/Computer_Science/Network/Key.html"},{"sort":12,"layout":"default","title":"Shell Sort","content":"<h1 id=\"shell-sort\">Shell Sort</h1>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Sort/","name":"Shell.md","path":"Algorithm/Sort/Shell.md","url":"/Algorithm/Sort/Shell.html"},{"sort":12,"layout":"default","title":"Inter Process Communication (IPC)","content":"<h1 id=\"inter-process-communication-ipc\">Inter Process Communication (IPC)</h1>\n\n","dir":"/Computer_Science/OS/","name":"IPC.md","path":"Computer_Science/OS/IPC.md","url":"/Computer_Science/OS/IPC.html"},{"sort":12,"layout":"default","title":"Shared Storage","content":"<h1 id=\"shared-storage\">Shared Storage</h1>\n\n","dir":"/Computer_Science/Database/","name":"Shared_Storage.md","path":"Computer_Science/Database/Shared_Storage.md","url":"/Computer_Science/Database/Shared_Storage.html"},{"sort":12,"layout":"default","title":"Cookie &amp; Session","content":"<h1 id=\"cookie--session\">Cookie &amp; Session</h1>\n\n<ul>\n <li>HTTP Protocol의 특성 중 비연결성(Connectionless)과 무상태(Stateless)를 해결하기 위해 Cookie와 Session을 도입\n <ul>\n <li>비연결성 : Client의 요청에 대한 Server의 응답이 끝나면 통신을 끊어버리는 성질</li>\n <li>비상태성 : 통신이 지속되지 않으면 Server는 Client의 이전 상태를 보존하지 않아서 식별할 수 없음</li>\n </ul>\n </li>\n</ul>\n\n<h3 id=\"cookie\">Cookie</h3>\n\n<ul>\n <li>Client가 웹 사이트에 접속할 때, Local PC에 Disk에 저장되는 작은 파일\n <ul>\n <li>Client의 State를 로컬 PC에 저장 및 참조</li>\n <li>사이트 방문에 대한 정보를 저장하여 다음번에 방문할 때 간편하고 유용하게 사용</li>\n </ul>\n </li>\n <li>Client가 웹사이트를 방문할 때마다 새로운 정보로 Update</li>\n <li>Domain 및 브라우저마다 저장하는 쿠키가 다르기 때문에, 다른 Domain이나 브라우저에서 사용한 쿠키를 사용할 수 없음</li>\n <li>서버에서 관리하는 것이 아니라 Local PC에서 관리하기 때문에 보안에 취약함</li>\n <li>웹 브라우저마다 호환이 되지 않으며, 사용할 수 있는 Cookie의 갯수 및 크기가 제한적</li>\n <li><strong>구성요소</strong>\n <ul>\n <li>Key : Cookie를 식별하는 데 사용되는 이름</li>\n <li>Value : Cookie에 저장된 값</li>\n <li>Expires : Cookie의 유지 시간. Default 시 Session Cookie로 취급하여 브라우저 종료시 파기</li>\n <li>Domain : Cookie를 전달할 Domain을 지정. Default 시 Cookie를 생성할 때 위치한 Domain(현재 문서)으로 지정</li>\n <li>Path : Cookie Header를 전송하기 전, 요청된 Resource가 있어야 하는 URL 경로. Default 시 현재 문서의 경로로 지정</li>\n <li>Secure : SSL을 사용하는 HTTPS Protocol 사용할 때만 Cookie를 전송</li>\n </ul>\n </li>\n <li><strong>Process</strong>\n <ul>\n <li>Client가 웹 사이트에 접속하면서 데이터 요청</li>\n <li>Server에서 Cookie를 생성하고, HTTP Header를 통해 Cookie를 전송</li>\n <li>Clinet는 Local PC에 응답받은 Cookie를 저장</li>\n <li>이후에 Client가 웹 사이트에 접속 시 Cookie 정보를 HTTP Header에 포함시켜서 전송</li>\n <li>변경점이 있는 경우 Cookie 업데이트 진행</li>\n </ul>\n </li>\n <li><strong>종류</strong>\n <ul>\n <li>Session Cookie : 설정된 Expire date 내에서는 Memory에 Cookie를 저장하지만, 브라우저가 종료되면 파기</li>\n <li>Persistent Cookie : 설정된 Max-Age 내에서 Disk에 파일로 저장하고, 브라우저가 종료되더라도 유지</li>\n <li>Secure Cookie : SSL을 사용하는 HTTPS Protocol에서만 사용되고, Cookie 또한 암호화되어 제3자가 확인할 수 없음</li>\n <li>HTTP Only Cookie : CSS 공격을 대비하기 위해 브라우저에서 Cookie로 접근할 수 없게 함</li>\n </ul>\n </li>\n</ul>\n\n<p><br /></p>\n\n<h3 id=\"session\">Session</h3>\n\n<ul>\n <li>Cookie와 마찬가지로 데이터를 저장하지만, Local PC가 아니라 서버측에서 관리\n <ul>\n <li>Local PC에서는 SessionID만 보유하고 있기 때문에 보안성 우수</li>\n </ul>\n </li>\n <li>Session은 브라우저 종료 시 파기</li>\n <li>SessionID를 이용하여 브라우저에 요청해야 되기 때문에, Local PC에서 사용하는 Cookie보다는 속도가 느림</li>\n <li>Cookie는 Text 형식으로 데이터를 저장하지만, Session은 객체로 저장</li>\n <li>\n <p>Cookie와 다르게 사용할 수 있는 Session의 갯수 제한이 없음</p>\n </li>\n <li>서버에 정보를 저장하기 때문에 세션이 많아질수록 부하 증가</li>\n</ul>\n\n<p><strong>Process</strong></p>\n\n<ul>\n <li>Client가 Server에 요청하면 Client에 대한 정보를 Update</li>\n <li>SessionID가 없는 경우, SessionID를 생성하고 Cookie로 응답</li>\n <li>Client는 SessionID를 Cookie로 저장하고, 이후에 다시 요청할 때 SessionID를 Server 함께 전달</li>\n <li>Server에서는 SessionID를 이용하여 Client의 정보를 활용</li>\n</ul>\n\n<p><br /></p>\n","dir":"/Computer_Science/Network/","name":"Cookie_Session.md","path":"Computer_Science/Network/Cookie_Session.md","url":"/Computer_Science/Network/Cookie_Session.html"},{"sort":13,"layout":"default","title":"Topological Sort","content":"<h1 id=\"topological-sort\">Topological Sort</h1>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Sort/","name":"Topological.md","path":"Algorithm/Sort/Topological.md","url":"/Algorithm/Sort/Topological.html"},{"sort":13,"layout":"default","title":"VPN","content":"<h1 id=\"vpn\">VPN</h1>\n\n<ul>\n <li>VPN(Virtual Private Network)은 물리적으로 전선을 설치하여 망을 구성하지 않고, 암호화 기술을 이용하여 통신 시스템을 구축하는 것을 의미</li>\n <li>VPN은 전체 네트워크 수준에서 Routing 및 암호화를 하기 때문에 모든 Traffic을 Redirection 할 수 있음\n <ul>\n <li>Proxy는 특정 프로그램 수준에서 Routing 및 암호화</li>\n </ul>\n </li>\n <li>원하는 Server에 접속 시, 터널링 프로토콜을 통해 SSL로 암호화되어 보안성이 우수함</li>\n <li>대칭키 / 비대칭키 / 해시를 이용한 암호 등 크게 3가지 암호 알고리즘을 사용</li>\n</ul>\n\n<p><strong>VPN 터널링</strong></p>\n\n<ul>\n <li>Public Network Routing의 모든 경로를 거치지 않고, 특정한 2개의 Router에서 터널을 형성하여 연결시켜줌\n <ul>\n <li>터널링을 사용하기 위해서는 터널링을 제공하는 프로토콜을 사용하여 구현 필요</li>\n </ul>\n </li>\n <li>기기에서 다른 네트워크와 연결시 데이터를 암호화하여 Snoop 방지</li>\n <li>방문하는 웹 사이트나 인터넷 제공업체에게 VPN 제공업체의 IP 주소로 제공되어 보안성 향상</li>\n <li>L2TP, PPTP, OpenVPN, SSTP, IPSec 등의 프로토콜이 있으며, OSI 2계층~4계층 사이에서 사용됨</li>\n</ul>\n\n<p><strong>특징</strong></p>\n\n<ul>\n <li><strong>기밀성</strong> : 기밀성을 위해 데이터를 암호화하여 전송</li>\n <li><strong>무결성</strong> : 패킷의 무결성을 위해 인증 프로토콜을 이용</li>\n <li><strong>근원인증 및 접근 통제</strong> : 인증된 사용자에게만 데이터 접근을 허용하고, 수신된 데이터가 알맞은 송신자에게서 전송되었는지 보장</li>\n</ul>\n\n<p><img src=\"/Computer_Science/Network/Img/VPN.png\" alt=\"workHome_VPN\" /></p>\n\n<div style=\"text-align: right\"> Image ref : https://namu.wiki/w/%EA%B0%80%EC%83%81%20%EC%82%AC%EC%84%A4%EB%A7%9D?from=VPN </div>\n\n<h3 id=\"tor\">Tor</h3>\n\n<ul>\n <li>The Online Router의 약자로, “토어”라고 읽음. 네트워크 우회 및 익명을 위해 사용되는 Free Software</li>\n <li>암호화는 비대칭키를 기반으로 하며, Router를 거치면서 순차적으로 공개키로 암호화하여 메시지를 전송함\n <ul>\n <li>여러 네트워크를 경유하여 전송하기 때문에 속도는 느림</li>\n </ul>\n </li>\n <li>ISP를 통해 데이터를 전송할 때는 쉽게 검열당할 수 있지만, Tor를 이용하면 중간에 거쳐간 모든 node를 확인해야 Source를 확인할 수 있음</li>\n <li>이용자들간 자신의 PC를 라우팅 Node로 사용할 수 있게 설정함으로써 네트워크 속도 및 보안성 향상</li>\n</ul>\n\n<p><img src=\"/Computer_Science/Network/Img/Tor.png\" alt=\"Tor\" /></p>\n\n<div style=\"text-align: right\"> Image ref : https://namu.wiki/w/Tor(%EC%9D%B5%EB%AA%85%20%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC)?from=%ED%86%A0%EB%A5%B4%20%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80 </div>\n","dir":"/Computer_Science/Network/","name":"VPN.md","path":"Computer_Science/Network/VPN.md","url":"/Computer_Science/Network/VPN.html"},{"sort":13,"layout":"default","title":"Data Replication","content":"<h1 id=\"data-replication\">Data Replication</h1>\n\n<ul>\n <li>asd</li>\n</ul>\n","dir":"/Computer_Science/Database/","name":"Data_Replication.md","path":"Computer_Science/Database/Data_Replication.md","url":"/Computer_Science/Database/Data_Replication.html"},{"sort":13,"layout":"default","title":"Remote Procedures Call (RPC)","content":"<h1 id=\"remote-procedures-call-rpc\">Remote Procedures Call (RPC)</h1>\n\n","dir":"/Computer_Science/OS/","name":"RPC.md","path":"Computer_Science/OS/RPC.md","url":"/Computer_Science/OS/RPC.html"},{"sort":14,"layout":"default","title":"Multi Thread","content":"<h1 id=\"multi-thread\">Multi Thread</h1>\n\n","dir":"/Computer_Science/OS/","name":"Multi_Thread.md","path":"Computer_Science/OS/Multi_Thread.md","url":"/Computer_Science/OS/Multi_Thread.html"},{"sort":14,"layout":"default","title":"Tim Sort","content":"<h1 id=\"tim-sort\">Tim Sort</h1>\n\n<p><strong>Code</strong></p>\n\n<div class=\"language-c++ highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n</code></pre>  </div></div>\n\n","dir":"/Algorithm/Sort/","name":"Tim.md","path":"Algorithm/Sort/Tim.md","url":"/Algorithm/Sort/Tim.html"},{"sort":14,"layout":"default","title":"CDN","content":"<h1 id=\"cdn\">CDN</h1>\n\n<ul>\n <li>콘텐츠 전송 네트워크(Content Delivery Network)는 분산된 서버 네트워크</li>\n <li>Origin Server에서 분산된 여러개의 Cache 서버 중 사용자와 가까운 위치의 Cache 서버에서 콘텐츠를 전송하기 때문에 빠른 데이터 전송이 가능\n <ul>\n <li>Origin Server에 요청이 집중되지 않기 때문에 병목현상을 피할 수 있음</li>\n </ul>\n </li>\n <li>ISP(인터넷 서비스 제공자) 별로 분산된 Cache Server는 동기화(Synchronization)을 통해 모든 서버에서 동일한 데이터를 제공할 수 있게 함</li>\n <li>지역별로 각 서버의 Latency Time을 알고 있기 때문에, Latency가 낮은 지역으로 Load Balancing 진행하여 Cache Server를 매칭</li>\n <li>실시간으로 Streaming을 제공해야되는 Netflix 같은 업체에서 Cache Server를 이용하여 데이터 전송\n <ul>\n <li>Streaming 서비스는 Client에게 비디오 파일을 지속적으로 전송하는데, 연속된 파일 형태가 아니라 Segment 형태로 전송함</li>\n </ul>\n </li>\n</ul>\n\n<p><strong>작동원리</strong></p>\n\n<ul>\n <li>아래 그림은 Alibaba의 CDN Architecture인데, CDN에 대한 설명이 잘 되어 있다고 생각함 (Image 아래 Ref 기입)</li>\n <li>먼저 사용자는 CDN의 Cache Server를 사용하기 전, DNS를 통해 어떤 Cache Server를 사용할 지 확인해야 됨</li>\n <li>DNS Resolver로 접속하려는 도메인의 CName(Canonical Name, 도메인을 다른 도메인으로 맵핑)을 얻어 Low Latency의 Cache Server에 대한 IP를 획득</li>\n <li>Client는 수신된 DNS로부터 얻은 Cache Server의 IP 주소에 엑세스 요청을 하고 데이터를 전송 받음</li>\n</ul>\n\n<p><img src=\"/Computer_Science/Network/Img/CDN.png\" alt=\"CDN\" /></p>\n\n<div style=\"text-align: right\"> https://www.alibabacloud.com/blog/content-delivery-network-cdn-accelerate-distribution-of-content-globally_597159 </div>\n","dir":"/Computer_Science/Network/","name":"CDN.md","path":"Computer_Science/Network/CDN.md","url":"/Computer_Science/Network/CDN.html"},{"sort":14,"layout":"default","title":"N+1 Problem","content":"<h1 id=\"n1-problem\">N+1 Problem</h1>\n\n<ul>\n <li>asdas</li>\n</ul>\n","dir":"/Computer_Science/Database/","name":"N+1_Problem.md","path":"Computer_Science/Database/N+1_Problem.md","url":"/Computer_Science/Database/N+1_Problem.html"},{"sort":15,"layout":"default","title":"Hacking","content":"<h1 id=\"hacking\">Hacking</h1>\n\n<h3 id=\"spoofing\">Spoofing</h3>\n\n<ul>\n <li></li>\n</ul>\n\n<p><strong>공격 방법</strong></p>\n\n<ul>\n <li>ARP Spoofing\n <ul>\n <li>대응책 :</li>\n </ul>\n </li>\n <li>IP Spoofing\n <ul>\n <li>대응책 :</li>\n </ul>\n </li>\n <li>DNS Spoofing\n <ul>\n <li>대응책 :</li>\n </ul>\n </li>\n</ul>\n\n<h3 id=\"sniffing\">Sniffing</h3>\n\n<ul>\n <li></li>\n</ul>\n\n<p>https://thecyberteacher.com/sniffing/</p>\n\n<p>https://sonseungha.tistory.com/485</p>\n\n<p><strong>공격 방법</strong></p>\n\n<ul>\n <li>Switch Jamming</li>\n <li>Port Mirroring</li>\n <li>ARP Redirect</li>\n <li>ICMP Redirect</li>\n</ul>\n\n<p><strong>대응책</strong></p>\n\n<ul>\n <li>\n <p>능동적 대응책</p>\n\n <ul>\n <li>\n <p>Ping을 이용한 탐지</p>\n </li>\n <li>\n <p>ARP</p>\n </li>\n </ul>\n </li>\n <li>\n <p>수동적 대응책</p>\n <ul>\n <li>암호화</li>\n </ul>\n </li>\n</ul>\n\n<h3 id=\"snooping\">Snooping</h3>\n\n<ul>\n <li>ㄴㅁㅇ</li>\n</ul>\n\n<p><strong>공격 방법</strong></p>\n\n<ul>\n <li>\n <p>IGMP Snopping</p>\n </li>\n <li>\n <p>DHCP Snooping</p>\n </li>\n</ul>\n\n<p><img src=\"/Computer_Science/Network/Img/IGMP_Snooping.png\" alt=\"IGMP_Snooping\" /></p>\n\n<div style=\"text-align: right\"> Image ref : https://en.wikipedia.org/wiki/DHCP_snooping/ </div>\n","dir":"/Computer_Science/Network/","name":"Hacking_.md","path":"Computer_Science/Network/Hacking_.md","url":"/Computer_Science/Network/Hacking_.html"},{"sort":15,"layout":"default","title":"Scheduling","content":"<h1 id=\"scheduling\">Scheduling</h1>\n\n","dir":"/Computer_Science/OS/","name":"Scheduling.md","path":"Computer_Science/OS/Scheduling.md","url":"/Computer_Science/OS/Scheduling.html"},{"sort":15,"layout":"default","title":"CAP Theorem","content":"<h1 id=\"cap-theorem\">CAP Theorem</h1>\n\n<ul>\n <li>asd</li>\n</ul>\n","dir":"/Computer_Science/Database/","name":"CAP_Theorem.md","path":"Computer_Science/Database/CAP_Theorem.md","url":"/Computer_Science/Database/CAP_Theorem.html"},{"sort":16,"layout":"default","title":"Security","content":"<h1 id=\"security\">Security</h1>\n\n<p><strong>Security Goal</strong></p>\n\n<ul>\n <li>무결성 (Integrity) :</li>\n <li>기밀성 (Confidentiality)</li>\n <li>인증 (Authentication)</li>\n <li>부인방지(Non-Repudiation)</li>\n <li>책임추정성(Accountability)</li>\n <li>가용성 (Availability)</li>\n</ul>\n\n<h3 id=\"ssh\">SSH</h3>\n\n<h3 id=\"ssl\">SSL</h3>\n\n<h3 id=\"tls\">TLS</h3>\n\n<h3 id=\"ddos\">DDOS</h3>\n\n<h3 id=\"ids\">IDS</h3>\n\n<h3 id=\"firewall\">Firewall</h3>\n\n","dir":"/Computer_Science/Network/","name":"Security_.md","path":"Computer_Science/Network/Security_.md","url":"/Computer_Science/Network/Security_.html"},{"sort":16,"layout":"default","title":"Synchronization","content":"<h1 id=\"synchronization\">Synchronization</h1>\n\n","dir":"/Computer_Science/OS/","name":"Synchronization.md","path":"Computer_Science/OS/Synchronization.md","url":"/Computer_Science/OS/Synchronization.html"},{"sort":17,"layout":"default","title":"Blocking","content":"<h1 id=\"blocking\">Blocking</h1>\n\n","dir":"/Computer_Science/OS/","name":"Blocking.md","path":"Computer_Science/OS/Blocking.md","url":"/Computer_Science/OS/Blocking.html"},{"sort":18,"layout":"default","title":"Memory","content":"<h1 id=\"memory\">Memory</h1>\n\n<p><strong>Memory Operand</strong></p>\n\n<p><strong>Endian</strong></p>\n\n","dir":"/Computer_Science/OS/","name":"Memory.md","path":"Computer_Science/OS/Memory.md","url":"/Computer_Science/OS/Memory.html"},{"sort":19,"layout":"default","title":"Deadlock","content":"<h1 id=\"deadlock\">Deadlock</h1>\n\n","dir":"/Computer_Science/OS/","name":"Deadlock.md","path":"Computer_Science/OS/Deadlock.md","url":"/Computer_Science/OS/Deadlock.html"},{"sort":20,"layout":"default","title":"Virtual Memory","content":"<h1 id=\"virtual-memory\">Virtual Memory</h1>\n\n","dir":"/Computer_Science/OS/","name":"Virtual Memory.md","path":"Computer_Science/OS/Virtual Memory.md","url":"/Computer_Science/OS/Virtual%20Memory.html"},{"sort":21,"layout":"default","title":"Paging","content":"<h1 id=\"paging\">Paging</h1>\n\n","dir":"/Computer_Science/OS/","name":"Paging.md","path":"Computer_Science/OS/Paging.md","url":"/Computer_Science/OS/Paging.html"},{"sort":22,"layout":"default","title":"File System","content":"<h1 id=\"file-system\">File System</h1>\n\n","dir":"/Computer_Science/OS/","name":"File_System.md","path":"Computer_Science/OS/File_System.md","url":"/Computer_Science/OS/File_System.html"},{"sort":23,"layout":"default","title":"Floating Point","content":"<h1 id=\"floating-point\">Floating Point</h1>\n\n","dir":"/Computer_Science/OS/","name":"Floating_Point.md","path":"Computer_Science/OS/Floating_Point.md","url":"/Computer_Science/OS/Floating_Point.html"},{"sort":24,"layout":"default","title":"Regex Expression","content":"<h1 id=\"regex-expression\">Regex Expression</h1>\n\n","dir":"/Computer_Science/OS/","name":"Regex_Expression.md","path":"Computer_Science/OS/Regex_Expression.md","url":"/Computer_Science/OS/Regex_Expression.html"},{"sort":25,"layout":"default","title":"Virtual Machine","content":"<h1 id=\"virtual-machine\">Virtual Machine</h1>\n\n","dir":"/Computer_Science/OS/","name":"Virtual_Machine.md","path":"Computer_Science/OS/Virtual_Machine.md","url":"/Computer_Science/OS/Virtual_Machine.html"}]